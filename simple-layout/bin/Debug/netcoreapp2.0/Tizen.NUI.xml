<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Tizen.NUI</name>
    </assembly>
    <members>
        <member name="T:Tizen.NUI.AccessibilityManager.StatusChangedEventArgs">
             @brief Event arguments that passed via StatusChanged signal
            
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.AccessibilityManager.StatusChangedEventArgs.AccessibilityManager">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.AccessibilityManager.ActionNextEventArgs">
             @brief Event arguments that passed via ActionNext signal
            
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.AccessibilityManager.ActionNextEventArgs.AccessibilityManager">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.AccessibilityManager.ActionPreviousEventArgs">
             @brief Event arguments that passed via ActionPrevious signal
            
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.AccessibilityManager.ActionPreviousEventArgs.AccessibilityManager">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.AccessibilityManager.ActionActivateEventArgs">
             @brief Event arguments that passed via ActionActivate signal
            
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.AccessibilityManager.ActionActivateEventArgs.AccessibilityManager">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.AccessibilityManager.ActionReadEventArgs">
             @brief Event arguments that passed via ActionRead signal
            
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.AccessibilityManager.ActionReadEventArgs.AccessibilityManager">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.AccessibilityManager.ActionOverEventArgs">
             @brief Event arguments that passed via ActionOver signal
            
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.AccessibilityManager.ActionOverEventArgs.AccessibilityManager">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.AccessibilityManager.ActionReadNextEventArgs">
             @brief Event arguments that passed via ActionReadNext signal
            
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.AccessibilityManager.ActionReadNextEventArgs.AccessibilityManager">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.AccessibilityManager.ActionReadPreviousEventArgs">
             @brief Event arguments that passed via ActionReadPrevious signal
            
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.AccessibilityManager.ActionReadPreviousEventArgs.AccessibilityManager">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.AccessibilityManager.ActionUpEventArgs">
             @brief Event arguments that passed via ActionUp signal
            
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.AccessibilityManager.ActionUpEventArgs.AccessibilityManager">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.AccessibilityManager.ActionDownEventArgs">
             @brief Event arguments that passed via ActionDown signal
            
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.AccessibilityManager.ActionDownEventArgs.AccessibilityManager">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.AccessibilityManager.ActionClearFocusEventArgs">
             @brief Event arguments that passed via ActionClearFocus signal
            
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.AccessibilityManager.ActionClearFocusEventArgs.AccessibilityManager">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.AccessibilityManager.ActionBackEventArgs">
             @brief Event arguments that passed via ActionBack signal
            
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.AccessibilityManager.ActionBackEventArgs.AccessibilityManager">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.AccessibilityManager.ActionScrollUpEventArgs">
             @brief Event arguments that passed via ActionScrollUp signal
            
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.AccessibilityManager.ActionScrollUpEventArgs.AccessibilityManager">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.AccessibilityManager.ActionScrollDownEventArgs">
             @brief Event arguments that passed via ActionScrollDown signal
            
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.AccessibilityManager.ActionScrollDownEventArgs.AccessibilityManager">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.AccessibilityManager.ActionPageLeftEventArgs">
             @brief Event arguments that passed via ActionPageLeft signal
            
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.AccessibilityManager.ActionPageLeftEventArgs.AccessibilityManager">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.AccessibilityManager.ActionPageRightEventArgs">
             @brief Event arguments that passed via ActionPageRight signal
            
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.AccessibilityManager.ActionPageRightEventArgs.AccessibilityManager">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.AccessibilityManager.ActionPageUpEventArgs">
             @brief Event arguments that passed via ActionPageUp signal
            
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.AccessibilityManager.ActionPageUpEventArgs.AccessibilityManager">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.AccessibilityManager.ActionPageDownEventArgs">
             @brief Event arguments that passed via ActionPageDown signal
            
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.AccessibilityManager.ActionPageDownEventArgs.AccessibilityManager">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.AccessibilityManager.ActionMoveToFirstEventArgs">
             @brief Event arguments that passed via ActionMoveToFirst signal
            
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.AccessibilityManager.ActionMoveToFirstEventArgs.AccessibilityManager">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.AccessibilityManager.ActionMoveToLastEventArgs">
             @brief Event arguments that passed via ActionMoveToLast signal
            
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.AccessibilityManager.ActionMoveToLastEventArgs.AccessibilityManager">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.AccessibilityManager.ActionReadFromTopEventArgs">
             @brief Event arguments that passed via ActionReadFromTop signal
            
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.AccessibilityManager.ActionReadFromTopEventArgs.AccessibilityManager">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.AccessibilityManager.ActionReadFromNextEventArgs">
             @brief Event arguments that passed via ActionReadFromNext signal
            
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.AccessibilityManager.ActionReadFromNextEventArgs.AccessibilityManager">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.AccessibilityManager.ActionZoomEventArgs">
             @brief Event arguments that passed via ActionZoom signal
            
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.AccessibilityManager.ActionZoomEventArgs.AccessibilityManager">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.AccessibilityManager.ActionReadIndicatorInformationEventArgs">
             @brief Event arguments that passed via ActionReadIndicatorInformation signal
            
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.AccessibilityManager.ActionReadIndicatorInformationEventArgs.AccessibilityManager">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.AccessibilityManager.ActionReadPauseResumeEventArgs">
             @brief Event arguments that passed via ActionReadPauseResume signal
            
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.AccessibilityManager.ActionReadPauseResumeEventArgs.AccessibilityManager">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.AccessibilityManager.ActionStartStopEventArgs">
             @brief Event arguments that passed via ActionStartStop signal
            
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.AccessibilityManager.ActionStartStopEventArgs.AccessibilityManager">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.AccessibilityManager.FocusChangedEventArgs">
             @brief Event arguments that passed via ActionPageUp signal
            
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.AccessibilityManager.FocusChangedEventArgs.ViewCurrent">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.AccessibilityManager.FocusChangedEventArgs.ViewNext">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.AccessibilityManager.FocusedViewActivatedEventArgs">
             @brief Event arguments that passed via FocusedViewActivated signal
            
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.AccessibilityManager.FocusedViewActivatedEventArgs.View">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.AccessibilityManager.FocusOvershotEventArgs">
             @brief Event arguments that passed via FocusOvershot signal
            
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.AccessibilityManager.FocusOvershotEventArgs.CurrentFocusedView">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.AccessibilityManager.FocusOvershotEventArgs.FocusOvershotDirection">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.AccessibilityManager.AccessibilityAttribute">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.AccessibilityManager.FocusOvershotDirection">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.ActivatedSignalType.swigCMemOwn">
            <summary>
            swigCMemOwn
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.ActivatedSignalType.disposed">
            <summary>
            A Flat to check if it is already disposed.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ActivatedSignalType.Finalize">
            <summary>
            Dispose
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ActivatedSignalType.Dispose">
            <summary>
            Dispose
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ActivatedSignalType.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            Dispose
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ActivatedSignalType.Empty">
            <summary>
            Queries whether there are any connected slots.
            </summary>
            <returns>True if there are any slots connected to the signal</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ActivatedSignalType.GetConnectionCount">
            <summary>
            Queries the number of slots.
            </summary>
            <returns>The number of slots connected to this signal</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ActivatedSignalType.Connect(System.Delegate)">
            <summary>
            Connects a function.
            </summary>
            <param name="func">The function to connect</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ActivatedSignalType.Disconnect(System.Delegate)">
            <summary>
            Disconnects a function.
            </summary>
            <param name="func">The function to disconnect</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ActivatedSignalType.Emit(Tizen.NUI.InputMethodContext)">
            <summary>
            Emits the signal.
            </summary>
            <param name="arg">The first value to pass to callbacks</param>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ActivatedSignalType.#ctor">
            <summary>
            The contructor.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.AdaptorSignalType">
            <summary>
            public class AdaptorSignalType : global::System.IDisposable
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.AdaptorSignalType.swigCMemOwn">
            <summary>
            swigCMemOwn
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.AdaptorSignalType.Finalize">
            <summary>
            Dispose
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.AdaptorSignalType.Dispose">
            <summary>
            Dispose
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.AdaptorSignalType.Empty">
            <summary>
            Queries whether there are any connected slots.
            </summary>
            <returns>True if there are any slots connected to the signal</returns>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.AdaptorSignalType.GetConnectionCount">
            <summary>
            Queries the number of slots.
            </summary>
            <returns>The number of slots connected to this signal</returns>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.AdaptorSignalType.Connect(System.Delegate)">
            <summary>
            Connects a function.
            </summary>
            <param name="func">The function to connect</param>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.AdaptorSignalType.Disconnect(System.Delegate)">
            <summary>
            Disconnects a function.
            </summary>
            <param name="func">The function to disconnect</param>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.AdaptorSignalType.Emit(Tizen.NUI.Adaptor)">
            <summary>
            Emits the signal.
            </summary>
            <param name="arg">The first value to pass to callbacks</param>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.AdaptorSignalType.#ctor">
            <summary>
            The contructor.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.Alignment.Padding">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Alignment.Padding.swigCMemOwn">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Alignment.Padding.disposed">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Alignment.Padding.Dispose">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Alignment.Padding.Dispose(Tizen.NUI.DisposeTypes)">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Alignment.Padding.#ctor">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Alignment.Padding.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Alignment.Padding.left">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Alignment.Padding.right">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Alignment.Padding.top">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Alignment.Padding.bottom">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.Alignment.Type">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.Alignment.Scaling">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.Any.AnyContainerBase">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Any.AnyContainerBase.swigCMemOwn">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Any.AnyContainerBase.disposed">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Any.AnyContainerBase.Dispose">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Any.AnyContainerBase.Dispose(Tizen.NUI.DisposeTypes)">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Any.AnyContainerBase.#ctor(Tizen.NUI.SWIGTYPE_p_std__type_info,Tizen.NUI.SWIGTYPE_p_f_r_q_const__Dali__Any__AnyContainerBase__p_Dali__Any__AnyContainerBase,Tizen.NUI.SWIGTYPE_p_f_p_q_const__Dali__Any__AnyContainerBase__void)">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Any.AnyContainerBase.GetType">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Any.AnyContainerBase.mType">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Any.AnyContainerBase.mCloneFunc">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Any.AnyContainerBase.mDeleteFunc">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.NUIApplicationInitEventArgs">
             @brief Event arguments that passed via NUIApplicationInit signal
            
        </member>
        <member name="P:Tizen.NUI.NUIApplicationInitEventArgs.Application">
             @brief Application - is the application that is being initialized
            
        </member>
        <member name="T:Tizen.NUI.NUIApplicationTerminatingEventArgs">
             @brief Event arguments that passed via NUIApplicationTerminate signal
            
        </member>
        <member name="P:Tizen.NUI.NUIApplicationTerminatingEventArgs.Application">
             @brief Application - is the application that is being Terminated
            
        </member>
        <member name="T:Tizen.NUI.NUIApplicationPausedEventArgs">
             @brief Event arguments that passed via NUIApplicationPause signal
            
        </member>
        <member name="P:Tizen.NUI.NUIApplicationPausedEventArgs.Application">
             @brief Application - is the application that is being Paused
            
        </member>
        <member name="T:Tizen.NUI.NUIApplicationResumedEventArgs">
             @brief Event arguments that passed via NUIApplicationResume signal
            
        </member>
        <member name="P:Tizen.NUI.NUIApplicationResumedEventArgs.Application">
             @brief Application - is the application that is being Resumed
            
        </member>
        <member name="T:Tizen.NUI.NUIApplicationResetEventArgs">
             @brief Event arguments that passed via NUIApplicationReset signal
            
        </member>
        <member name="P:Tizen.NUI.NUIApplicationResetEventArgs.Application">
             @brief Application - is the application that is being Reset
            
        </member>
        <member name="T:Tizen.NUI.NUIApplicationResizedEventArgs">
             @brief Event arguments that passed via NUIApplicationResize signal
            
        </member>
        <member name="P:Tizen.NUI.NUIApplicationResizedEventArgs.Application">
             @brief Application - is the application that is being Resized
            
        </member>
        <member name="T:Tizen.NUI.NUIApplicationLanguageChangedEventArgs">
             @brief Event arguments that passed via NUIApplicationLanguageChanged signal
            
        </member>
        <member name="P:Tizen.NUI.NUIApplicationLanguageChangedEventArgs.Application">
             @brief Application - is the application that is being affected with Device's language change
            
        </member>
        <member name="T:Tizen.NUI.NUIApplicationRegionChangedEventArgs">
             @brief Event arguments that passed via NUIApplicationRegionChanged signal
            
        </member>
        <member name="P:Tizen.NUI.NUIApplicationRegionChangedEventArgs.Application">
             @brief Application - is the application that is being affected with Device's region change
            
        </member>
        <member name="T:Tizen.NUI.NUIApplicationBatteryLowEventArgs">
             @brief Event arguments that passed via NUIApplicationBatteryLow signal
            
        </member>
        <member name="P:Tizen.NUI.NUIApplicationBatteryLowEventArgs.BatteryStatus">
             @brief Application - is the application that is being affected when the battery level of the device is low
            
        </member>
        <member name="T:Tizen.NUI.NUIApplicationMemoryLowEventArgs">
             @brief Event arguments that passed via NUIApplicationMemoryLow signal
            
        </member>
        <member name="P:Tizen.NUI.NUIApplicationMemoryLowEventArgs.MemoryStatus">
             @brief Application - is the application that is being affected when the memory level of the device is low
            
        </member>
        <member name="T:Tizen.NUI.NUIApplicationAppControlEventArgs">
             @brief Event arguments that passed via NUIApplicationAppControl	 signal
            
        </member>
        <member name="P:Tizen.NUI.NUIApplicationAppControlEventArgs.Application">
             @brief Application - is the application that is receiving the launch request from another application
            
        </member>
        <member name="P:Tizen.NUI.NUIApplicationAppControlEventArgs.VoidP">
             @brief VoidP - contains the information about why the application is launched
            
        </member>
        <member name="T:Tizen.NUI.Application.BatteryStatus">
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.Application.MemoryStatus">
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="E:Tizen.NUI.Application.Initialized">
            @brief Event for Initialized signal which can be used to subscribe/unsubscribe the event handler
             provided by the user. Initialized signal is emitted when application is initialised
        </member>
        <member name="E:Tizen.NUI.Application.Terminating">
            @brief Event for Terminated signal which can be used to subscribe/unsubscribe the event handler
             provided by the user. Terminated signal is emitted when application is terminating
        </member>
        <member name="E:Tizen.NUI.Application.Paused">
            @brief Event for Paused signal which can be used to subscribe/unsubscribe the event handler
            provided by the user. Paused signal is emitted when application is paused
        </member>
        <member name="E:Tizen.NUI.Application.Resumed">
            @brief Event for Resumed signal which can be used to subscribe/unsubscribe the event handler
             provided by the user. Resumed signal is emitted when application is resumed
        </member>
        <member name="E:Tizen.NUI.Application.Reset">
            @brief Event for Reset signal which can be used to subscribe/unsubscribe the event handler
             provided by the user. Reset signal is emitted when application is reset
        </member>
        <member name="E:Tizen.NUI.Application.Resized">
            @brief Event for Resized signal which can be used to subscribe/unsubscribe the event handler
             provided by the user. Resized signal is emitted when application is resized
        </member>
        <member name="E:Tizen.NUI.Application.LanguageChanged">
            @brief Event for LanguageChanged signal which can be used to subscribe/unsubscribe the event handler
             provided by the user. LanguageChanged signal is emitted when the region of the device is changed.
        </member>
        <member name="E:Tizen.NUI.Application.RegionChanged">
            @brief Event for RegionChanged signal which can be used to subscribe/unsubscribe the event handler
             provided by the user. RegionChanged signal is emitted when the region of the device is changed.
        </member>
        <member name="E:Tizen.NUI.Application.BatteryLow">
            @brief Event for BatteryLow signal which can be used to subscribe/unsubscribe the event handler
            provided by the user. BatteryLow signal is emitted when the battery level of the device is low.
        </member>
        <member name="E:Tizen.NUI.Application.MemoryLow">
            @brief Event for MemoryLow signal which can be used to subscribe/unsubscribe the event handler
             provided by the user. MemoryLow signal is emitted when the memory level of the device is low.
        </member>
        <member name="E:Tizen.NUI.Application.AppControl">
            @brief Event for AppControl signal which can be used to subscribe/unsubscribe the event handler
             provided by the user. AppControl signal is emitted when another application sends a launch request to the application.
        </member>
        <member name="M:Tizen.NUI.Application.AddIdle(System.Delegate)">
            <summary>
            Ensures that the function passed in is called from the main loop when it is idle.
            </summary>
            <param name="func">The function to call</param>
            <returns>true if added successfully, false otherwise</returns>
        </member>
        <member name="M:Tizen.NUI.Application.New">
            Outer::outer_method(int)
        </member>
        <member name="T:Tizen.NUI.Application.WindowMode">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.Builder.QuitEventArgs">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Builder.LoadFromFile(System.String)">
            
        </member>
        <member name="T:Tizen.NUI.Builder.UIFormat">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.Camera.Property">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Camera.Property.swigCMemOwn">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Camera.Property.disposed">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Camera.Property.Dispose">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Camera.Property.Dispose(Tizen.NUI.DisposeTypes)">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Camera.Property.#ctor">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Camera.Property.TYPE">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Camera.Property.PROJECTION_MODE">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Camera.Property.FIELD_OF_VIEW">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Camera.Property.ASPECT_RATIO">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Camera.Property.NEAR_PLANE_DISTANCE">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Camera.Property.FAR_PLANE_DISTANCE">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Camera.Property.LEFT_PLANE_DISTANCE">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Camera.Property.RIGHT_PLANE_DISTANCE">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Camera.Property.TOP_PLANE_DISTANCE">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Camera.Property.BOTTOM_PLANE_DISTANCE">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Camera.Property.TARGET_POSITION">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Camera.Property.PROJECTION_MATRIX">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Camera.Property.VIEW_MATRIX">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Camera.Property.INVERT_Y_AXIS">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ConnectionTrackerInterface.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            Dispose
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ConnectionTrackerInterface.SignalConnected(Tizen.NUI.SlotObserver,Tizen.NUI.SWIGTYPE_p_CallbackBase)">
            <summary>
            Called when a signal is connected.
            </summary>
            <param name="slotObserver">The slot observer i.e. a signal. Ownership is not passed</param>
            <param name="callback">The call back. Ownership is not passed</param>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.Constants.TextureType">
            <summary>
            Enumeration for texture types.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Constants.TextureType.Texture2D">
            <summary>
            One 2D image
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Constants.TextureType.TextureCube">
            <summary>
            Six 2D images arranged in a cube-shape
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.Constants.ViewMode">
            <summary>
            Enumeration for stereoscopic view modes.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Constants.ViewMode.Mono">
            <summary>
            Monoscopic (single camera). This is the default.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Constants.ViewMode.StereoHorizontal">
            <summary>
            Stereoscopic. Frame buffer is split horizontally with the left and right camera views in their respective sides.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Constants.ViewMode.StereoVertical">
            <summary>
            Stereoscopic. Frame buffer is split vertically with the left camera view at the top and the right camera view at the bottom.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Constants.ViewMode.StereoInterlaced">
            <summary>
            Stereoscopic. Left/Right camera views are rendered into the framebuffer on alternate frames.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.Constants.Direction">
            <summary>
            Enumeration for the direction
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.Constants.Direction.Type">
            <summary>
            Enumeration for the Direction types.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Constants.Direction.Type.LeftToRight">
            <summary>
            from Left to Right
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Constants.Direction.Type.RightToLeft">
            <summary>
            from Right to Left
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.Constants.Tooltip">
            <summary>
            ToolTip
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.Constants.Tooltip.Property">
            <summary>
            The properties used for a Tooltip.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Constants.Tooltip.Property.Content">
            <summary>
            The content to display.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Constants.Tooltip.Property.Layout">
            <summary>
            The layout of the content.
            </summary>\
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Constants.Tooltip.Property.WaitTime">
            <summary>
            Time to wait in seconds before a tooltip is shown while the is movement is within the allowed threshold.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Constants.Tooltip.Property.Background">
            <summary>
            The background of the tooltip.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Constants.Tooltip.Property.Tail">
            <summary>
            The tail used by the tooltip.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Constants.Tooltip.Property.Position">
            <summary>
            The position of the tooltip in relation to the control.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Constants.Tooltip.Property.HoverPointOffset">
            <summary>
            If Tooltip::Position::HOVER_POINT is used for the POSITION, then this is the offset the tooltip is displayed at from the hover point.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Constants.Tooltip.Property.MovementThreshold">
            <summary>
            The movement threshold allowed before showing (or hiding a popup).
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Constants.Tooltip.Property.DisappearOnMovement">
            <summary>
            If true, the tooltip will disappear after hover movement beyond a certain distance.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.Constants.Tooltip.BackgroundProperty">
            <summary>
            Background Property
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Constants.Tooltip.BackgroundProperty.Visual">
            <summary>
            The image to use as the background.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Constants.Tooltip.BackgroundProperty.Border">
            <summary>
            The size of the borders in the order: left, right, bottom, top.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.Constants.Tooltip.TailProperty">
            <summary>
            The properties of the tail used by the tooltip.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Constants.Tooltip.TailProperty.Visibility">
            <summary>
            Whether to show the tail or not.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Constants.Tooltip.TailProperty.AboveVisual">
            <summary>
            The image used for the tail if it is above the tooltip.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Constants.Tooltip.TailProperty.BelowVisual">
            <summary>
            The image used for the tail if it is below the tooltip.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.DaliEventHandlerWithReturnType`3">
            <summary>
            [UnmanagedFunctionPointer(CallingConvention.StdCall)]
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.EventCallbackDelegateType0">
            <summary>
            [UnmanagedFunctionPointer(CallingConvention.StdCall)]
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.DaliEventHandler`2">
            <summary>
            [UnmanagedFunctionPointer(CallingConvention.StdCall)]
            this should be removed with EventHandler from .NET
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.EventHandlerWithReturnType`3">
            <summary>
            [UnmanagedFunctionPointer(CallingConvention.StdCall)]
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.EventThreadCallback.CallbackDelegate">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.FontDescription.disposed">
            <summary>
            A Flat to check if it is already disposed.
            </summary>
        </member>
        <member name="F:Tizen.NUI.FontMetrics.disposed">
            <summary>
            A Flat to check if it is already disposed.
            </summary>
        </member>
        <member name="T:Tizen.NUI.FrameBuffer.Attachment">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.FrameBuffer.Attachment.Mask">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.GaussianBlurView.FinishedEventArgs">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.GaussianBlurView.FinishedEventArgs.GaussianBlurView">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.GlyphInfo.disposed">
            <summary>
            A Flat to check if it is already disposed.
            </summary>
        </member>
        <member name="T:Tizen.NUI.Image.UploadedEventArgs">
             @brief Event arguments that passed via Uploaded signal
            
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Image.UploadedEventArgs.Image">
             @brief Image - is the image data that gets uploaded to GL.
            
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="E:Tizen.NUI.Image.Uploaded">
            @brief Event for Uploaded signal which can be used to subscribe/unsubscribe the event handler
            provided by the user. Uploaded signal is emitted when the image data gets uploaded to GL.
        </member>
        <member name="T:Tizen.NUI.ItemContainer.ItemContainerEnumerator">
            Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
            whenever the collection is modified. This has been done for changes in the size of the
            collection, but not when one of the elements of the collection is modified as it is a bit
            tricky to detect unmanaged code that modifies the collection under our feet.
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ItemContainer.ItemContainerEnumerator.#ctor(Tizen.NUI.ItemContainer)">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.ItemContainer.ItemContainerEnumerator.Current">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ItemContainer.ItemContainerEnumerator.MoveNext">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ItemContainer.ItemContainerEnumerator.Reset">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ItemContainer.ItemContainerEnumerator.Dispose">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ItemFactory.SwigDelegateItemFactory_0">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ItemFactory.SwigDelegateItemFactory_1">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ItemFactory.SwigDelegateItemFactory_2">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ItemIdContainer.ItemIdContainerEnumerator">
            Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
            whenever the collection is modified. This has been done for changes in the size of the
            collection, but not when one of the elements of the collection is modified as it is a bit
            tricky to detect unmanaged code that modifies the collection under our feet.
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ItemIdContainer.ItemIdContainerEnumerator.#ctor(Tizen.NUI.ItemIdContainer)">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.ItemIdContainer.ItemIdContainerEnumerator.Current">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ItemIdContainer.ItemIdContainerEnumerator.MoveNext">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ItemIdContainer.ItemIdContainerEnumerator.Reset">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ItemIdContainer.ItemIdContainerEnumerator.Dispose">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ItemView.Property">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.ItemView.Property.LAYOUT">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.ItemView.Property.MINIMUM_SWIPE_SPEED">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.ItemView.Property.MINIMUM_SWIPE_DISTANCE">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.ItemView.Property.WHEEL_SCROLL_DISTANCE_STEP">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.ItemView.Property.SNAP_TO_ITEM_ENABLED">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.ItemView.Property.REFRESH_INTERVAL">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.ItemView.Property.LAYOUT_POSITION">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.ItemView.Property.SCROLL_SPEED">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.ItemView.Property.OVERSHOOT">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.ItemView.Property.SCROLL_DIRECTION">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.ItemView.Property.LAYOUT_ORIENTATION">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.ItemView.Property.SCROLL_CONTENT_SIZE">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.KeyboardEventSignalType.swigCMemOwn">
            <summary>
            swigCMemOwn
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.KeyboardEventSignalType.disposed">
            <summary>
            A Flat to check if it is already disposed.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.KeyboardEventSignalType.Finalize">
            <summary>
            Dispose
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.KeyboardEventSignalType.Dispose">
            <summary>
            Dispose
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.KeyboardEventSignalType.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            Dispose
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.KeyboardEventSignalType.Empty">
            <summary>
            Queries whether there are any connected slots.
            </summary>
            <returns>True if there are any slots connected to the signal</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.KeyboardEventSignalType.GetConnectionCount">
            <summary>
            Queries the number of slots.
            </summary>
            <returns>The number of slots connected to this signal</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.KeyboardEventSignalType.Connect(System.Delegate)">
            <summary>
            Connects a function.
            </summary>
            <param name="func">The function to connect</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.KeyboardEventSignalType.Disconnect(System.Delegate)">
            <summary>
            Disconnects a function.
            </summary>
            <param name="func">The function to disconnect</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.KeyboardEventSignalType.Emit(Tizen.NUI.InputMethodContext,Tizen.NUI.InputMethodContext.EventData)">
            <summary>
            Emits the signal.
            </summary>
            <param name="arg1">The first value to pass to callbacks</param>
            <param name="arg2">The second value to pass to callbacks</param>
            <returns>The value returned by the last callback, or a default constructed value if no callbacks are connected</returns>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.KeyboardEventSignalType.#ctor">
            <summary>
            The contructor.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.KeyboardResizedSignalType.swigCMemOwn">
            <summary>
            KeyboardResizedSignalType
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.KeyboardResizedSignalType.disposed">
            <summary>
            A Flat to check if it is already disposed.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.KeyboardResizedSignalType.Finalize">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:Tizen.NUI.KeyboardResizedSignalType.Dispose">
            <summary>
            Dispose
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.KeyboardResizedSignalType.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            Dispose
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.KeyboardResizedSignalType.Empty">
            <summary>
            Queries whether there are any connected slots.
            </summary>
            <returns>True if there are any slots connected to the signal</returns>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.KeyboardResizedSignalType.GetConnectionCount">
            <summary>
            Queries the number of slots.
            </summary>
            <returns>The number of slots connected to this signal</returns>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.KeyboardResizedSignalType.Connect(System.Delegate)">
            <summary>
            Connects a function.
            </summary>
            <param name="func">The function to connect</param>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.KeyboardResizedSignalType.Disconnect(System.Delegate)">
            <summary>
            Disconnects a function.
            </summary>
            <param name="func">The function to disconnect</param>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.KeyboardResizedSignalType.Emit(System.Int32)">
            <summary>
            Connects a member function.
            </summary>
            <param name="arg">The member function to connect</param>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.KeyboardResizedSignalType.#ctor">
            <summary>
            The contructor.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.KeyboardTypeSignalType">
            <summary>
            KeyboardTypeSignalType
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.KeyboardTypeSignalType.swigCMemOwn">
            <summary>
            swigCMemOwn
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.KeyboardTypeSignalType.disposed">
            <summary>
            A Flat to check if it is already disposed.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.KeyboardTypeSignalType.Finalize">
            <summary>
            Dispose
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.KeyboardTypeSignalType.Dispose">
            <summary>
            Dispose
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.KeyboardTypeSignalType.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            Dispose
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.KeyboardTypeSignalType.Empty">
            <summary>
            Queries whether there are any connected slots.
            </summary>
            <returns>True if there are any slots connected to the signal</returns>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.KeyboardTypeSignalType.GetConnectionCount">
            <summary>
            Queries the number of slots.
            </summary>
            <returns>The number of slots connected to this signal</returns>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.KeyboardTypeSignalType.Connect(System.Delegate)">
            <summary>
            Connects a function.
            </summary>
            <param name="func">The function to connect</param>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.KeyboardTypeSignalType.Disconnect(System.Delegate)">
            <summary>
            Disconnects a function.
            </summary>
            <param name="func">The function to disconnect</param>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.KeyboardTypeSignalType.Emit(Tizen.NUI.InputMethodContext.KeyboardType)">
            <summary>
            Connects a member function.
            </summary>
            <param name="arg">The member function to connect</param>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.KeyboardTypeSignalType.#ctor">
            <summary>
            The contructor.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.LanguageChangedSignalType.swigCMemOwn">
            <summary>
            LanguageChangedSignalType
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.LanguageChangedSignalType.disposed">
            <summary>
            A Flat to check if it is already disposed.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.LanguageChangedSignalType.Finalize">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:Tizen.NUI.LanguageChangedSignalType.Dispose">
            <summary>
            Dispose
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.LanguageChangedSignalType.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            Dispose
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.LanguageChangedSignalType.Empty">
            <summary>
            Queries whether there are any connected slots.
            </summary>
            <returns>True if there are any slots connected to the signal</returns>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.LanguageChangedSignalType.GetConnectionCount">
            <summary>
            Queries the number of slots.
            </summary>
            <returns>The number of slots connected to this signal</returns>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.LanguageChangedSignalType.Connect(System.Delegate)">
            <summary>
            Connects a member function.
            </summary>
            <param name="func">The member function to connect</param>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.LanguageChangedSignalType.Disconnect(System.Delegate)">
            <summary>
            Disconnects a function.
            </summary>
            <param name="func">The function to disconnect</param>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.LanguageChangedSignalType.Emit(System.Int32)">
            <summary>
            Emits the signal.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.LanguageChangedSignalType.#ctor">
            <summary>
            The contructor.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.LayoutGroup">
            <summary>
            LayoutGroup class providing container functionality.
            </summary>
        </member>
        <member name="M:Tizen.NUI.LayoutGroup.RemoveAll">
            <summary>
            Remove all layout children.<br />
            </summary>
        </member>
        <member name="M:Tizen.NUI.LayoutGroup.GetChildId(Tizen.NUI.LayoutItemWrapperImpl)">
            <summary>
            Get the child layout id of the given child.<br />
            </summary>
            <param name="child">The given Layout child.</param>
        </member>
        <member name="M:Tizen.NUI.LayoutGroup.GetChildMeasureSpec(Tizen.NUI.LayoutMeasureSpec,Tizen.NUI.LayoutLength,Tizen.NUI.LayoutLength)">
            <summary>
            Calculate the right measure spec for this child.
            Does the hard part of MeasureChildren: figuring out the MeasureSpec to
            pass to a particular child. This method figures out the right MeasureSpec
            for one dimension (height or width) of one child view.<br />
            </summary>
            <param name="measureSpec">The requirements for this view.</param>
            <param name="padding">The padding of this view for the current dimension and margins, if applicable.</param>
            <param name="childDimension"> How big the child wants to be in the current dimension.</param>
            <returns>a MeasureSpec for the child.</returns>
        </member>
        <member name="M:Tizen.NUI.LayoutGroup.OnMeasure(Tizen.NUI.LayoutMeasureSpec,Tizen.NUI.LayoutMeasureSpec)">
            <summary>
            Measure the layout and its content to determine the measured width and the measured height.<br />
            If this method is overridden, it is the subclass's responsibility to make
            sure the measured height and width are at least the layout's minimum height
            and width. <br />
            </summary>
            <param name="widthMeasureSpec">horizontal space requirements as imposed by the parent.</param>
            <param name="heightMeasureSpec">vertical space requirements as imposed by the parent.</param>
        </member>
        <member name="M:Tizen.NUI.LayoutGroup.OnLayout(System.Boolean,Tizen.NUI.LayoutLength,Tizen.NUI.LayoutLength,Tizen.NUI.LayoutLength,Tizen.NUI.LayoutLength)">
            <summary>
            Called from Layout() when this layout should assign a size and position to each of its children.<br />
            Derived classes with children should override this method and call Layout() on each of their children.<br />
            </summary>
            <param name="changed">This is a new size or position for this layout.</param>
            <param name="left">Left position, relative to parent.</param>
            <param name="top"> Top position, relative to parent.</param>
            <param name="right">Right position, relative to parent.</param>
            <param name="bottom">Bottom position, relative to parent.</param>
        </member>
        <member name="M:Tizen.NUI.LayoutGroup.OnSizeChanged(Tizen.NUI.LayoutSize,Tizen.NUI.LayoutSize)">
            <summary>
            Virtual method to inform derived classes when the layout size changed.<br />
            </summary>
            <param name="newSize">The new size of the layout.</param>
            <param name="oldSize">The old size of the layout.</param>
        </member>
        <member name="M:Tizen.NUI.LayoutGroup.OnChildAdd(Tizen.NUI.LayoutItemWrapperImpl)">
            <summary>
            Callback when child is added to container.<br />
            Derived classes can use this to set their own child properties on the child layout's owner.<br />
            </summary>
            <param name="child">The Layout child.</param>
        </member>
        <member name="M:Tizen.NUI.LayoutGroup.OnChildRemove(Tizen.NUI.LayoutItemWrapperImpl)">
            <summary>
            Callback when child is removed from container.<br />
            </summary>
            <param name="child">The Layout child.</param>
        </member>
        <member name="M:Tizen.NUI.LayoutGroup.DoInitialize">
            <summary>
            Second stage initialization method for deriving classes to override.<br />
            </summary>
        </member>
        <member name="M:Tizen.NUI.LayoutGroup.DoRegisterChildProperties(System.String)">
            <summary>
            Method for derived classes to implement in order to register child property types with the container.<br />
            </summary>
            <param name="containerType">The fully qualified typename of the container.</param>
        </member>
        <member name="M:Tizen.NUI.LayoutGroup.MeasureChildren(Tizen.NUI.LayoutMeasureSpec,Tizen.NUI.LayoutMeasureSpec)">
            <summary>
            Ask all of the children of this view to measure themselves, taking into
            account both the MeasureSpec requirements for this view and its padding.<br />
            The heavy lifting is done in GetChildMeasureSpec.<br />
            </summary>
            <param name="widthMeasureSpec">The width requirements for this view.</param>
            <param name="heightMeasureSpec">The height requirements for this view.</param>
        </member>
        <member name="M:Tizen.NUI.LayoutGroup.MeasureChild(Tizen.NUI.LayoutItem,Tizen.NUI.LayoutMeasureSpec,Tizen.NUI.LayoutMeasureSpec)">
            <summary>
            Ask one of the children of this view to measure itself, taking into
            account both the MeasureSpec requirements for this view and its padding.<br />
            The heavy lifting is done in GetChildMeasureSpec.<br />
            </summary>
            <param name="child">The child to measure.</param>
            <param name="parentWidthMeasureSpec">The width requirements for this view.</param>
            <param name="parentHeightMeasureSpec">The height requirements for this view.</param>
        </member>
        <member name="M:Tizen.NUI.LayoutGroup.MeasureChildWithMargins(Tizen.NUI.LayoutItem,Tizen.NUI.LayoutMeasureSpec,Tizen.NUI.LayoutLength,Tizen.NUI.LayoutMeasureSpec,Tizen.NUI.LayoutLength)">
            <summary>
            Ask one of the children of this view to measure itself, taking into
            account both the MeasureSpec requirements for this view and its padding.<br />
            and margins. The child must have MarginLayoutParams The heavy lifting is
            done in GetChildMeasureSpec.<br />
            </summary>
            <param name="child">The child to measure.</param>
            <param name="parentWidthMeasureSpec">The width requirements for this view.</param>
            <param name="widthUsed">Extra space that has been used up by the parent horizontally (possibly by other children of the parent).</param>
            <param name="parentHeightMeasureSpec">The height requirements for this view.</param>
            <param name="heightUsed">Extra space that has been used up by the parent vertically (possibly by other children of the parent).</param>
        </member>
        <member name="T:Tizen.NUI.LayoutGroupWrapperImpl">
            <summary>
            Internal Layout class that all layout containers should derive from.
            Mirrors the native class LayoutGroup.
            </summary>
        </member>
        <member name="M:Tizen.NUI.LayoutItem.Unparent">
            <summary>
            Unparent this layout from it's owner, and remove any layout children in derived types. <br />
            </summary>
        </member>
        <member name="M:Tizen.NUI.LayoutItem.Measure(Tizen.NUI.LayoutMeasureSpec,Tizen.NUI.LayoutMeasureSpec)">
            <summary>
            This is called to find out how big a layout should be. <br />
            The parent supplies constraint information in the width and height parameters. <br />
            The actual measurement work of a layout is performed in OnMeasure called by this
            method. Therefore, only OnMeasure can and must be overridden by subclasses. <br />
            </summary>
            <param name="widthMeasureSpec"> Horizontal space requirements as imposed by the parent.</param>
            <param name="heightMeasureSpec">Vertical space requirements as imposed by the parent.</param>
        </member>
        <member name="M:Tizen.NUI.LayoutItem.Layout(Tizen.NUI.LayoutLength,Tizen.NUI.LayoutLength,Tizen.NUI.LayoutLength,Tizen.NUI.LayoutLength)">
            <summary>
            Assign a size and position to a layout and all of its descendants. <br />
            This is the second phase of the layout mechanism.  (The first is measuring). In this phase, each parent
            calls layout on all of its children to position them.  This is typically done using the child<br />
            measurements that were stored in the measure pass.<br />
            </summary>
            <param name="left">Left position, relative to parent.</param>
            <param name="top">Top position, relative to parent.</param>
            <param name="right">Right position, relative to parent.</param>
            <param name="bottom">Bottom position, relative to parent.</param>
        </member>
        <member name="M:Tizen.NUI.LayoutItem.GetDefaultSize(Tizen.NUI.LayoutLength,Tizen.NUI.LayoutMeasureSpec)">
            <summary>
            Utility to return a default size.<br />
            Uses the supplied size if the MeasureSpec imposed no constraints. Will get larger if allowed by the
            MeasureSpec.<br />
            </summary>
            <param name="size"> Default size for this layout.</param>
            <param name="measureSpec"> Constraints imposed by the parent.</param>
            <returns>The size this layout should be.</returns>
        </member>
        <member name="M:Tizen.NUI.LayoutItem.RequestLayout">
            <summary>
            Request that this layout is re-laid out.<br />
            This will make this layout and all it's parent layouts dirty.<br />
            </summary>
        </member>
        <member name="P:Tizen.NUI.LayoutItem.LayoutRequested">
            <summary>
            Predicate to determine if this layout has been requested to re-layout.<br />
            </summary>
        </member>
        <member name="M:Tizen.NUI.LayoutItem.IsLayoutRequested">
            <summary>
            Predicate to determine if this layout has been requested to re-layout.<br />
            </summary>
            <returns>True if a layout request has occured on this layout.</returns>
        </member>
        <member name="P:Tizen.NUI.LayoutItem.MeasuredWidth">
            <summary>
            Get the measured width (without any measurement flags).<br />
            This method should be used only during measurement and layout calculations.<br />
            </summary>
        </member>
        <member name="M:Tizen.NUI.LayoutItem.GetMeasuredWidth">
            <summary>
            Get the measured width (without any measurement flags).<br />
            This method should be used only during measurement and layout calculations.<br />
            </summary>
        </member>
        <member name="P:Tizen.NUI.LayoutItem.MeasuredHeight">
            <summary>
            Get the measured height (without any measurement flags).<br />
            This method should be used only during measurement and layout calculations.<br />
            </summary>
        </member>
        <member name="M:Tizen.NUI.LayoutItem.GetMeasuredHeight">
            <summary>
            Get the measured height (without any measurement flags).<br />
            This method should be used only during measurement and layout calculations.<br />
            </summary>
        </member>
        <member name="P:Tizen.NUI.LayoutItem.MeasuredWidthAndState">
            <summary>
            Get the measured width and state.<br />
            This method should be used only during measurement and layout calculations.<br />
            </summary>
        </member>
        <member name="M:Tizen.NUI.LayoutItem.GetMeasuredWidthAndState">
            <summary>
            Get the measured width and state.<br />
            This method should be used only during measurement and layout calculations.<br />
            </summary>
        </member>
        <member name="P:Tizen.NUI.LayoutItem.MeasuredHeightAndState">
            <summary>
            Get the measured height and state.<br />
            This method should be used only during measurement and layout calculations.<br />
            </summary>
        </member>
        <member name="M:Tizen.NUI.LayoutItem.GetMeasuredHeightAndState">
            <summary>
            Get the measured height and state.<br />
            This method should be used only during measurement and layout calculations.<br />
            </summary>
        </member>
        <member name="P:Tizen.NUI.LayoutItem.SuggestedMinimumWidth">
            <summary>
            Returns the suggested minimum width that the layout should use.<br />
            This returns the maximum of the layout's minimum width and the background's minimum width.<br />
            </summary>
        </member>
        <member name="M:Tizen.NUI.LayoutItem.GetSuggestedMinimumWidth">
            <summary>
            Returns the suggested minimum width that the layout should use.<br />
            This returns the maximum of the layout's minimum width and the background's minimum width.<br />
            </summary>
            <returns>The suggested minimum width of the layout.</returns>
        </member>
        <member name="P:Tizen.NUI.LayoutItem.SuggestedMinimumHeight">
            <summary>
            Returns the suggested minimum height that the layout should use.<br />
            This returns the maximum of the layout's minimum height and the background's minimum height.<br />
            </summary>
        </member>
        <member name="M:Tizen.NUI.LayoutItem.GetSuggestedMinimumHeight">
            <summary>
            Returns the suggested minimum height that the layout should use.<br />
            This returns the maximum of the layout's minimum height and the background's minimum height.<br />
            </summary>
            <returns>The suggested minimum height of the layout.</returns>
        </member>
        <member name="P:Tizen.NUI.LayoutItem.MinimumWidth">
            <summary>
            Sets the minimum width of the layout.<br />
            It is not guaranteed the layout will be able to achieve this minimum width (for example, if its parent
            layout constrains it with less available width).<br />
            </summary>
        </member>
        <member name="M:Tizen.NUI.LayoutItem.SetMinimumWidth(Tizen.NUI.LayoutLength)">
            <summary>
            Sets the minimum width of the layout.<br />
            It is not guaranteed the layout will be able to achieve this minimum width (for example, if its parent
            layout constrains it with less available width).<br />
            </summary>
            <param name="minWidth">The minimum width the layout will try to be, in pixels.</param>
        </member>
        <member name="P:Tizen.NUI.LayoutItem.MinimumHeight">
            <summary>
            Sets the minimum height of the layout.<br />
            It is not guaranteed the layout will be able to achieve this minimum height (for example, if its parent
            layout constrains it with less available height).<br />
            </summary>
        </member>
        <member name="M:Tizen.NUI.LayoutItem.SetMinimumHeight(Tizen.NUI.LayoutLength)">
            <summary>
            Sets the minimum height of the layout.<br />
            It is not guaranteed the layout will be able to achieve this minimum height (for example, if its parent
            layout constrains it with less available height).<br />
            </summary>
            <param name="minHeight">The minimum height the layout will try to be, in pixels.</param>
        </member>
        <member name="M:Tizen.NUI.LayoutItem.GetMinimumWidth">
            <summary>
            Returns the minimum width of the layout.<br />
            </summary>
            <returns>the minimum width the layout will try to be, in pixels.</returns>
        </member>
        <member name="M:Tizen.NUI.LayoutItem.GetMinimumHeight">
            <summary>
            Returns the minimum height of the layout.<br />
            </summary>
            <returns>the minimum height the layout will try to be, in pixels.</returns>
        </member>
        <member name="M:Tizen.NUI.LayoutItem.OnMeasure(Tizen.NUI.LayoutMeasureSpec,Tizen.NUI.LayoutMeasureSpec)">
            <summary>
            Measure the layout and its content to determine the measured width and the
            measured height.<br />
            The base class implementation of measure defaults to the background size,
            unless a larger size is allowed by the MeasureSpec. Subclasses should
            override to provide better measurements of their content.<br />
            If this method is overridden, it is the subclass's responsibility to make sure the
            measured height and width are at least the layout's minimum height and width.<br />
            </summary>
            <param name="widthMeasureSpec">horizontal space requirements as imposed by the parent.</param>
            <param name="heightMeasureSpec">vertical space requirements as imposed by the parent.</param>
        </member>
        <member name="M:Tizen.NUI.LayoutItem.OnLayout(System.Boolean,Tizen.NUI.LayoutLength,Tizen.NUI.LayoutLength,Tizen.NUI.LayoutLength,Tizen.NUI.LayoutLength)">
            <summary>
            Called from Layout() when this layout should assign a size and position to each of its children. <br />
            Derived classes with children should override this method and call Layout() on each of their children. <br />
            </summary>
            <param name="changed">This is a new size or position for this layout.</param>
            <param name="left">Left position, relative to parent.</param>
            <param name="top">Top position, relative to parent.</param>
            <param name="right">Right position, relative to parent.</param>
            <param name="bottom">Bottom position, relative to parent.</param>
        </member>
        <member name="M:Tizen.NUI.LayoutItem.OnSizeChanged(Tizen.NUI.LayoutSize,Tizen.NUI.LayoutSize)">
            <summary>
            Virtual method to inform derived classes when the layout size changed. <br />
            </summary>
            <param name="newSize">The new size of the layout.</param>
            <param name="oldSize">The old size of the layout.</param>
        </member>
        <member name="M:Tizen.NUI.LayoutLength.op_Addition(Tizen.NUI.LayoutLength,Tizen.NUI.LayoutLength)">
            <summary>
            The addition operator.
            </summary>
            <param name="arg1">The first value.</param>
            <param name="arg2">The second value.</param>
            <returns>The LayoutLength containing the result of the addition.</returns>
        </member>
        <member name="M:Tizen.NUI.LayoutLength.op_Addition(Tizen.NUI.LayoutLength,System.Int32)">
            <summary>
            The addition operator.
            </summary>
            <param name="arg1">The first value.</param>
            <param name="arg2">The second value.</param>
            <returns>The LayoutLength containing the result of the addition.</returns>
        </member>
        <member name="M:Tizen.NUI.LayoutLength.op_Subtraction(Tizen.NUI.LayoutLength,Tizen.NUI.LayoutLength)">
            <summary>
            The subtraction operator.
            </summary>
            <param name="arg1">The first value.</param>
            <param name="arg2">The second value.</param>
            <returns>The LayoutLength containing the result of the subtraction.</returns>
        </member>
        <member name="M:Tizen.NUI.LayoutLength.op_Subtraction(Tizen.NUI.LayoutLength,System.Int32)">
            <summary>
            The subtraction operator.
            </summary>
            <param name="arg1">The first value.</param>
            <param name="arg2">The second value.</param>
            <returns>The LayoutLength containing the result of the subtraction.</returns>
        </member>
        <member name="M:Tizen.NUI.LayoutLength.op_Multiply(Tizen.NUI.LayoutLength,Tizen.NUI.LayoutLength)">
            <summary>
            The multiplication operator.
            </summary>
            <param name="arg1">The first value.</param>
            <param name="arg2">The second value.</param>
            <returns>The LayoutLength containing the result of the multiplication.</returns>
        </member>
        <member name="M:Tizen.NUI.LayoutLength.op_Multiply(Tizen.NUI.LayoutLength,System.Int32)">
            <summary>
            Th multiplication operator.
            </summary>
            <param name="arg1">The first value.</param>
            <param name="arg2">The int value to scale the LayoutLength.</param>
            <returns>The LayoutLength containing the result of the scaling.</returns>
        </member>
        <member name="M:Tizen.NUI.LayoutLength.op_Division(Tizen.NUI.LayoutLength,Tizen.NUI.LayoutLength)">
            <summary>
            The division operator.
            </summary>
            <param name="arg1">The first value.</param>
            <param name="arg2">The second value.</param>
            <returns>The LayoutLength containing the result of the division.</returns>
        </member>
        <member name="M:Tizen.NUI.LayoutLength.op_Division(Tizen.NUI.LayoutLength,System.Int32)">
            <summary>
            Th division operator.
            </summary>
            <param name="arg1">The first value.</param>
            <param name="arg2">The int value to scale the vector by.</param>
            <returns>The LayoutLength containing the result of the scaling.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Tizen.NUI.LayoutMeasureSpec.ModeType.EXACTLY" -->
        <member name="F:Tizen.NUI.LayoutMeasureSpec.ModeType.AT_MOST">
            This is used by a parent to impose an exact size on the child. The child must use
                                         this size, and guarantee that all of its descendants will fit within this size. 
        </member>
        <member name="F:Tizen.NUI.MeasuredSize.disposed">
            <summary>
            A Flat to check if it is already disposed.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.MeasuredSize.Finalize">
            <summary>
            Dispose.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.MeasuredSize.Dispose">
            <summary>
            Dispose.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.MeasuredSize.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            Dispose.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.LinearConstrainer.Property">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.LinearConstrainer.Property.swigCMemOwn">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.LinearConstrainer.Property.disposed">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.LinearConstrainer.Property.Dispose">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.LinearConstrainer.Property.Dispose(Tizen.NUI.DisposeTypes)">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.LongPressGestureDetector.DetectedEventArgs">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.LongPressGestureDetector.DetectedEventArgs.View">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.LongPressGestureDetector.DetectedEventArgs.LongPressGesture">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.LowBatterySignalType">
            <summary>
            LowBatterySignalType.
            </summary>
        </member>
        <member name="F:Tizen.NUI.LowBatterySignalType.swigCMemOwn">
            <summary>
            swigCMemOwn.
            </summary>
        </member>
        <member name="F:Tizen.NUI.LowBatterySignalType.disposed">
            <summary>
            A Flat to check if it is already disposed.
            </summary>
        </member>
        <member name="M:Tizen.NUI.LowBatterySignalType.Finalize">
            <summary>
            Distructor.
            </summary>
        </member>
        <member name="M:Tizen.NUI.LowBatterySignalType.Dispose">
            <summary>
            Dispose.
            </summary>
        </member>
        <member name="M:Tizen.NUI.LowBatterySignalType.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            you can override it to clean-up your own resources.
            </summary>
            <param name="type">DisposeTypes</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.LowBatterySignalType.Empty">
            <summary>
            Empty 
            </summary>
            <returns>true if there is no signal attached</returns>
        </member>
        <member name="M:Tizen.NUI.LowBatterySignalType.GetConnectionCount">
            <summary>
            GetConnectionCount
            </summary>
            <returns>number of attached signals</returns>
        </member>
        <member name="M:Tizen.NUI.LowBatterySignalType.Connect(System.Delegate)">
            <summary>
            signal connect
            </summary>
            <param name="func"></param>
        </member>
        <member name="M:Tizen.NUI.LowBatterySignalType.Disconnect(System.Delegate)">
            <summary>
            signal disconnect
            </summary>
            <param name="func"></param>
        </member>
        <member name="M:Tizen.NUI.LowBatterySignalType.#ctor">
            <summary>
            LowBatterySignalType
            </summary>
        </member>
        <member name="T:Tizen.NUI.Model3dView.Property">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Model3dView.Property.swigCMemOwn">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Model3dView.Property.disposed">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Model3dView.Property.Dispose">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Model3dView.Property.Dispose(Tizen.NUI.DisposeTypes)">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Model3dView.Property.#ctor">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Model3dView.Property.GEOMETRY_URL">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Model3dView.Property.MATERIAL_URL">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Model3dView.Property.IMAGES_URL">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Model3dView.Property.ILLUMINATION_TYPE">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Model3dView.Property.TEXTURE0_URL">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Model3dView.Property.TEXTURE1_URL">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Model3dView.Property.TEXTURE2_URL">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Model3dView.Property.LIGHT_POSITION">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.Model3dView.IluminationTypeEnum">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.NDalicPINVOKE.SWIGExceptionHelper.ExceptionDelegate">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.NDalicPINVOKE.SWIGExceptionHelper.ExceptionArgumentDelegate">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.NDalicPINVOKE.SWIGPendingException">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.NDalicPINVOKE.SWIGPendingException.Pending">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.NDalicPINVOKE.SWIGPendingException.Set(System.Exception)">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.NDalicPINVOKE.SWIGPendingException.Retrieve">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.NDalicPINVOKE.SWIGStringHelper.SWIGStringDelegate">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.NUICoreBackend._application">
            <summary>
            The Application instance to connect event.
            </summary>
        </member>
        <member name="F:Tizen.NUI.NUICoreBackend.Handlers">
            <summary>
            The Dictionary to contain each type of event callback.
            </summary>
        </member>
        <member name="M:Tizen.NUI.NUICoreBackend.#ctor">
            <summary>
            The default Constructor.
            </summary>
        </member>
        <member name="M:Tizen.NUI.NUICoreBackend.#ctor(System.String)">
            <summary>
            The constructor with stylesheet.
            </summary>
        </member>
        <member name="M:Tizen.NUI.NUICoreBackend.#ctor(System.String,Tizen.NUI.NUIApplication.WindowMode)">
            <summary>
            The constructor with stylesheet and window mode.
            </summary>
        </member>
        <member name="M:Tizen.NUI.NUICoreBackend.AddEventHandler(Tizen.Applications.CoreBackend.EventType,System.Action)">
            <summary>
            Adds NUIApplication event to Application.
            Puts each type of event callback in Dictionary.
            </summary>
            <param name="evType">The type of event.</param>
            <param name="handler">The event callback.</param>
        </member>
        <member name="M:Tizen.NUI.NUICoreBackend.AddEventHandler``1(Tizen.Applications.CoreBackend.EventType,System.Action{``0})">
            <summary>
            Adds NUIApplication event to Application.
            Puts each type of event callback in Dictionary.
            </summary>
            <typeparam name="TEventArgs">The argument type for the event.</typeparam>
            <param name="evType">The type of event.</param>
            <param name="handler">The event callback.</param>
        </member>
        <member name="M:Tizen.NUI.NUICoreBackend.Dispose">
            <summary>
            The Dispose function.
            </summary>
        </member>
        <member name="M:Tizen.NUI.NUICoreBackend.Exit">
            <summary>
            The Exit application.
            </summary>
        </member>
        <member name="M:Tizen.NUI.NUICoreBackend.AddIdle(System.Delegate)">
            <summary>
            Ensures that the function passed in is called from the main loop when it is idle.
            </summary>
            <param name="func">The function to call</param>
            <returns>true if added successfully, false otherwise</returns>
        </member>
        <member name="M:Tizen.NUI.NUICoreBackend.Run(System.String[])">
            <summary>
            The Run application.
            </summary>
            <param name="args">The arguments from commandline.</param>
        </member>
        <member name="M:Tizen.NUI.NUICoreBackend.OnRegionChanged(System.Object,Tizen.NUI.NUIApplicationRegionChangedEventArgs)">
            <summary>
            The Region changed event callback function.
            </summary>
            <param name="source">The application instance.</param>
            <param name="e">The event argument for RegionChanged.</param>
        </member>
        <member name="M:Tizen.NUI.NUICoreBackend.OnMemoryLow(System.Object,Tizen.NUI.NUIApplicationMemoryLowEventArgs)">
            <summary>
            The Memory Low event callback function.
            </summary>
            <param name="source">The application instance.</param>
            <param name="e">The event argument for MemoryLow.</param>
        </member>
        <member name="M:Tizen.NUI.NUICoreBackend.OnLanguageChanged(System.Object,Tizen.NUI.NUIApplicationLanguageChangedEventArgs)">
            <summary>
            The Language changed event callback function.
            </summary>
            <param name="source">The application instance.</param>
            <param name="e">The event argument for LanguageChanged.</param>
        </member>
        <member name="M:Tizen.NUI.NUICoreBackend.OnBatteryLow(System.Object,Tizen.NUI.NUIApplicationBatteryLowEventArgs)">
            <summary>
            The Battery Low event callback function.
            </summary>
            <param name="source">The application instance.</param>
            <param name="e">The event argument for BatteryLow.</param>
        </member>
        <member name="M:Tizen.NUI.NUICoreBackend.OnInitialized(System.Object,Tizen.NUI.NUIApplicationInitEventArgs)">
            <summary>
            The Initialized event callback function.
            </summary>
            <param name="source">The application instance.</param>
            <param name="e">The event argument for Initialized.</param>
        </member>
        <member name="M:Tizen.NUI.NUICoreBackend.OnTerminated(System.Object,Tizen.NUI.NUIApplicationTerminatingEventArgs)">
            <summary>
            The Terminated event callback function.
            </summary>
            <param name="source">The application instance.</param>
            <param name="e">The event argument for Terminated.</param>
        </member>
        <member name="M:Tizen.NUI.NUICoreBackend.OnResumed(System.Object,Tizen.NUI.NUIApplicationResumedEventArgs)">
            <summary>
            The Resumed event callback function.
            </summary>
            <param name="source">The application instance.</param>
            <param name="e">The event argument for Resumed.</param>
        </member>
        <member name="M:Tizen.NUI.NUICoreBackend.OnAppControl(System.Object,Tizen.NUI.NUIApplicationAppControlEventArgs)">
            <summary>
            The App control event callback function.
            </summary>
            <param name="source">The application instance.</param>
            <param name="e">The event argument for AppControl.</param>
        </member>
        <member name="M:Tizen.NUI.NUICoreBackend.OnPaused(System.Object,Tizen.NUI.NUIApplicationPausedEventArgs)">
            <summary>
            The Paused event callback function.
            </summary>
            <param name="source">The application instance.</param>
            <param name="e">The event argument for Paused.</param>
        </member>
        <member name="T:Tizen.NUI.NUIEventType">
            <summary>
            Class that represents the type of NUI event for backends. This class can be converted from string type.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.NUIEventType.#ctor(System.String)">
            <summary>
            Initializes the EventType class.
            </summary>
            <param name="name">The name of event type.</param>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.NUIEventType.TimeTick">
            <summary>
            Pre-defined event type. "TimeTick"
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.NUIEventType.AmbientTick">
            <summary>
            Pre-defined event type. "AmbientTick"
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.NUIEventType.AmbientChanged">
            <summary>
            Pre-defined event type. "AmbientChanged"
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.NUIEventType.op_Implicit(System.String)~Tizen.NUI.NUIEventType">
            <summary>
            Converts a string to NUIEventType instance.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.NUIWidgetCoreBackend._application">
            <summary>
            Application instance to connect event.
            </summary>
        </member>
        <member name="F:Tizen.NUI.NUIWidgetCoreBackend.Handlers">
            <summary>
            Dictionary to contain each type of event callback.
            </summary>
        </member>
        <member name="M:Tizen.NUI.NUIWidgetCoreBackend.#ctor">
            <summary>
            The default Constructor.
            </summary>
        </member>
        <member name="M:Tizen.NUI.NUIWidgetCoreBackend.#ctor(System.String)">
            <summary>
            The constructor with stylesheet.
            </summary>
        </member>
        <member name="M:Tizen.NUI.NUIWidgetCoreBackend.AddEventHandler(Tizen.Applications.CoreBackend.EventType,System.Action)">
            <summary>
            Add NUIWidgetApplication event to Application.
            Put each type of event callback in Dictionary.
            </summary>
            <param name="evType">Type of event</param>
            <param name="handler">Event callback</param>
        </member>
        <member name="M:Tizen.NUI.NUIWidgetCoreBackend.AddEventHandler``1(Tizen.Applications.CoreBackend.EventType,System.Action{``0})">
            <summary>
            Add NUIWidgetApplication event to Application.
            Put each type of event callback in Dictionary.
            </summary>
            <typeparam name="TEventArgs">Argument type for the event</typeparam>
            <param name="evType">Type of event</param>
            <param name="handler">Event callback</param>
        </member>
        <member name="M:Tizen.NUI.NUIWidgetCoreBackend.Dispose">
            <summary>
            Dispose function.
            </summary>
        </member>
        <member name="M:Tizen.NUI.NUIWidgetCoreBackend.Exit">
            <summary>
            Exit Application.
            </summary>
        </member>
        <member name="M:Tizen.NUI.NUIWidgetCoreBackend.Run(System.String[])">
            <summary>
            Run Application.
            </summary>
            <param name="args">Arguments from commandline.</param>
        </member>
        <member name="M:Tizen.NUI.NUIWidgetCoreBackend.OnInitialized(System.Object,Tizen.NUI.NUIApplicationInitEventArgs)">
            <summary>
            The Initialized event callback function.
            </summary>
            <param name="source">The application instance.</param>
            <param name="e">The event argument for Initialized.</param>
        </member>
        <member name="M:Tizen.NUI.NUIWidgetCoreBackend.OnTerminated(System.Object,Tizen.NUI.NUIApplicationTerminatingEventArgs)">
            <summary>
            The Terminated event callback function.
            </summary>
            <param name="source">The application instance.</param>
            <param name="e">The event argument for Terminated.</param>
        </member>
        <member name="M:Tizen.NUI.NUIWidgetCoreBackend.OnRegionChanged(System.Object,Tizen.NUI.NUIApplicationRegionChangedEventArgs)">
            <summary>
            The Region changed event callback function.
            </summary>
            <param name="source">The application instance.</param>
            <param name="e">The event argument for RegionChanged.</param>
        </member>
        <member name="M:Tizen.NUI.NUIWidgetCoreBackend.OnLanguageChanged(System.Object,Tizen.NUI.NUIApplicationLanguageChangedEventArgs)">
            <summary>
            The Language changed event callback function.
            </summary>
            <param name="source">The application instance.</param>
            <param name="e">The event argument for LanguageChanged.</param>
        </member>
        <member name="M:Tizen.NUI.NUIWidgetCoreBackend.OnMemoryLow(System.Object,Tizen.NUI.NUIApplicationMemoryLowEventArgs)">
            <summary>
            The Memory Low event callback function.
            </summary>
            <param name="source">The application instance.</param>
            <param name="e">The event argument for MemoryLow.</param>
        </member>
        <member name="M:Tizen.NUI.NUIWidgetCoreBackend.OnBatteryLow(System.Object,Tizen.NUI.NUIApplicationBatteryLowEventArgs)">
            <summary>
            The Battery Low event callback function.
            </summary>
            <param name="source">The application instance.</param>
            <param name="e">The event argument for BatteryLow.</param>
        </member>
        <member name="T:Tizen.NUI.Object">
            <summary>
            Static Helper class for Property
            Internal
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ObjectRegistry.ObjectCreatedEventArgs">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.ObjectRegistry.ObjectCreatedEventArgs.BaseHandle">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ObjectRegistry.ObjectDestroyedEventArgs">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.ObjectRegistry.ObjectDestroyedEventArgs.RefObject">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.PageTurnView.PagePanStartedEventArgs">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.PageTurnView.PagePanStartedEventArgs.PageTurnView">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.PageTurnView.PagePanFinishedEventArgs">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.PageTurnView.PagePanFinishedEventArgs.PageTurnView">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.PageTurnView.PageTurnStartedEventArgs">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.PageTurnView.PageTurnStartedEventArgs.PageTurnView">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.PageTurnView.PageTurnStartedEventArgs.PageIndex">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.PageTurnView.PageTurnStartedEventArgs.IsTurningForward">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.PageTurnView.PageTurnFinishedEventArgs">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.PageTurnView.PageTurnFinishedEventArgs.PageTurnView">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.PageTurnView.PageTurnFinishedEventArgs.PageIndex">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.PageTurnView.PageTurnFinishedEventArgs.IsTurningForward">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.PageTurnView.Property">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.PageTurnView.Property.swigCMemOwn">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.PageTurnView.Property.disposed">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PageTurnView.Property.Dispose">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PageTurnView.Property.Dispose(Tizen.NUI.DisposeTypes)">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PageTurnView.Property.#ctor">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.PageTurnView.Property.PAGE_SIZE">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.PageTurnView.Property.CURRENT_PAGE_ID">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.PageTurnView.Property.SPINE_SHADOW">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.PanGestureDetector.DetectedEventArgs">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.PanGestureDetector.DetectedEventArgs.View">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.PanGestureDetector.DetectedEventArgs.PanGesture">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.PanGestureDetector.Property">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.PanGestureDetector.Property.swigCMemOwn">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.PanGestureDetector.Property.disposed">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PanGestureDetector.Property.Dispose">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PanGestureDetector.Property.Dispose(Tizen.NUI.DisposeTypes)">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PanGestureDetector.Property.#ctor">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.PanGestureDetector.Property.SCREEN_POSITION">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.PanGestureDetector.Property.SCREEN_DISPLACEMENT">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.PanGestureDetector.Property.SCREEN_VELOCITY">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.PanGestureDetector.Property.LOCAL_POSITION">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.PanGestureDetector.Property.LOCAL_DISPLACEMENT">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.PanGestureDetector.Property.LOCAL_VELOCITY">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.PanGestureDetector.Property.PANNING">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.PathConstrainer.Property">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.PathConstrainer.Property.swigCMemOwn">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.PathConstrainer.Property.disposed">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PathConstrainer.Property.Dispose">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PathConstrainer.Property.Dispose(Tizen.NUI.DisposeTypes)">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PathConstrainer.Property.#ctor">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.PinchGestureDetector.DetectedEventArgs">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.PinchGestureDetector.DetectedEventArgs.View">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.PinchGestureDetector.DetectedEventArgs.PinchGesture">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PropertyHelper.GetPropertyFromString(Tizen.NUI.Animatable,System.String)">
            <summary>
             Returns a Property if stringProperty is a valid index
            </summary>
        </member>
        <member name="T:Tizen.NUI.PropertyRangeManager">
            <summary>
            The helper class for calculating what property indexes should be assigned to the C# View (view) classes.
            </summary>
        </member>
        <member name="M:Tizen.NUI.PropertyRangeManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tizen.NUI.PropertyRangeManager"/> class.
            </summary>
        </member>
        <member name="M:Tizen.NUI.PropertyRangeManager.RegisterView(System.String,System.Type)">
            <summary>
            Only called if a view has scriptable properties.
            </summary>
        </member>
        <member name="M:Tizen.NUI.PropertyRangeManager.GetPropertyIndex(System.String,System.Type,Tizen.NUI.ScriptableProperty.ScriptableType)">
            <summary>
            Gets the index of the property.
            Each property has to have unique index for this view type.
            </summary>
            <returns>The property index.</returns>
            <param name="viewName">The view name.</param>
            <param name="viewType">The view type.</param>
            <param name="type">Type.</param>
        </member>
        <member name="M:Tizen.NUI.PropertyRangeManager.GetPropertyStartRange(System.Type,Tizen.NUI.PropertyRangeManager.PropertyRange@)">
            <summary>
             We calculate the start property indices, based on the type and it's class hierarchy, for example, DateView (70,000)- > Spin (60,000) -> View (50,000).
             </summary>
        </member>
        <member name="T:Tizen.NUI.PropertyRangeManager.PropertyRange">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PropertyRangeManager.PropertyRange.GetNextFreePropertyIndex(Tizen.NUI.ScriptableProperty.ScriptableType)">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.PropertyRangeManager.PropertyRange.startEventIndex">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.PropertyRangeManager.PropertyRange.lastUsedEventIndex">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.PropertyRangeManager.PropertyRange.startAnimationIndex">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.PropertyRangeManager.PropertyRange.lastUsedAnimationIndex">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.Registry">
             <summary>
             This is used to store a mapping between C++ base handle objects and it's C# instances.
            
             </summary>
        </member>
        <member name="P:Tizen.NUI.Registry.Instance">
            <summary>
            static initialization singleton
            </summary>
        </member>
        <member name="F:Tizen.NUI.Registry._controlMap">
            <summary>
            Given a C++ object, the dictionary allows us to find which C# object it belongs to.
            By keeping the weak reference only, it will allow the object to be garbage collected.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Registry.Register(Tizen.NUI.BaseHandle)">
            <summary>
            Stores the mapping between this instance of BaseHandle (C# base class) and native part.
            </summary>
            <param name="baseHandle">The instance of BaseHandle (C# base class).</param>
        </member>
        <member name="M:Tizen.NUI.Registry.Unregister(Tizen.NUI.BaseHandle)">
            <summary>
            Removes this instance of BaseHandle (C# base class) and native part from the mapping table.
            </summary>
            <param name="baseHandle"> The instance of BaseHandle (C# base class)</param>
        </member>
        <member name="T:Tizen.NUI.RenderTask.Property">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.RenderTask.Property.swigCMemOwn">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.RenderTask.Property.disposed">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.RenderTask.Property.Dispose">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.RenderTask.Property.Dispose(Tizen.NUI.DisposeTypes)">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.RenderTask.Property.#ctor">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.RenderTask.Property.VIEWPORT_POSITION">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.RenderTask.Property.VIEWPORT_SIZE">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.RenderTask.Property.CLEAR_COLOR">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.RenderTask.Property.REQUIRES_SYNC">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.RenderTask.RefreshRate">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.Ruler.RulerType">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.SignalObserver.swigCMemOwn">
            <summary>
            swigCMemOwn
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.SignalObserver.disposed">
            <summary>
            A Flat to check if it is already disposed.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.SignalObserver.Finalize">
            <summary>
            Dispose
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.SignalObserver.Dispose">
            <summary>
            Dispose
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.SignalObserver.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            Dispose
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.SignalObserver.SignalDisconnected(Tizen.NUI.SlotObserver,Tizen.NUI.SWIGTYPE_p_Dali__CallbackBase)">
            <summary>
            This method is called when the signal is disconnecting.
            </summary>
            <param name="slotObserver">The signal that has disconnected</param>
            <param name="callback">The callback attached to the signal disconnected</param>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.Size">
            <summary>
            A three-dimensional size.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Size.swigCMemOwn">
            <summary>swigCMemOwn.</summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Size.disposed">
            <summary>
            A Flat to check if it is already disposed.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Size.Finalize">
            <summary>
            Dispose.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Size.Dispose">
            <summary>
            Dispose.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Size.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            Dispose.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Size.op_Addition(Tizen.NUI.Size,Tizen.NUI.Size)">
            <summary>
            The addition operator for A+B.
            </summary>
            <param name="arg1">Size to assign A.</param>
            <param name="arg2">Size to assign B.</param>
            <returns>A size containing the result of the addition.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Size.op_Subtraction(Tizen.NUI.Size,Tizen.NUI.Size)">
            <summary>
            The subtraction operator for A-B.
            </summary>
            <param name="arg1">Size to subtract A.</param>
            <param name="arg2">Size to subtract B.</param>
            <returns>The size containing the result of the subtraction.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Size.op_UnaryNegation(Tizen.NUI.Size)">
            <summary>
            The unary negation operator.
            </summary>
            <param name="arg1">Size for unary negation.</param>
            <returns>A size containing the negation.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Size.op_Multiply(Tizen.NUI.Size,Tizen.NUI.Size)">
            <summary>
            The multiplication operator.
            </summary>
            <param name="arg1">Size for multiplication.</param>
            <param name="arg2">The size to multiply.</param>
            <returns>A size containing the result of the multiplication.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Size.op_Multiply(Tizen.NUI.Size,System.Single)">
            <summary>
            The multiplication operator.
            </summary>
            <param name="arg1">Size for multiplication.</param>
            <param name="arg2">The float value to scale the size.</param>
            <returns>A size containing the result of the scaling.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Size.op_Division(Tizen.NUI.Size,Tizen.NUI.Size)">
            <summary>
            The division operator.
            </summary>
            <param name="arg1">Size for division.</param>
            <param name="arg2">The size to divide.</param>
            <returns>A size containing the result of the division.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Size.op_Division(Tizen.NUI.Size,System.Single)">
            <summary>
            The division operator.
            </summary>
            <param name="arg1">Size for division.</param>
            <param name="arg2">The float value to scale the size by.</param>
            <returns>A Size containing the result of the scaling.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Size.Item(System.UInt32)">
            <summary>
            The array subscript operator.
            </summary>
            <param name="index">Subscript index.</param>
            <returns>The float at the given index.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Size.#ctor">
            <summary>
            The constructor.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Size.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            The constructor.
            </summary>
            <param name="x">The x (or width) component.</param>
            <param name="y">The y (or height) component.</param>
            <param name="z">The z (or depth) component.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Size.#ctor(Tizen.NUI.Size2D)">
            <summary>
            The constructor.
            </summary>
            <param name="size2d">Size2D with x (width) and y (height).</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Size.Zero">
            <summary>
            The Zero constant, (0.0f, 0.0f, 0.0f).
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Size.EqualTo(Tizen.NUI.Size)">
            <summary>
            Checks equality.<br />
            Utilizes appropriate machine epsilon values.<br />
            </summary>
            <param name="rhs">The size to test against.</param>
            <returns>True if the sizes are equal.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Size.NotEqualTo(Tizen.NUI.Size)">
            <summary>
            Checks inequality.<br />
            Utilizes appropriate machine epsilon values.<br />
            </summary>
            <param name="rhs">The size to test against.</param>
            <returns>True if the sizes are not equal.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Size.Width">
            <summary>
            The Width property for the width component of size
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Size.Height">
            <summary>
            The Height property for the height component of size.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Size.Depth">
            <summary>
            The Depth property for the depth component of size.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Size.op_Implicit(Tizen.NUI.Size)~Tizen.NUI.Vector3">
            <summary>
            The type cast operator, Size to Vector3.
            </summary>
            <param name="size">The object of size type.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Size.op_Implicit(Tizen.NUI.Vector3)~Tizen.NUI.Size">
            <summary>
            The type cast operator, Vector3 to Size type.
            </summary>
            <param name="vec">The object of Vector3 type.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.SlotObserver.swigCMemOwn">
            <summary>swigCMemOwn.</summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.SlotObserver.disposed">
            <summary>
            A Flat to check if it is already disposed.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.SlotObserver.Finalize">
            <summary>
            Dispose.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.SlotObserver.Dispose">
            <summary>
            Dispose.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.SlotObserver.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            Dispose.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.SlotObserver.SlotDisconnected(Tizen.NUI.SWIGTYPE_p_Dali__CallbackBase)">
            <summary>
            This method is called when the slot is disconnecting.
            </summary>
            <param name="callback">The callback attached to the signal disconnected.</param>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.StatusSignalType.swigCMemOwn">
            <summary>
            swigCMemOwn
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.StatusSignalType.disposed">
            <summary>
            A Flat to check if it is already disposed.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.StatusSignalType.Finalize">
            <summary>
            Dispose
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.StatusSignalType.Dispose">
            <summary>
            Dispose
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.StatusSignalType.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            Dispose
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.StatusSignalType.Empty">
            <summary>
            Queries whether there are any connected slots.
            </summary>
            <returns>True if there are any slots connected to the signal</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.StatusSignalType.GetConnectionCount">
            <summary>
            Queries the number of slots.
            </summary>
            <returns>The number of slots connected to this signal</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.StatusSignalType.Connect(System.Delegate)">
            <summary>
            Connects a function.
            </summary>
            <param name="func">The function to connect</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.StatusSignalType.Disconnect(System.Delegate)">
            <summary>
            Disconnects a function.
            </summary>
            <param name="func">The function to disconnect</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.StatusSignalType.Emit(System.Boolean)">
            <summary>
            Connects a member function.
            </summary>
            <param name="arg">The member function to connect</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.StatusSignalType.#ctor">
            <summary>
            The constructor.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.SWIGTYPE_p_bundle">
            <summary>
            This should be internal, please do not use.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.SWIGTYPE_p_bundle.#ctor">
            <summary>
            The Constructor.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.SWIGTYPE_p_CallbackBase.#ctor">
            <summary>
            The Constructor.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.SWIGTYPE_p_Dali__CallbackBase.#ctor">
            <summary>
            The Constructor.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.SWIGTYPE_p_Dali__FunctorDelegate.#ctor">
            <summary>
            The Constructor.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.TapGestureDetector.DetectedEventArgs">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.TapGestureDetector.DetectedEventArgs.View">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.TapGestureDetector.DetectedEventArgs.TapGesture">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.TouchPoint.StateType">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.TouchPointContainer.TouchPointContainerEnumerator">
            Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
            whenever the collection is modified. This has been done for changes in the size of the
            collection, but not when one of the elements of the collection is modified as it is a bit
            tricky to detect unmanaged code that modifies the collection under our feet.
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.TouchPointContainer.TouchPointContainerEnumerator.#ctor(Tizen.NUI.TouchPointContainer)">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.TouchPointContainer.TouchPointContainerEnumerator.Current">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.TouchPointContainer.TouchPointContainerEnumerator.MoveNext">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.TouchPointContainer.TouchPointContainerEnumerator.Reset">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.TouchPointContainer.TouchPointContainerEnumerator.Dispose">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.Type">
            <summary>
            An enum of Device Class types.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Type.NONE">
            <summary>
            Not a device.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Type.USER">
            <summary>
            The user/seat (the user themselves).
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Type.KEYBOARD">
            <summary>
            A regular keyboard, numberpad or attached buttons.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Type.MOUSE">
            <summary>
            A mouse, trackball or touchpad relative motion device.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Type.TOUCH">
            <summary>
            A touchscreen with fingers or stylus.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Type.PEN">
            <summary>
            A special pen device.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Type.POINTER">
            <summary>
            A pointing device based on laser, infrared or similar technology.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Type.GAMEPAD">
            <summary>
            A gamepad controller or joystick.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.Uint16Pair">
            <summary>
            Simple class for passing around pairs of small unsigned integers.<br />
            Use this for integer dimensions and points with limited range such as image
            sizes and pixel coordinates where a pair of floating point numbers is
            inefficient and illogical (i.e.the data is inherently integer).<br />
            One of these can be passed in a single 32 bit integer register on
            common architectures.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Uint16Pair.swigCMemOwn">
            <summary>swigCMemOwn.</summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Uint16Pair.disposed">
            <summary>
            A Flat to check if it is already disposed.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Uint16Pair.Finalize">
            <summary>
            Dispose.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Uint16Pair.Dispose">
            <summary>
            Dispose.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Uint16Pair.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            Dispose.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Uint16Pair.op_LessThan(Tizen.NUI.Uint16Pair,Tizen.NUI.Uint16Pair)">
            <summary>
            Less than comparison operator for storing in collections (not geometrically meaningful).
            </summary>
            <param name="arg1">A reference for comparison.</param>
            <param name="arg2">A reference for comparison</param>
            <return>True if arg1 less than arg2</return>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Uint16Pair.op_GreaterThan(Tizen.NUI.Uint16Pair,Tizen.NUI.Uint16Pair)">
            <summary>
            More than comparison operator for storing in collections (not geometrically meaningful).
            </summary>
            <param name="arg1">A reference for comparison.</param>
            <param name="arg2">A reference for comparison</param>
            <return>True if arg1 > arg2</return>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Uint16Pair.#ctor">
            <summary>
            Default constructor for the(0, 0) tuple.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Uint16Pair.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Default constructor for the(0, 0) tuple.
            </summary>
            <param name="width">The width or X dimension of the tuple. Make sure it is less than 65536.</param>
            <param name="height">The height or Y dimension of the tuple.Make sure it is less than 65536.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Uint16Pair.#ctor(Tizen.NUI.Uint16Pair)">
            <summary>
            Constructor taking separate x and y (width and height) parameters.
            </summary>
            <param name="rhs">A reference to assign.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Uint16Pair.SetWidth(System.UInt16)">
            <summary>
            Sets the width.
            </summary>
            <param name="width">The x dimension to be stored in this 2-tuple.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Uint16Pair.GetWidth">
            <summary>
            Get the width.
            </summary>
            <return>
            The x dimension stored in this 2-tuple.
            </return>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Uint16Pair.SetHeight(System.UInt16)">
            <summary>
            Sets the height.
            </summary>
            <param name="height">The y dimension to be stored in this 2-tuple.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Uint16Pair.GetHeight">
            <summary>
            Get the height.
            </summary>
            <return>
            The y dimension stored in this 2-tuple.
            </return>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Uint16Pair.SetX(System.UInt16)">
            <summary>
            Sets the x dimension.
            </summary>
            <param name="x">The x dimension to be stored in this 2-tuple.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Uint16Pair.GetX">
            <summary>
            Get the x dimension.
            </summary>
            <return>
            The x dimension stored in this 2-tuple.
            </return>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Uint16Pair.SetY(System.UInt16)">
            <summary>
            Sets the y dimension.
            </summary>
            <param name="y">The y dimension to be stored in this 2-tuple.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Uint16Pair.GetY">
            <summary>
            Get the y dimension.
            </summary>
            <return>
            The y dimension stored in this 2-tuple.
            </return>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Uint16Pair.Assign(Tizen.NUI.Uint16Pair)">
            <summary>
            Constructor taking separate x and y (width and height) parameters.
            </summary>
            <param name="rhs">A reference to assign.</param>
            <return>The created object.</return>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.VectorBlob.disposed">
            <summary>
            A Flat to check if it is already disposed.
            </summary>
        </member>
        <member name="T:Tizen.NUI.ViewImpl.SwigDelegateViewImpl_0">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ViewImpl.SwigDelegateViewImpl_1">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ViewImpl.SwigDelegateViewImpl_2">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ViewImpl.SwigDelegateViewImpl_3">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ViewImpl.SwigDelegateViewImpl_4">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ViewImpl.SwigDelegateViewImpl_5">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ViewImpl.SwigDelegateViewImpl_6">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ViewImpl.SwigDelegateViewImpl_7">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ViewImpl.SwigDelegateViewImpl_8">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ViewImpl.SwigDelegateViewImpl_9">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ViewImpl.SwigDelegateViewImpl_10">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ViewImpl.SwigDelegateViewImpl_11">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ViewImpl.SwigDelegateViewImpl_12">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ViewImpl.SwigDelegateViewImpl_13">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ViewImpl.SwigDelegateViewImpl_14">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ViewImpl.SwigDelegateViewImpl_15">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ViewImpl.SwigDelegateViewImpl_16">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ViewImpl.SwigDelegateViewImpl_17">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ViewImpl.SwigDelegateViewImpl_18">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ViewImpl.SwigDelegateViewImpl_19">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ViewImpl.SwigDelegateViewImpl_20">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ViewImpl.SwigDelegateViewImpl_21">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ViewImpl.SwigDelegateViewImpl_22">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ViewImpl.SwigDelegateViewImpl_23">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ViewImpl.SwigDelegateViewImpl_24">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ViewImpl.SwigDelegateViewImpl_25">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ViewImpl.SwigDelegateViewImpl_26">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ViewImpl.SwigDelegateViewImpl_27">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ViewImpl.SwigDelegateViewImpl_28">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ViewImpl.SwigDelegateViewImpl_29">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ViewImpl.SwigDelegateViewImpl_30">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ViewImpl.SwigDelegateViewImpl_31">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ViewImpl.SwigDelegateViewImpl_32">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ViewImpl.SwigDelegateViewImpl_33">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ViewImpl.SwigDelegateViewImpl_34">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ViewImpl.SwigDelegateViewImpl_35">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ViewImpl.SwigDelegateViewImpl_36">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ViewImpl.SwigDelegateViewImpl_37">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ViewImpl.SwigDelegateViewImpl_38">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ViewImpl.SwigDelegateViewImpl_39">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ViewImpl.SwigDelegateViewImpl_40">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ViewWrapperImpl.OnStageConnectionDelegate">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ViewWrapperImpl.OnStageDisconnectionDelegate">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ViewWrapperImpl.OnChildAddDelegate">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ViewWrapperImpl.OnChildRemoveDelegate">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ViewWrapperImpl.OnPropertySetDelegate">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ViewWrapperImpl.OnSizeSetDelegate">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ViewWrapperImpl.OnSizeAnimationDelegate">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ViewWrapperImpl.OnTouchDelegate">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ViewWrapperImpl.OnHoverDelegate">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ViewWrapperImpl.OnKeyDelegate">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ViewWrapperImpl.OnWheelDelegate">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ViewWrapperImpl.OnRelayoutDelegate">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ViewWrapperImpl.OnSetResizePolicyDelegate">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ViewWrapperImpl.GetNaturalSizeDelegate">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ViewWrapperImpl.CalculateChildSizeDelegate">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ViewWrapperImpl.GetHeightForWidthDelegate">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ViewWrapperImpl.GetWidthForHeightDelegate">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ViewWrapperImpl.RelayoutDependentOnChildrenDimensionDelegate">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ViewWrapperImpl.RelayoutDependentOnChildrenDelegate">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ViewWrapperImpl.OnCalculateRelayoutSizeDelegate">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ViewWrapperImpl.OnLayoutNegotiatedDelegate">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ViewWrapperImpl.OnControlChildAddDelegate">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ViewWrapperImpl.OnControlChildRemoveDelegate">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ViewWrapperImpl.OnStyleChangeDelegate">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ViewWrapperImpl.OnAccessibilityActivatedDelegate">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ViewWrapperImpl.OnAccessibilityPanDelegate">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ViewWrapperImpl.OnAccessibilityTouchDelegate">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ViewWrapperImpl.OnAccessibilityValueChangeDelegate">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ViewWrapperImpl.OnAccessibilityZoomDelegate">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ViewWrapperImpl.OnFocusGainedDelegate">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ViewWrapperImpl.OnFocusLostDelegate">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ViewWrapperImpl.GetNextFocusableViewDelegate">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ViewWrapperImpl.OnFocusChangeCommittedDelegate">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ViewWrapperImpl.OnKeyboardEnterDelegate">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ViewWrapperImpl.OnPinchDelegate">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ViewWrapperImpl.OnPanDelegate">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ViewWrapperImpl.OnTapDelegate">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ViewWrapperImpl.OnLongPressDelegate">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ViewWrapperImpl.DelegateViewWrapperImpl_0">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ViewWrapperImpl.DelegateViewWrapperImpl_1">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ViewWrapperImpl.DelegateViewWrapperImpl_2">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ViewWrapperImpl.DelegateViewWrapperImpl_3">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ViewWrapperImpl.DelegateViewWrapperImpl_4">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ViewWrapperImpl.DelegateViewWrapperImpl_5">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ViewWrapperImpl.DelegateViewWrapperImpl_6">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ViewWrapperImpl.DelegateViewWrapperImpl_7">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ViewWrapperImpl.DelegateViewWrapperImpl_8">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ViewWrapperImpl.DelegateViewWrapperImpl_9">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ViewWrapperImpl.DelegateViewWrapperImpl_10">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ViewWrapperImpl.DelegateViewWrapperImpl_11">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ViewWrapperImpl.DelegateViewWrapperImpl_12">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ViewWrapperImpl.DelegateViewWrapperImpl_13">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ViewWrapperImpl.DelegateViewWrapperImpl_14">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ViewWrapperImpl.DelegateViewWrapperImpl_15">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ViewWrapperImpl.DelegateViewWrapperImpl_16">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ViewWrapperImpl.DelegateViewWrapperImpl_17">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ViewWrapperImpl.DelegateViewWrapperImpl_18">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ViewWrapperImpl.DelegateViewWrapperImpl_19">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ViewWrapperImpl.DelegateViewWrapperImpl_20">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ViewWrapperImpl.DelegateViewWrapperImpl_21">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ViewWrapperImpl.DelegateViewWrapperImpl_22">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ViewWrapperImpl.DelegateViewWrapperImpl_23">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ViewWrapperImpl.DelegateViewWrapperImpl_24">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ViewWrapperImpl.DelegateViewWrapperImpl_25">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ViewWrapperImpl.DelegateViewWrapperImpl_26">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ViewWrapperImpl.DelegateViewWrapperImpl_27">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ViewWrapperImpl.DelegateViewWrapperImpl_28">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ViewWrapperImpl.DelegateViewWrapperImpl_29">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ViewWrapperImpl.DelegateViewWrapperImpl_30">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ViewWrapperImpl.DelegateViewWrapperImpl_31">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ViewWrapperImpl.DelegateViewWrapperImpl_32">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ViewWrapperImpl.DelegateViewWrapperImpl_33">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ViewWrapperImpl.DelegateViewWrapperImpl_34">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ViewWrapperImpl.DelegateViewWrapperImpl_35">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ViewWrapperImpl.DelegateViewWrapperImpl_36">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ViewWrapperImpl.DelegateViewWrapperImpl_37">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ViewWrapperImpl.DelegateViewWrapperImpl_38">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ViewWrapperImpl.DelegateViewWrapperImpl_39">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ViewWrapperImpl.DelegateViewWrapperImpl_40">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.WatchApplication.TimeTickEventArgs">
            <summary>
            Event arguments that passed via time tick event signal.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.WatchApplication.TimeTickEventArgs.Application">
            <summary>
            Application.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.WatchApplication.TimeTickEventArgs.WatchTime">
            <summary>
            WatchTime.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="E:Tizen.NUI.WatchApplication.TimeTick">
            <summary>
            TimeTick event.
            </summary>
        </member>
        <member name="T:Tizen.NUI.WatchApplication.AmbientTickEventArgs">
            <summary>
            Event arguments that passed via ambient tick event signal.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.WatchApplication.AmbientTickEventArgs.Application">
            <summary>
            Application.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.WatchApplication.AmbientTickEventArgs.WatchTime">
            <summary>
            WatchTime.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="E:Tizen.NUI.WatchApplication.AmbientTick">
            <summary>
            AmbientTick event.
            </summary>
        </member>
        <member name="T:Tizen.NUI.WatchApplication.AmbientChangedEventArgs">
            <summary>
            Event arguments that passed via ambient tick event signal.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.WatchApplication.AmbientChangedEventArgs.Application">
            <summary>
            Application.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.WatchApplication.AmbientChangedEventArgs.Changed">
            <summary>
            Changed.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="E:Tizen.NUI.WatchApplication.AmbientChanged">
            <summary>
            AmbientChanged event.
            </summary>
        </member>
        <member name="T:Tizen.NUI.WebViewLite">
            <summary>
            WebViewLite.
            </summary>
        </member>
        <member name="M:Tizen.NUI.WebViewLite.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            To make Button instance be disposed.
            </summary>
        </member>
        <member name="E:Tizen.NUI.WebViewLite.LoadingFinished">
            <summary>
            Web View loading finished event.
            </summary>
        </member>
        <member name="M:Tizen.NUI.WebViewLite.#ctor">
            <summary>
            Creates an uninitialized WebViewLite.
            </summary>
        </member>
        <member name="M:Tizen.NUI.WebViewLite.#ctor(Tizen.NUI.WebViewLite)">
            <summary>
            Copy constructor.
            <param name="webViewLite">WebViewLite to copy. The copied WebViewLite will point at the same implementation</param>
            </summary>
        </member>
        <member name="M:Tizen.NUI.WebViewLite.CreateInstance(System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Creates an internal web view instance (e.g. minimized web engine instance).
            <param name="width">The width of Web</param>
            <param name="height">The height of Web</param>
            <param name="windowX">The x position of window</param>
            <param name="windowY">The y position of window</param>
            <param name="locale">The locale of Web</param>
            <param name="timezoneID">The timezoneID of Web</param>
            </summary>
        </member>
        <member name="M:Tizen.NUI.WebViewLite.DestroyInstance">
            <summary>
            Destroys an internal web view instance (e.g. minimized web engine instance).
            </summary>
        </member>
        <member name="M:Tizen.NUI.WebViewLite.LoadHtml(System.String)">
            <summary>
            Loads a html file.
            <param name="path">The path of Web</param>
            </summary>
        </member>
        <member name="T:Tizen.NUI.WebViewLiteSignal">
            <summary>
            WebViewLiteSignal.
            </summary>
        </member>
        <member name="F:Tizen.NUI.WebViewLiteSignal.swigCMemOwn">
            <summary>
            swigCMemOwn.
            </summary>
        </member>
        <member name="F:Tizen.NUI.WebViewLiteSignal.disposed">
            <summary>
            A Flat to check if it is already disposed.
            </summary>
        </member>
        <member name="M:Tizen.NUI.WebViewLiteSignal.Finalize">
            <summary>
            Distructor.
            </summary>
        </member>
        <member name="M:Tizen.NUI.WebViewLiteSignal.Dispose">
            <summary>
            Dispose.
            </summary>
        </member>
        <member name="M:Tizen.NUI.WebViewLiteSignal.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            you can override it to clean-up your own resources.
            </summary>
            <param name="type">DisposeTypes</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.WebViewLiteSignal.Empty">
            <summary>
            Empty 
            </summary>
            <returns>true if there is no signal attached</returns>
        </member>
        <member name="M:Tizen.NUI.WebViewLiteSignal.GetConnectionCount">
            <summary>
            GetConnectionCount
            </summary>
            <returns>number of attached signals</returns>
        </member>
        <member name="M:Tizen.NUI.WebViewLiteSignal.Connect(System.Delegate)">
            <summary>
            signal connect
            </summary>
            <param name="func"></param>
        </member>
        <member name="M:Tizen.NUI.WebViewLiteSignal.Disconnect(System.Delegate)">
            <summary>
            signal disconnect
            </summary>
            <param name="func"></param>
        </member>
        <member name="M:Tizen.NUI.WebViewLiteSignal.Emit(Tizen.NUI.WebViewLite)">
            <summary>
            Emit
            </summary>
        </member>
        <member name="M:Tizen.NUI.WebViewLiteSignal.#ctor">
            <summary>
            WebViewLiteSignal
            </summary>
        </member>
        <member name="T:Tizen.NUI.WidgetViewSignal">
            <summary>
            WidgetViewSignal
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.WidgetViewSignal.swigCMemOwn">
            <summary>
            swigCMemOwn
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.WidgetViewSignal.Finalize">
            <summary>
            Dispose
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.WidgetViewSignal.Dispose">
            <summary>
            Dispose
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.WidgetViewSignal.Empty">
            <summary>
            Queries whether there are any connected slots.
            </summary>
            <returns>True if there are any slots connected to the signal</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.WidgetViewSignal.GetConnectionCount">
            <summary>
            Queries the number of slots.
            </summary>
            <returns>The number of slots connected to this signal</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.WidgetViewSignal.Connect(System.Delegate)">
            <summary>
            Connects a function.
            </summary>
            <param name="func">The function to connect</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.WidgetViewSignal.Disconnect(System.Delegate)">
            <summary>
            Disconnects a function.
            </summary>
            <param name="func">The function to disconnect</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.WidgetViewSignal.Emit(Tizen.NUI.WidgetView)">
            <summary>
            Connects a member function.
            </summary>
            <param name="arg">The member function to connect</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.WidgetViewSignal.#ctor">
            <summary>
            The contructor.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.Adaptor">
             <summary>
             An Adaptor object is used to initialize and control how Dali runs.
            
             It provides the lifecycle interface that allows the application
             writer to provide their own main loop and other platform related
             features.
            
             The Adaptor class provides a means for initialising the resources required by the Dali::Core.
            
             When dealing with platform events, the application writer must ensure that DALi is called in a
             thread-safe manner.
            
             As soon as the Adaptor class is created and started, the application writer can initialise their
             view objects straight away or as required by the main loop they intend to use (there is no
             need to wait for an initialize signal as per the Tizen.NUI.Application class).
            
             </summary>
             <since_tizen> 4 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Adaptor.swigCMemOwn">
            <summary>swigCMemOwn.</summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Adaptor.disposed">
            <summary>
            A Flat to check if it is already disposed.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Adaptor.Finalize">
            <summary>
            Dispose.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Adaptor.Dispose">
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Adaptor.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            Dispose.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Adaptor.Start">
            <summary>
            Starts the adaptor.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Adaptor.Pause">
            <summary>
            Pauses the adaptor.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Adaptor.Resume">
            <summary>
            Resumes the adaptor, if previously paused.
            </summary>
            <remarks>If the adaptor is not paused, this does not do anything.</remarks>
        </member>
        <member name="M:Tizen.NUI.Adaptor.Stop">
            <summary>
            Stops the adaptor.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Adaptor.ReleaseSurfaceLock">
            <summary>
            Releases any locks the surface may hold.
            </summary>
            <remarks>
            For example, after compositing an offscreen surface, use this method to allow rendering to continue.
            </remarks>
        </member>
        <member name="M:Tizen.NUI.Adaptor.SetRenderRefreshRate(System.UInt32)">
             <summary>
             Sets the number of frames per render.
             </summary>
             <param name="numberOfVSyncsPerRender">The number of vsyncs between successive renders.</param>
             <remarks>
             Suggest this is a power of two:
             1 - render each vsync frame.
             2 - render every other vsync frame.
             4 - render every fourth vsync frame.
             8 - render every eighth vsync frame.
            </remarks>
        </member>
        <member name="M:Tizen.NUI.Adaptor.SetUseHardwareVSync(System.Boolean)">
            <summary>
            Sets whether the frame count per render is managed using the hardware vsync or manually timed.
            </summary>
            <param name="useHardware">True if the hardware vsync should be used.</param>
        </member>
        <member name="P:Tizen.NUI.Adaptor.Instance">
            <summary>
            Returns a reference to the instance of the adaptor used by the current thread.
            </summary>
            <remarks>The adaptor has been initialized. This is only valid in the main thread.</remarks>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Adaptor.IsAvailable">
            <summary>
            Checks whether the adaptor is available.
            </summary>
            <returns>True if it is available, false otherwise.</returns>
        </member>
        <member name="M:Tizen.NUI.Adaptor.NotifySceneCreated">
            <summary>
            Calls this method to notify DALi when a scene is created and initialized.
            Notify the adaptor that the scene has been created.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Adaptor.NotifyLanguageChanged">
             <summary>
             Calls this method to notify DALi when the system language changes.
            
             Use this only when not using Dali::Application. As the application is created, using the
             application will automatically receive notification of the language change.
             When Dali::Application is not used, the application developer should
             use app-core to receive the language change notifications and should update DALi
             by calling this method.
             </summary>
        </member>
        <member name="M:Tizen.NUI.Adaptor.SetMinimumPinchDistance(System.Single)">
            <summary>
            Sets the minimum distance in pixels that the fingers must move towards or away from each other in order to trigger a pinch gesture.
            </summary>
            <param name="distance">The minimum pinch distance in pixels.</param>
        </member>
        <member name="M:Tizen.NUI.Adaptor.FeedWheelEvent(Tizen.NUI.Wheel)">
            <summary>
            Feeds a wheel event to the adaptor.
            </summary>
            <param name="wheelEvent">The wheel event.</param>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Adaptor.FeedKeyEvent(Tizen.NUI.Key)">
            <summary>
            Feeds a key event to the adaptor.
            </summary>
            <param name="keyEvent">The key event holding the key information.</param>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Adaptor.SceneCreated">
            <summary>
            Notifies core that the scene has been created.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Adaptor.SetStereoBase(System.Single)">
            <summary>
            Sets the stereo base (eye separation) for stereoscopic 3D.
            The stereo base is the distance in millimetres between the eyes. Typical values are
            between 50mm and 70mm. The default value is 65mm.
            </summary>
            <param name="stereoBase">The stereo base (eye separation) for stereoscopic 3D.</param>
        </member>
        <member name="T:Tizen.NUI.Adaptor.ResizedEventArgs">
            <summary>
            Event arguments that passed via the Resized signal.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Adaptor.ResizedEventArgs.Adaptor">
            <summary>
            Adaptor - is the adaptor which has size changed.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="E:Tizen.NUI.Adaptor.Resized">
            <summary>
            An event for the Resized signal which can be used to subscribe or unsubscribe the event handler
            provided by the user. The Resized signal is emitted when the size changes.<br />
            </summary>
        </member>
        <member name="T:Tizen.NUI.Adaptor.LanguageChangedEventArgs">
            <summary>
            Event arguments that passed via the LanguageChanged signal.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Adaptor.LanguageChangedEventArgs.Adaptor">
            <summary>
            Adaptor - is the adaptor which has language changed.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="E:Tizen.NUI.Adaptor.LanguageChanged">
            <summary>
            An event for LanguageChanged signal which can be used to subscribe or unsubscribe the event handler
            provided by the user. The LanguageChanged signal is emitted when the language changes.<br />
            </summary>
        </member>
        <member name="T:Tizen.NUI.AlphaFunction">
            <summary>
            Alpha functions are used in animations to specify the rate of change of the animation parameter over time.<br />
            Understanding an animation as a parametric function over time, the alpha function is applied to the parameter of
            the animation before computing the final animation value.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.AlphaFunction.swigCMemOwn">
            <summary>swigCMemOwn.</summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.AlphaFunction.disposed">
            <summary>
            A Flat to check if it is already disposed.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.AlphaFunction.Finalize">
            <summary>
            Dispose.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.AlphaFunction.Dispose">
            <summary>
            To make the AlphaFunction instance be disposed.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.AlphaFunction.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            To make the AlphaFunction instance be disposed.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.AlphaFunction.#ctor(System.Delegate)">
            <summary>
            The constructor.<br />
            Creates an alpha function object with the user-defined alpha function.<br />
            </summary>
            <param name="func">User defined fuction. It must be a method formatted as float alphafunction(float progress)</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.AlphaFunction.#ctor">
            <summary>
            The default constructor.<br />
            Creates an alpha function object with the default built-in alpha function.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.AlphaFunction.#ctor(Tizen.NUI.AlphaFunction.BuiltinFunctions)">
            <summary>
            The constructor.<br />
            Creates an alpha function object with the built-in alpha function passed as a parameter to the constructor.<br />
            </summary>
            <param name="function">One of the built-in alpha functions.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.AlphaFunction.#ctor(Tizen.NUI.Vector2,Tizen.NUI.Vector2)">
            <summary>
            The constructor.<br />
            Creates a bezier alpha function. The bezier will have the first point at (0,0) and the end point at (1,1).<br />
            </summary>
            <remarks>The x components of the control points will be clamped to the range [0, 1] to prevent non-monotonic curves.</remarks>
            <param name="controlPoint0">A Vector2 which will be used as the first control point of the curve.</param>
            <param name="controlPoint1">A Vector2 which will be used as the second control point of the curve.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.AlphaFunction.GetBezierControlPoints(Tizen.NUI.Vector2@,Tizen.NUI.Vector2@)">
            <summary>
            Retrives the control points of the alpha function.<br />
            </summary>
            <param name="controlPoint0">A Vector2 which will be used as the first control point of the curve.</param>
            <param name="controlPoint1">A Vector2 which will be used as the second control point of the curve.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.AlphaFunction.GetBuiltinFunction">
            <summary>
            Returns the built-in function used by the alpha function.<br />
            In case no built-in function has been specified, it will return AlphaFunction::DEFAULT.<br />
            </summary>
            <returns>One of the built-in alpha functions.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.AlphaFunction.GetMode">
            <summary>
             Returns the functioning mode of the alpha function.
            </summary>
            <returns>The functioning mode of the alpha function.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.AlphaFunction.BuiltinFunctions">
            <summary>
            This specifies the various types of BuiltinFunctions.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.AlphaFunction.BuiltinFunctions.Default">
            <summary>
            Linear.
            </summary>
        </member>
        <member name="F:Tizen.NUI.AlphaFunction.BuiltinFunctions.Linear">
            <summary>
            No transformation.
            </summary>
        </member>
        <member name="F:Tizen.NUI.AlphaFunction.BuiltinFunctions.Reverse">
            <summary>
            Reverse linear.
            </summary>
        </member>
        <member name="F:Tizen.NUI.AlphaFunction.BuiltinFunctions.EaseInSquare">
            <summary>
            Speeds up and comes to a sudden stop (square).
            </summary>
        </member>
        <member name="F:Tizen.NUI.AlphaFunction.BuiltinFunctions.EaseOutSquare">
            <summary>
            Sudden start and slows to a gradual stop (square).
            </summary>
        </member>
        <member name="F:Tizen.NUI.AlphaFunction.BuiltinFunctions.EaseIn">
            <summary>
            Speeds up and comes to a sudden stop (cubic).
            </summary>
        </member>
        <member name="F:Tizen.NUI.AlphaFunction.BuiltinFunctions.EaseOut">
            <summary>
            Sudden start and slows to a gradual stop (cubic).
            </summary>
        </member>
        <member name="F:Tizen.NUI.AlphaFunction.BuiltinFunctions.EaseInOut">
            <summary>
            Speeds up and slows to a gradual stop (cubic).
            </summary>
        </member>
        <member name="F:Tizen.NUI.AlphaFunction.BuiltinFunctions.EaseInSine">
            <summary>
            Speeds up and comes to a sudden stop (sinusoidal).
            </summary>
        </member>
        <member name="F:Tizen.NUI.AlphaFunction.BuiltinFunctions.EaseOutSine">
            <summary>
            Sudden start and slows to a gradual stop (sinusoidal).
            </summary>
        </member>
        <member name="F:Tizen.NUI.AlphaFunction.BuiltinFunctions.EaseInOutSine">
            <summary>
            Speeds up and slows to a gradual stop (sinusoidal).
            </summary>
        </member>
        <member name="F:Tizen.NUI.AlphaFunction.BuiltinFunctions.Bounce">
            <summary>
            Sudden start, loses momentum and returns to start position.
            </summary>
        </member>
        <member name="F:Tizen.NUI.AlphaFunction.BuiltinFunctions.Sin">
            <summary>
            Single revolution.
            </summary>
        </member>
        <member name="F:Tizen.NUI.AlphaFunction.BuiltinFunctions.EaseOutBack">
            <summary>
            Sudden start, exceed end position and return to a gradual stop.
            </summary>
        </member>
        <member name="F:Tizen.NUI.AlphaFunction.BuiltinFunctions.Count">
            <summary>
            The count of the BuiltinFunctions enum.
            </summary>
        </member>
        <member name="T:Tizen.NUI.AlphaFunction.Modes">
            <summary>
            This specifies which mode is set for AlphaFunction.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.AlphaFunction.Modes.BuiltinFunction">
            <summary>
            The user has used a built-in function.
            </summary>
        </member>
        <member name="F:Tizen.NUI.AlphaFunction.Modes.CustomFunction">
            <summary>
            The user has provided a custom function.
            </summary>
        </member>
        <member name="F:Tizen.NUI.AlphaFunction.Modes.Bezier">
            <summary>
            The user has provided the control points of a bezier curve.
            </summary>
        </member>
        <member name="T:Tizen.NUI.Animatable">
            <summary>
            Animatable.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Animatable.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            To make the Animatable instance be disposed.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Animatable.#ctor">
            <summary>
            Create an instance of animatable.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Animatable.GetPropertyName(System.Int32)">
            <summary>
            Queries the name of a property.
            </summary>
            <param name="index">The index of the property.</param>
            <returns>The name of the property.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Animatable.GetPropertyIndex(System.String)">
            <summary>
            Queries the index of a property.
            </summary>
            <param name="name">The name of the property.</param>
            <returns>The index of the property.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Animatable.IsPropertyWritable(System.Int32)">
            <summary>
            Queries whether a property can be writable.
            </summary>
            <param name="index">The index of the property.</param>
            <returns>True if the property is writable.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Animatable.IsPropertyAnimatable(System.Int32)">
            <summary>
            whether a writable property can be the target of an animation.
            </summary>
            <param name="index">The index of the property.</param>
            <returns>True if the property is animatable.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Animatable.GetPropertyType(System.Int32)">
            <summary>
            Queries the type of a property.
            </summary>
            <param name="index">The index of the property.</param>
            <returns>The type of the property.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Animatable.SetProperty(System.Int32,Tizen.NUI.PropertyValue)">
            <summary>
            Sets the value of an existing property.
            </summary>
            <param name="index">The index of the property.</param>
            <param name="propertyValue">The new value of the property.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Animatable.RegisterProperty(System.String,Tizen.NUI.PropertyValue)">
            <summary>
            Registers a new animatable property.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="propertyValue">The new value of the property.</param>
            <returns>The type of the property.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Animatable.RegisterProperty(System.String,Tizen.NUI.PropertyValue,Tizen.NUI.PropertyAccessMode)">
            <summary>
            Registers a new animatable property.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="propertyValue">The new value of the property.</param>
            <param name="accessMode">The property access mode (writable, animatable etc).</param>
            <returns>The type of the property.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Animatable.GetProperty(System.Int32)">
            <summary>
            Retrieves a property value.
            </summary>
            <param name="index">The index of the property.</param>
            <returns>The property value.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Animatable.AddPropertyNotification(System.String,Tizen.NUI.PropertyCondition)">
            <summary>
            Adds a property notification to this object.
            </summary>
            <param name="property">The name of the property.</param>
            <param name="condition">The notification will be triggered when this condition is satisfied.</param>
            <returns>A handle to the newly created PropertyNotification.</returns>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Animatable.RemovePropertyNotification(Tizen.NUI.PropertyNotification)">
            <summary>
            Removes a property notification from this object.
            </summary>
            <param name="propertyNotification">The propertyNotification to be removed.</param>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Animatable.RemovePropertyNotifications">
            <summary>
            Removes a property notification from this object.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.Animatable.Capability">
            <summary>
            Enumeration for Handle's capabilities that can be queried.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Animatable.Capability.DYNAMIC_PROPERTIES">
            <summary>
            Some objects support dynamic property creation at run-time.
            New properties are registered by calling RegisterProperty() with an unused property name.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.Animation">
            <summary>
            Animation can be used to animate the properties of any number of objects, typically view.<br />
            If the "Finished" event is connected to a member function of an object, it must be disconnected before the object is destroyed.<br />
            This is typically done in the object destructor, and requires either the animation handle to be stored.<br />
            The overall animation time is superseded by the values given in the animation time used when calling the AnimateTo(), AnimateBy(), AnimateBetween() and AnimatePath() methods.<br />
            If any of the individual calls to those functions exceeds the overall animation time (Duration), then the overall animation time is automatically extended.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Animation.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            To make animation instance be disposed.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Animation.#ctor(System.Int32)">
            <summary>
            Creates an initialized animation.<br />
            The animation will not loop.<br />
            The default end action is "Cancel".<br />
            The default alpha function is linear.<br />
            </summary>
            <remarks>DurationmSeconds must be greater than zero.</remarks>
            <param name="durationMilliSeconds">The duration in milliseconds.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="E:Tizen.NUI.Animation.Finished">
            @brief Event for the finished signal which can be used to subscribe or unsubscribe the event handler.
            The finished signal is emitted when an animation's animations have finished.
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="E:Tizen.NUI.Animation.ProgressReached">
            @brief Event for the ProgressReached signal, which can be used to subscribe or unsubscribe the event handler.
            The ProgressReached signal is emitted when the animation has reached a given progress percentage, this is set in the api SetProgressNotification.
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Animation.Duration">
            <summary>
            Gets or sets the duration in milliseconds of the animation.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Animation.DefaultAlphaFunction">
            <summary>
             Gets or sets the default alpha function for the animation.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Animation.State">
            <summary>
            Queries the state of the animation.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Animation.LoopCount">
            <summary>
            Set: Enables looping for a specified number of repeats. A zero is the same as Looping = true; i.e., repeat forever.<br />
            This property resets the looping value and should not be used with the Looping property.<br />
            Setting this parameter does not cause the animation to Play().<br />
            Get: Gets the loop count. A zero is the same as Looping = true; i.e., repeat forever.<br />
            The loop count is initially 1 for play once.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Animation.Looping">
            <summary>
            Gets or sets the status of whether the animation will loop.<br />
            This property resets the loop count and should not be used with the LoopCount property.<br />
            Setting this parameter does not cause the animation to Play().<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Animation.EndAction">
            <summary>
            Gets or sets the end action of the animation.<br />
            This action is performed when the animation ends or if it is stopped.<br />
            The default end action is cancel.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Animation.Stop(Tizen.NUI.Animation.EndActions)">
            <summary>
            Stops the animation.
            </summary>
            <param name="action">The end action can be set.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Animation.CurrentLoop">
            <summary>
            Gets the current loop count.<br />
            A value 0 indicating the current loop count when looping.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Animation.DisconnectAction">
            <summary>
            Gets or sets the disconnect action.<br />
            If any of the animated property owners are disconnected from the stage while the animation is being played, then this action is performed.<br />
            The default action is cancel.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Animation.CurrentProgress">
            <summary>
            Gets or sets the progress of the animation.<br />
            The animation will play (or continue playing) from this point.<br />
            The progress must be in the 0-1 interval or in the play range interval if defined<br />
            otherwise, it will be ignored.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Animation.SpeedFactor">
            <summary>
            Gets or sets specificifications of a speed factor for the animation.<br />
            The speed factor is a multiplier of the normal velocity of the animation.<br />
            Values between [0, 1] will slow down the animation and values above one will speed up the animation.<br />
            It is also possible to specify a negative multiplier to play the animation in reverse.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Animation.PlayRange">
            <summary>
            Gets or sets the playing range.<br />
            Animation will play between the values specified. Both values (range.x and range.y ) should be between 0-1,
            otherwise they will be ignored. If the range provided is not in proper order (minimum, maximum ), it will be reordered.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Animation.ProgressNotification">
            <summary>
            Gets or sets the progress notification marker which triggers the ProgressReachedSignal.<br />
            Percentage of animation progress should be greater than 0 and less than 1, for example, 0.3 for 30% <br />
            One notification can be set on each animation.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Animation.AnimateBy(Tizen.NUI.BaseComponents.View,System.String,System.Object,Tizen.NUI.AlphaFunction)">
            <summary>
            Animates a property value by a relative amount.<br />
            </summary>
            <param name="target">The target object to animate.</param>
            <param name="property">The target property to animate.</param>
            <param name="relativeValue">The property value will change by this amount.</param>
            <param name="alphaFunction">The alpha function to apply.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Animation.AnimateBy(Tizen.NUI.BaseComponents.View,System.String,System.Object,System.Int32,System.Int32,Tizen.NUI.AlphaFunction)">
            <summary>
            Animates a property value by a relative amount.<br />
            </summary>
            <param name="target">The target object to animate.</param>
            <param name="property">The target property to animate.</param>
            <param name="relativeValue">The property value will change by this amount.</param>
            <param name="startTime">The start time of the animation.</param>
            <param name="endTime">The end time of the animation.</param>
            <param name="alphaFunction">The alpha function to apply.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Animation.AnimateTo(Tizen.NUI.BaseComponents.View,System.String,System.Object,Tizen.NUI.AlphaFunction)">
            <summary>
            Animates a property to a destination value.<br />
            </summary>
            <param name="target">The target object to animate.</param>
            <param name="property">The target property to animate.</param>
            <param name="destinationValue">The destination value.</param>
            <param name="alphaFunction">The alpha function to apply.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Animation.AnimateTo(Tizen.NUI.BaseComponents.View,System.String,System.Object,System.Int32,System.Int32,Tizen.NUI.AlphaFunction)">
            <summary>
            Animates a property to a destination value.<br />
            </summary>
            <param name="target">The target object to animate.</param>
            <param name="property">The target property to animate.</param>
            <param name="destinationValue">The destination value.</param>
            <param name="startTime">The start time of the animation.</param>
            <param name="endTime">The end time of the animation.</param>
            <param name="alphaFunction">The alpha function to apply.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Animation.AnimateBetween(Tizen.NUI.BaseComponents.View,System.String,Tizen.NUI.KeyFrames,Tizen.NUI.Animation.Interpolation,Tizen.NUI.AlphaFunction)">
            <summary>
            Animates a property between keyframes.
            </summary>
            <param name="target">The target object to animate.</param>
            <param name="property">The target property to animate.</param>
            <param name="keyFrames">The set of time or value pairs between which to animate.</param>
            <param name="interpolation">The method used to interpolate between values.</param>
            <param name="alphaFunction">The alpha function to apply.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Animation.AnimateBetween(Tizen.NUI.BaseComponents.View,System.String,Tizen.NUI.KeyFrames,System.Int32,System.Int32,Tizen.NUI.Animation.Interpolation,Tizen.NUI.AlphaFunction)">
            <summary>
            Animates a property between keyframes.
            </summary>
            <param name="target">The target object to animate</param>
            <param name="property">The target property to animate</param>
            <param name="keyFrames">The set of time/value pairs between which to animate</param>
            <param name="startTime">The start time of animation in milliseconds.</param>
            <param name="endTime">The end time of animation in milliseconds.</param>
            <param name="interpolation">The method used to interpolate between values.</param>
            <param name="alphaFunction">The alpha function to apply.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Animation.AnimatePath(Tizen.NUI.BaseComponents.View,Tizen.NUI.Path,Tizen.NUI.Vector3,Tizen.NUI.AlphaFunction)">
            <summary>
            Animates the view's position and orientation through a predefined path.<br />
            The view will rotate to orient the supplied forward vector with the path's tangent.<br />
            If forward is the zero vector then no rotation will happen.<br />
            </summary>
            <param name="view">The view to animate.</param>
            <param name="path">It defines position and orientation.</param>
            <param name="forward">The vector (in local space coordinate system) will be oriented with the path's tangent direction.</param>
            <param name="alphaFunction">The alpha function to apply.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Animation.AnimatePath(Tizen.NUI.BaseComponents.View,Tizen.NUI.Path,Tizen.NUI.Vector3,System.Int32,System.Int32,Tizen.NUI.AlphaFunction)">
            <summary>
            Animates the view's position and orientation through a predefined path.<br />
            The view will rotate to orient the supplied forward vector with the path's tangent.<br />
            If forward is the zero vector then no rotation will happen.<br />
            </summary>
            <param name="view">The view to animate.</param>
            <param name="path">It defines position and orientation.</param>
            <param name="forward">The vector (in local space coordinate system) will be oriented with the path's tangent direction.</param>
            <param name="startTime">The start time of the animation.</param>
            <param name="endTime">The end time of the animation.</param>
            <param name="alphaFunction">The alpha function to apply.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Animation.#ctor">
            <summary>
            Creates an initialized animation.<br />
            The animation will not loop.<br />
            The default end action is "Cancel".<br />
            The default alpha function is linear.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Animation.DownCast(Tizen.NUI.BaseHandle)">
            <summary>
            Downcasts a handle to animation handle.<br />
            If handle points to an animation object, the downcast produces a valid handle.<br />
            If not, the returned handle is left uninitialized.<br />
            </summary>
            <param name="handle">Handle to an object.</param>
            <returns>Handle to an animation object or an uninitialized handle.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Animation.Play">
            <summary>
            Plays the animation.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Animation.PlayFrom(System.Single)">
            <summary>
            Plays the animation from a given point.<br />
            The progress must be in the 0-1 interval or in the play range interval if defined,
            otherwise, it will be ignored.<br />
            </summary>
            <param name="progress">A value between [0,1], or between the play range if specified, from where the animation should start playing.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Animation.PlayAfter(System.Int32)">
            <summary>
            Plays the animation after a given delay time.<br/>
            The delay time is not included in the looping time.<br/>
            When the delay time is a negative value, it would treat as play immediately.<br/>
            </summary>
            <param name="delayMilliseconds">The delay time.</param>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Animation.Pause">
            <summary>
            Pauses the animation.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Animation.Stop">
            <summary>
            Stops the animation.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Animation.Clear">
            <summary>
            Clears the animation.<br />
            This disconnects any objects that were being animated, effectively stopping the animation.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.Animation.EndActions">
            <summary>
            Enumeration for what to do when the animation ends, stopped, or destroyed.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Animation.EndActions.Cancel">
            <summary>
            When the animation ends, the animated property values are saved.
            </summary>
        </member>
        <member name="F:Tizen.NUI.Animation.EndActions.Discard">
            <summary>
            When the animation ends, the animated property values are forgotten.
            </summary>
        </member>
        <member name="F:Tizen.NUI.Animation.EndActions.StopFinal">
            <summary>
            If the animation is stopped, the animated property values are saved as if the animation had run to completion, otherwise behaves like cancel.
            </summary>
        </member>
        <member name="T:Tizen.NUI.Animation.Interpolation">
            <summary>
            Enumeration for what interpolation method to use on key-frame animations.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Animation.Interpolation.Linear">
            <summary>
            Values in between key frames are interpolated using a linear polynomial. (Default)
            </summary>
        </member>
        <member name="F:Tizen.NUI.Animation.Interpolation.Cubic">
            <summary>
            Values in between key frames are interpolated using a cubic polynomial.
            </summary>
        </member>
        <member name="T:Tizen.NUI.Animation.States">
            <summary>
            Enumeration for what state the animation is in.
            </summary>
            <remarks>Calling Reset() on this class will not reset the animation. It will call the BaseHandle.Reset() which drops the object handle.</remarks>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Animation.States.Stopped">
            <summary>
            The animation has stopped.
            </summary>
        </member>
        <member name="F:Tizen.NUI.Animation.States.Playing">
            <summary>
            The animation is playing.
            </summary>
        </member>
        <member name="F:Tizen.NUI.Animation.States.Paused">
            <summary>
            The animation is paused.
            </summary>
        </member>
        <member name="T:Tizen.NUI.BaseComponents.CustomView">
            <summary>
            CustomView provides some common functionality required by all views.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.CustomView.#ctor(System.String,Tizen.NUI.CustomViewBehaviour)">
            <summary>
            Create an instance of customView.
            </summary>
            <param name="typeName">typename</param>
            <param name="behaviour">CustomView Behaviour</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.CustomView.SetBackground(Tizen.NUI.PropertyMap)">
            <summary>
            Sets the background with a property map.
            </summary>
            <param name="map">The background property map.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.CustomView.EnableGestureDetection(Tizen.NUI.Gesture.GestureType)">
            <summary>
            Allows deriving classes to enable any of the gesture detectors that are available.<br />
            Gesture detection can be enabled one at a time or in a bitwise format.<br />
            </summary>
            <param name="type">The gesture type(s) to enable.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.CustomView.DisableGestureDetection(Tizen.NUI.Gesture.GestureType)">
            <summary>
            Allows deriving classes to disable any of the gesture detectors.<br />
            Like EnableGestureDetection, this can also be called using bitwise or one at a time.<br />
            </summary>
            <param name="type">The gesture type(s) to disable.</param>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.CustomView.FocusNavigationSupport">
            <summary>
            Sets whether this control supports two dimensional keyboard navigation
            (i.e., whether it knows how to handle the keyboard focus movement between its child views).<br />
            The control doesn't support it by default.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.CustomView.IsKeyboardNavigationSupported">
            <summary>
            Gets whether this control supports two-dimensional keyboard navigation.
            </summary>
            <returns>True if this control supports two-dimensional keyboard navigation.</returns>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.CustomView.FocusGroup">
            <summary>
            Sets or gets whether this control is a focus group for keyboard navigation.
            </summary>
            <returns>True if this control is set as a focus group for keyboard navigation.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.CustomView.SetAsKeyboardFocusGroup(System.Boolean)">
            <summary>
            Sets whether this control is a focus group for keyboard navigation.
            (i.e., the scope of keyboard focus movement can be limitied to its child views). The control is not a focus group by default.
            </summary>
            <param name="isFocusGroup">Whether this control is set as a focus group for keyboard navigation.</param>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.CustomView.IsKeyboardFocusGroup">
            <summary>
            Gets whether this control is a focus group for keyboard navigation.
            </summary>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.CustomView.AccessibilityActivate">
            <summary>
            Called by the AccessibilityManager to activate the control.
            </summary>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.CustomView.KeyboardEnter">
            <summary>
            Called by the KeyboardFocusManager.
            </summary>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.CustomView.EmitKeyEventSignal(Tizen.NUI.Key)">
            <summary>
            Called by the KeyInputFocusManager to emit key event signals.
            </summary>
            <param name="key">The key event.</param>
            <returns>True if the event was consumed.</returns>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.CustomView.RelayoutRequest">
            <summary>
            Requests a relayout, which means performing a size negotiation on this view, its parent, and children (and potentially whole scene).<br />
            This method can also be called from a derived class every time it needs a different size.<br />
            At the end of event processing, the relayout process starts and all controls which requested relayout will have their sizes (re)negotiated.<br />
            It can be called multiple times; the size negotiation is still only performed once, i.e., there is no need to keep track of this in the calling side.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.CustomView.GetHeightForWidthBase(System.Single)">
            <summary>
            Provides the view implementation of GetHeightForWidth.
            </summary>
            <param name="width">The width to use.</param>
            <returns>The height based on the width.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.CustomView.GetWidthForHeightBase(System.Single)">
            <summary>
            Provides the view implementation of GetWidthForHeight.
            </summary>
            <param name="height">The height to use.</param>
            <returns>The width based on the height.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.CustomView.CalculateChildSizeBase(Tizen.NUI.BaseComponents.View,Tizen.NUI.DimensionType)">
            <summary>
            Calculates the size for a child using the base view object.
            </summary>
            <param name="child">The child view to calculate the size for.</param>
            <param name="dimension">The dimension to calculate the size, for example, the width or the height.</param>
            <returns>Return the calculated size for the given dimension. If more than one dimension is requested, just return the first one found.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.CustomView.RelayoutDependentOnChildrenBase(Tizen.NUI.DimensionType)">
            <summary>
            Determines if this view is dependent on it's children for relayout from the base class.
            </summary>
            <param name="dimension">The dimension(s) to check for.</param>
            <returns>Return if the view is dependent on it's children.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.CustomView.RelayoutDependentOnChildrenBase">
            <summary>
            Determines if this view is dependent on it's children for relayout from the base class.
            </summary>
            <returns>Return if the view is dependent on it's children.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.CustomView.RegisterVisual(System.Int32,Tizen.NUI.VisualBase)">
            <summary>
            Registers a visual by property index, linking a view to visual when required.<br />
            In the case of the visual being a view or control deeming visual not required, then the visual should be an empty handle.<br />
            No parenting is done during registration, this should be done by a derived class.<br />
            </summary>
            <param name="index">The property index of the visual used to reference visual.</param>
            <param name="visual">The visual to register.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.CustomView.RegisterVisual(System.Int32,Tizen.NUI.VisualBase,System.Boolean)">
            <summary>
            Registers a visual by the property index, linking a view to visual when required.<br />
            In the case of the visual being a view or control deeming visual not required, then the visual should be an empty handle.<br />
            If enabled is false, then the visual is not set on the stage until enabled by the derived class.<br />
            </summary>
            <param name="index">The property index of the visual used to reference visual.</param>
            <param name="visual">The visual to register.</param>
            <param name="enabled">False if derived class wants to control when the visual is set on the stage.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.CustomView.UnregisterVisual(System.Int32)">
            <summary>
            Erases the entry matching the given index from the list of registered visuals.
            </summary>
            <param name="index">The property index of the visual used to reference visual.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.CustomView.GetVisual(System.Int32)">
            <summary>
            Retrieves the visual associated with the given property index.<br />
            For managing the object lifecycle, do not store the returned visual as a member which increments its reference count.<br />
            </summary>
            <param name="index">The property index of the visual used to reference visual.</param>
            <returns>The registered visual if exists, otherwise an empty handle.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.CustomView.EnableVisual(System.Int32,System.Boolean)">
            <summary>
            Sets the given visual to be displayed or not when parent staged.<br />
            For managing the object lifecycle, do not store the returned visual as a member which increments its reference count.<br />
            </summary>
            <param name="index">The property index of the visual, used to reference visual.</param>
            <param name="enable">Flag set to enabled or disabled.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.CustomView.IsVisualEnabled(System.Int32)">
            <summary>
            Queries if the given visual is to be displayed when parent staged.<br />
            For managing the object lifecycle, do not store the returned visual as a member which increments its reference count.<br />
            </summary>
            <param name="index">The property index of the visual.</param>
            <returns>Whether visual is enabled or not.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.CustomView.CreateTransition(Tizen.NUI.TransitionData)">
            <summary>
            Creates a transition effect on the control.
            </summary>
            <param name="transitionData">The transition data describing the effect to create.</param>
            <returns>A handle to an animation defined with the given effect, or an empty handle if no properties match.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.CustomView.EmitFocusSignal(System.Boolean)">
            <summary>
            Emits the KeyInputFocusGained signal if true, else, emits the KeyInputFocusLost signal.<br />
            Should be called last by the control after it acts on the input focus change.<br />
            </summary>
            <param name="focusGained">True if gained, false if lost.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.CustomView.OnInitialize">
            <summary>
            This method is called after the control has been initialized.<br />
            Derived classes should do any second phase initialization by overriding this method.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.CustomView.OnStageConnection(System.Int32)">
            <summary>
            Called after the view has been connected to the stage.<br />
            When a view is connected, it will be directly or indirectly parented to the root view.<br />
            The root view is provided automatically by Tizen.NUI.Stage, and is always considered to be connected.<br />
            When the parent of a set of views is connected to the stage, then all of the children will receive this callback.<br />
            </summary>
            <param name="depth">The depth in the hierarchy for the view.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.CustomView.OnStageDisconnection">
            <summary>
            Called after the view has been disconnected from the stage.<br />
            If a view is disconnected, it either has no parent, or is parented to a disconnected view.<br />
            When the parent of a set of views is disconnected to the stage, then all of the children will receive this callback, starting with the leaf views.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.CustomView.OnChildAdd(Tizen.NUI.BaseComponents.View)">
            <summary>
            Called after a child has been added to the owning view.
            </summary>
            <param name="view">The child which has been added.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.CustomView.OnChildRemove(Tizen.NUI.BaseComponents.View)">
            <summary>
            Called after the owning view has attempted to remove a child( regardless of whether it succeeded or not ).
            </summary>
            <param name="view">The child being removed.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.CustomView.OnPropertySet(System.Int32,Tizen.NUI.PropertyValue)">
            <summary>
            Called when the owning view property is set.
            </summary>
            <param name="index">The property index that was set.</param>
            <param name="propertyValue">The value to set.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.CustomView.OnSizeSet(Tizen.NUI.Vector3)">
            <summary>
            Called when the owning view's size is set, for example, using View.SetSize().
            </summary>
            <param name="targetSize">The target size.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.CustomView.OnSizeAnimation(Tizen.NUI.Animation,Tizen.NUI.Vector3)">
            <summary>
            Called when the owning view's size is animated, for example, using Animation::AnimateTo( Property ( view, View::Property::SIZE ), ... ).
            </summary>
            <param name="animation">The object which is animating the owning view.</param>
            <param name="targetSize">The target size.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.CustomView.OnTouch(Tizen.NUI.Touch)">
            <summary>
            Called after a touch event is received by the owning view.<br />
            CustomViewBehaviour.REQUIRES_TOUCH_EVENTS must be enabled during construction. See CustomView(ViewWrapperImpl.CustomViewBehaviour behaviour).<br />
            </summary>
            <param name="touch">The touch event.</param>
            <returns>True if the event should be consumed.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.CustomView.OnHover(Tizen.NUI.Hover)">
            <summary>
            Called after a hover event is received by the owning view.<br />
            CustomViewBehaviour.REQUIRES_HOVER_EVENTS must be enabled during construction. See CustomView(ViewWrapperImpl.CustomViewBehaviour behaviour).<br />
            </summary>
            <param name="hover">The hover event.</param>
            <returns>True if the hover event should be consumed.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.CustomView.OnKey(Tizen.NUI.Key)">
            <summary>
            Called after a key event is received by the view that has had its focus set.
            </summary>
            <param name="key">The key event.</param>
            <returns>True if the key event should be consumed.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.CustomView.OnWheel(Tizen.NUI.Wheel)">
            <summary>
            Called after a wheel event is received by the owning view.<br />
            CustomViewBehaviour.REQUIRES_WHEEL_EVENTS must be enabled during construction. See CustomView(ViewWrapperImpl.CustomViewBehaviour behaviour).<br />
            </summary>
            <param name="wheel">The wheel event.</param>
            <returns>True if the wheel event should be consumed.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.CustomView.OnRelayout(Tizen.NUI.Vector2,Tizen.NUI.RelayoutContainer)">
            <summary>
            Called after the size negotiation has been finished for this control.<br />
            The control is expected to assign this given size to itself or its children.<br />
            Should be overridden by derived classes if they need to layout views differently after certain operations like add or remove views, resize, or after changing specific properties.<br />
            As this function is called from inside the size negotiation algorithm, you cannot call RequestRelayout (the call would just be ignored).<br />
            </summary>
            <param name="size">The allocated size.</param>
            <param name="container">The control should add views to this container that it is not able to allocate a size for.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.CustomView.OnSetResizePolicy(Tizen.NUI.ResizePolicyType,Tizen.NUI.DimensionType)">
            <summary>
            Notification for deriving classes.
            </summary>
            <param name="policy">The policy being set.</param>
            <param name="dimension">The policy is being set for.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.CustomView.GetNaturalSize">
            <summary>
            Returns the natural size of the view.
            </summary>
            <returns>The view's natural size</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.CustomView.CalculateChildSize(Tizen.NUI.BaseComponents.View,Tizen.NUI.DimensionType)">
            <summary>
            Calculates the size for a child.
            </summary>
            <param name="child">The child view to calculate the size for.</param>
            <param name="dimension">The dimension to calculate the size, for example, the width or the height.</param>
            <returns>Return the calculated size for the given dimension. If more than one dimension is requested, just return the first one found.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.CustomView.GetHeightForWidth(System.Single)">
            <summary>
            This method is called during size negotiation when a height is required for a given width.<br />
            Derived classes should override this if they wish to customize the height returned.<br />
            </summary>
            <param name="width">Width to use</param>
            <returns>The height based on the width</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.CustomView.GetWidthForHeight(System.Single)">
            <summary>
            This method is called during size negotiation when a width is required for a given height.<br />
            Derived classes should override this if they wish to customize the width returned.<br />
            </summary>
            <param name="height">Height to use</param>
            <returns>The width based on the width</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.CustomView.RelayoutDependentOnChildren(Tizen.NUI.DimensionType)">
            <summary>
            Determines if this view is dependent on it's children for relayout.
            </summary>
            <param name="dimension">The dimension(s) to check for.</param>
            <returns>Return if the view is dependent on it's children.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.CustomView.RelayoutDependentOnChildren">
            <summary>
            Determines if this view is dependent on it's children for relayout from the base class.
            </summary>
            <returns>Return true if the view is dependent on it's children.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.CustomView.OnCalculateRelayoutSize(Tizen.NUI.DimensionType)">
            <summary>
            The virtual method to notify deriving classes that relayout dependencies have been
            met and the size for this object is about to be calculated for the given dimension.
            </summary>
            <param name="dimension">The dimension that is about to be calculated.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.CustomView.OnLayoutNegotiated(System.Single,Tizen.NUI.DimensionType)">
            <summary>
            The virtual method to notify deriving classes that the size for a dimension has just been negotiated.
            </summary>
            <param name="size">The new size for the given dimension.</param>
            <param name="dimension">The dimension that was just negotiated.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.CustomView.OnStyleChange(Tizen.NUI.StyleManager,Tizen.NUI.StyleChangeType)">
            <summary>
            This method should be overridden by deriving classes requiring notifications when the style changes.
            </summary>
            <param name="styleManager">The StyleManager object.</param>
            <param name="change">Information denoting what has changed.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.CustomView.OnAccessibilityActivated">
            <summary>
            This method is called when the control accessibility is activated.<br />
            Derived classes should override this to perform custom accessibility activation.<br />
            </summary>
            <returns>True if this control can perform accessibility activation.</returns>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.CustomView.OnAccessibilityPan(Tizen.NUI.PanGesture)">
            <summary>
            This method should be overridden by deriving classes when they wish to respond the accessibility.
            </summary>
            <param name="gestures">The pan gesture.</param>
            <returns>True if the pan gesture has been consumed by this control.</returns>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.CustomView.OnAccessibilityTouch(Tizen.NUI.Touch)">
            <summary>
            This method should be overridden by deriving classes when they wish to respond the accessibility.
            </summary>
            <param name="touch">The touch gesture.</param>
            <returns>True if the touch event has been consumed by this control.</returns>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.CustomView.OnAccessibilityValueChange(System.Boolean)">
            <summary>
            This method should be overridden by deriving classes when they wish to respond the accessibility up and down action (i.e., value change of slider control).
            </summary>
            <param name="isIncrease">Whether the value should be increased or decreased.</param>
            <returns>True if the value changed action has been consumed by this control.</returns>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.CustomView.OnAccessibilityZoom">
            <summary>
            This method should be overridden by deriving classes when they wish to respond the accessibility zoom action.
            </summary>
            <returns>True if the zoom action has been consumed by this control.</returns>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.CustomView.OnFocusGained">
            <summary>
            Called when the control gain key input focus. Should be overridden by derived classes if they need to customize what happens when the focus is gained.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.CustomView.OnFocusLost">
            <summary>
            Called when the control loses key input focus. Should be overridden by derived classes if they need to customize what happens when the focus is lost.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.CustomView.GetNextFocusableView(Tizen.NUI.BaseComponents.View,Tizen.NUI.BaseComponents.View.FocusDirection,System.Boolean)">
            <summary>
            Gets the next keyboard focusable view in this control towards the given direction.<br />
            A control needs to override this function in order to support two dimensional keyboard navigation.<br />
            </summary>
            <param name="currentFocusedView">The current focused view.</param>
            <param name="direction">The direction to move the focus towards.</param>
            <param name="loopEnabled">Whether the focus movement should be looped within the control.</param>
            <returns>The next keyboard focusable view in this control or an empty handle if no view can be focused.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.CustomView.OnFocusChangeCommitted(Tizen.NUI.BaseComponents.View)">
            <summary>
            Informs this control that its chosen focusable view will be focused.<br />
            This allows the application to preform any actions it wishes before the focus is actually moved to the chosen view.<br />
            </summary>
            <param name="commitedFocusableView">The commited focused view.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.CustomView.OnKeyboardEnter">
            <summary>
            This method is called when the control has enter pressed on it.<br />
            Derived classes should override this to perform custom actions.<br />
            </summary>
            <returns>True if this control supported this action.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.CustomView.OnPinch(Tizen.NUI.PinchGesture)">
            <summary>
            Called whenever a pinch gesture is detected on this control.<br />
            This can be overridden by deriving classes when pinch detection is enabled. The default behavior is to scale the control by the pinch scale.<br />
            If overridden, then the default behavior will not occur.<br />
            Pinch detection should be enabled via EnableGestureDetection().<br />
            </summary>
            <param name="pinch">The pinch tap gesture.</param>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.CustomView.OnPan(Tizen.NUI.PanGesture)">
            <summary>
            Called whenever a pan gesture is detected on this control.<br />
            This should be overridden by deriving classes when pan detection is enabled.<br />
            There is no default behavior with panning.<br />
            Pan detection should be enabled via EnableGestureDetection().<br />
            </summary>
            <param name="pan">The pan gesture.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.CustomView.OnTap(Tizen.NUI.TapGesture)">
            <summary>
            Called whenever a tap gesture is detected on this control.<br />
            This should be overridden by deriving classes when tap detection is enabled.<br />
            There is no default behavior with a tap.<br />
            Tap detection should be enabled via EnableGestureDetection().<br />
            </summary>
            <param name="tap">The tap gesture.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.CustomView.OnLongPress(Tizen.NUI.LongPressGesture)">
            <summary>
            Called whenever a long press gesture is detected on this control.<br />
            This should be overridden by deriving classes when long press detection is enabled.<br />
            There is no default behavior associated with a long press.<br />
            Long press detection should be enabled via EnableGestureDetection().<br />
            </summary>
            <param name="longPress">The long press gesture.</param>
        </member>
        <member name="T:Tizen.NUI.BaseComponents.FlexContainer">
            <summary>
            FlexContainer implements a subset of the flexbox spec (defined by W3C):https://www.w3.org/TR/css3-flexbox/<br />
            It aims at providing a more efficient way to layout, align, and distribute space among items in the container, even when their size is unknown or dynamic.<br />
            FlexContainer has the ability to alter the width and the height of its children (i.e., flex items) to fill the available space in the best possible way on different screen sizes.<br />
            FlexContainer can expand items to fill available free space, or shrink them to prevent overflow.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.FlexContainer.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            To make the FlexContainer instance be disposed.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.BaseComponents.FlexContainer.ChildProperty">
            <summary>
            Enumeration for the instance of child properties belonging to the FlexContainer class.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.FlexContainer.#ctor">
            <summary>
            Creates a FlexContainer handle.
            Calling member functions with an uninitialized handle is not allowed.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.BaseComponents.FlexContainer.FlexDirectionType">
            <summary>
            Enumeration for the direction of the main axis in the flex container. This determines
            the direction that flex items are laid out in the flex container.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.BaseComponents.FlexContainer.FlexDirectionType.Column">
            <summary>
            The flexible items are displayed vertically as a column.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.BaseComponents.FlexContainer.FlexDirectionType.ColumnReverse">
            <summary>
            The flexible items are displayed vertically as a column, but in reverse order.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.BaseComponents.FlexContainer.FlexDirectionType.Row">
            <summary>
            The flexible items are displayed horizontally as a row.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.BaseComponents.FlexContainer.FlexDirectionType.RowReverse">
            <summary>
            The flexible items are displayed horizontally as a row.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.BaseComponents.FlexContainer.ContentDirectionType">
            <summary>
            Enumeration for the primary direction in which content is ordered in the flex container
            and on which sides the ?�start??and ?�end??are.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.BaseComponents.FlexContainer.ContentDirectionType.Inherit">
            <summary>
            Inherits the same direction from the parent.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.BaseComponents.FlexContainer.ContentDirectionType.LTR">
            <summary>
            From left to right.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.BaseComponents.FlexContainer.ContentDirectionType.RTL">
            <summary>
            From right to left.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.BaseComponents.FlexContainer.Justification">
            <summary>
            Enumeration for the alignment of the flex items when the items do not use all available
            space on the main axis.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.BaseComponents.FlexContainer.Justification.JustifyFlexStart">
            <summary>
            Items are positioned at the beginning of the container.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.BaseComponents.FlexContainer.Justification.JustifyCenter">
            <summary>
            Items are positioned at the center of the container.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.BaseComponents.FlexContainer.Justification.JustifyFlexEnd">
            <summary>
            Items are positioned at the end of the container.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.BaseComponents.FlexContainer.Justification.JustifySpaceBetween">
            <summary>
            Items are positioned with equal space between the lines.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.BaseComponents.FlexContainer.Justification.JustifySpaceAround">
            <summary>
            Items are positioned with equal space before, between, and after the lines.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.BaseComponents.FlexContainer.Alignment">
            <summary>
            Enumeration for the alignment of the flex items or lines when the items or lines do not
            use all the available space on the cross axis.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.BaseComponents.FlexContainer.Alignment.AlignAuto">
            <summary>
            Inherits the same alignment from the parent (only valid for "alignSelf" property).
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.BaseComponents.FlexContainer.Alignment.AlignFlexStart">
            <summary>
            At the beginning of the container.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.BaseComponents.FlexContainer.Alignment.AlignCenter">
            <summary>
            At the center of the container.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.BaseComponents.FlexContainer.Alignment.AlignFlexEnd">
            <summary>
            At the end of the container.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.BaseComponents.FlexContainer.Alignment.AlignStretch">
            <summary>
            Stretch to fit the container.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.BaseComponents.FlexContainer.WrapType">
            <summary>
            Enumeration for the wrap type of the flex container when there is no enough room for
            all the items on one flex line.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.BaseComponents.FlexContainer.WrapType.NoWrap">
            <summary>
            Flex items laid out in single line (shrunk to fit the flex container along the main axis).
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.BaseComponents.FlexContainer.WrapType.Wrap">
            <summary>
            Flex items laid out in multiple lines if needed.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.FlexContainer.ContentDirection">
            <summary>
            The primary direction in which content is ordered.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.FlexContainer.FlexDirection">
            <summary>
            The direction of the main axis which determines the direction that flex items are laid out.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.FlexContainer.FlexWrap">
            <summary>
            Whether the flex items should wrap or not if there is no enough room for them on one flex line.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.FlexContainer.JustifyContent">
            <summary>
            The alignment of flex items when the items do not use all available space on the main axis.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.FlexContainer.AlignItems">
            <summary>
            The alignment of flex items when the items do not use all available space on the cross axis.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.FlexContainer.AlignContent">
            <summary>
            Similar to "alignItems", but it aligns flex lines; so only works when there are multiple lines.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.BaseComponents.ImageView">
            <summary>
            ImageView is a class for displaying an image resource.<br />
            An instance of ImageView can be created using a URL or an image instance.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.BaseComponents.ImageView.ResourceReadyEventArgs">
            <summary>
            Event arguments of resource ready.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.ImageView.ResourceReadyEventArgs.View">
            <summary>
            The view whose resource is ready.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="E:Tizen.NUI.BaseComponents.ImageView.ResourceReady">
            <summary>
            An event for ResourceReady signal which can be used to subscribe or unsubscribe the event handler.<br />
            This signal is emitted after all resources required by a control are loaded and ready.<br />
            Most resources are only loaded when the control is placed on the stage.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.ImageView.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            you can override it to clean-up your own resources.
            </summary>
            <param name="type">DisposeTypes</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.ImageView.#ctor">
            <summary>
            Creates an initialized ImageView.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.ImageView.#ctor(System.String)">
            <summary>
            Creates an initialized ImageView from a URL to an image resource.<br />
            If the string is empty, ImageView will not display anything.<br />
            </summary>
            <param name="url">The URL of the image resource to display.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.ImageView.DownCast(Tizen.NUI.BaseHandle)">
            <summary>
            Downcasts a handle to imageView handle.
            </summary>
            Please do not use! this will be deprecated!
            Instead please use as keyword.
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.ImageView.SetImage(System.String)">
            <summary>
            Sets this ImageView from the given URL.<br />
            If the URL is empty, ImageView will not display anything.<br />
            </summary>
            <param name="url">The URL to the image resource to display.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.ImageView.IsResourceReady">
            <summary>
            Queries if all resources required by a control are loaded and ready.<br />
            Most resources are only loaded when the control is placed on the stage.<br />
            True if the resources are loaded and ready, false otherwise.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.ImageView.Reload">
            <summary>
            Force reloading of the image, all visuals using this image will get the latest one.
            </summary>
            <since_tizen> 5 </since_tizen>        
            This will be released at Tizen.NET API Level 5, so currently this would be used as inhouse API.
        </member>
        <member name="M:Tizen.NUI.BaseComponents.ImageView.Play">
            <summary>
            Play the animated GIF. This is also Default playback mode.
            </summary>
            <since_tizen> 5 </since_tizen>
            This will be released at Tizen.NET API Level 5, so currently this would be used as inhouse API.
        </member>
        <member name="M:Tizen.NUI.BaseComponents.ImageView.Pause">
            <summary>
            Pause the animated GIF.
            </summary>
            <since_tizen> 5 </since_tizen>
            This will be released at Tizen.NET API Level 5, so currently this would be used as inhouse API.
        </member>
        <member name="M:Tizen.NUI.BaseComponents.ImageView.Stop">
            <summary>
            Stop the animated GIF.
            </summary>
            <since_tizen> 5 </since_tizen>
            This will be released at Tizen.NET API Level 5, so currently this would be used as inhouse API.
        </member>
        <member name="P:Tizen.NUI.BaseComponents.ImageView.ResourceUrl">
            <summary>
            ImageView ResourceUrl, type string.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.ImageView.ImageMap">
            <summary>
            This will be deprecated, please use Image instead. <br />
            ImageView ImageMap, type PropertyMap: string if it is a URL, map otherwise.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.ImageView.Image">
            <summary>
            ImageView Image, type PropertyMap
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.ImageView.PreMultipliedAlpha">
            <summary>
            ImageView PreMultipliedAlpha, type Boolean.<br />
            Image must be initialized.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.ImageView.PixelArea">
            <summary>
            ImageView PixelArea, type Vector4 (Animatable property).<br />
            Pixel area is a relative value with the whole image area as [0.0, 0.0, 1.0, 1.0].<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.ImageView.Border">
            <summary>
            The border of the image in the order: left, right, bottom, top.<br />
            If set, ImageMap will be ignored.<br />
            For N-Patch images only.<br />
            Optional.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.ImageView.BorderOnly">
            <summary>
            Gets or sets whether to draw the borders only (if true).<br />
            If not specified, the default is false.<br />
            For N-Patch images only.<br />
            Optional.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.ImageView.SynchronosLoading">
            <summary>
            Gets or sets whether to synchronos loading the resourceurl of image.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.ImageView.OrientationCorrection">
            <summary>
            Gets or sets whether to correct orientation of image automatically.<br />
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.ImageView.LoadingStatus">
            <summary>
            Get the loading state of the visual resource.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.BaseComponents.ImageView.LoadingStatusType">
            <summary>
            Enumeration for LoadingStatus of image.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.BaseComponents.ImageView.LoadingStatusType.Preparing">
            <summary>
            Loading preparing status.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.BaseComponents.ImageView.LoadingStatusType.Ready">
            <summary>
            Loading ready status.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.BaseComponents.ImageView.LoadingStatusType.Failed">
            <summary>
            Loading failed status.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.BaseComponents.Scrollable">
            <summary>
            Base class for derived Scrollables that contains actors that can be scrolled manually
            (via touch) or automatically.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.Scrollable.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            you can override it to clean-up your own resources.
            </summary>
            <param name="type">DisposeTypes</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.BaseComponents.Scrollable.StartedEventArgs">
            <summary>
            The scroll animation started event arguments.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.Scrollable.StartedEventArgs.Vector2">
            <summary>
            Vector2.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.BaseComponents.Scrollable.UpdatedEventArgs">
            <summary>
            The scrollable updated event arguments.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.Scrollable.UpdatedEventArgs.Vector2">
            <summary>
            Vector2.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.BaseComponents.Scrollable.CompletedEventArgs">
            <summary>
            The scroll animation completed event arguments.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.Scrollable.CompletedEventArgs.Vector2">
            <summary>
            Vector2.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="E:Tizen.NUI.BaseComponents.Scrollable.ScrollStarted">
            <summary>
            The ScrollStarted event emitted when the Scrollable has moved (whether by touch or animation).
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="E:Tizen.NUI.BaseComponents.Scrollable.ScrollUpdated">
            <summary>
            The ScrollUpdated event emitted when the Scrollable has moved (whether by touch or animation).
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="E:Tizen.NUI.BaseComponents.Scrollable.ScrollCompleted">
            <summary>
            The ScrollCompleted event emitted when the Scrollable has completed movement
            (whether by touch or animation).
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.BaseComponents.Scrollable.Property">
            <summary>
            Enumeration for the instance of properties belonging to the Scrollable class.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.BaseComponents.Scrollable.Property.OVERSHOOT_EFFECT_COLOR">
            <summary>
            The color of the overshoot effect.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.BaseComponents.Scrollable.Property.OVERSHOOT_ANIMATION_SPEED">
            <summary>
            The speed of overshoot animation in pixels per second.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.BaseComponents.Scrollable.Property.OVERSHOOT_ENABLED">
            <summary>
            Whether to enables or disable scroll overshoot.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.BaseComponents.Scrollable.Property.OVERSHOOT_SIZE">
            <summary>
            The size of the overshoot.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.BaseComponents.Scrollable.Property.SCROLL_TO_ALPHA_FUNCTION">
            <summary>
            scrollToAlphaFunction.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.BaseComponents.Scrollable.Property.SCROLL_RELATIVE_POSITION">
            <summary>
            scrollRelativePosition
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.BaseComponents.Scrollable.Property.SCROLL_POSITION_MIN">
            <summary>
            scrollPositionMin
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.BaseComponents.Scrollable.Property.SCROLL_POSITION_MIN_X">
            <summary>
            scrollPositionMinX.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.BaseComponents.Scrollable.Property.SCROLL_POSITION_MIN_Y">
            <summary>
            scrollPositionMinY.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.BaseComponents.Scrollable.Property.SCROLL_POSITION_MAX">
            <summary>
            scrollPositionMax.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.BaseComponents.Scrollable.Property.SCROLL_POSITION_MAX_X">
            <summary>
            scrollPositionMaxX.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.BaseComponents.Scrollable.Property.SCROLL_POSITION_MAX_Y">
            <summary>
            scrollPositionMaxY.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.BaseComponents.Scrollable.Property.CAN_SCROLL_VERTICAL">
            <summary>
            canScrollVertical
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.BaseComponents.Scrollable.Property.CAN_SCROLL_HORIZONTAL">
            <summary>
            canScrollHorizontal.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.Scrollable.#ctor">
            <summary>
            Create an instance of scrollable.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.Scrollable.OvershootEffectColor">
            <summary>
            Sets and Gets the color of the overshoot effect.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.Scrollable.OvershootAnimationSpeed">
            <summary>
            Sets and Gets the speed of overshoot animation in pixels per second.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.Scrollable.OvershootEnabled">
            <summary>
            Checks if scroll overshoot has been enabled or not.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.Scrollable.OvershootSize">
            <summary>
            Gets and Sets OvershootSize property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.Scrollable.ScrollToAlphaFunction">
            <summary>
            Gets and Sets ScrollToAlphaFunction property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.Scrollable.ScrollRelativePosition">
            <summary>
            Gets and Sets ScrollRelativePosition property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.Scrollable.ScrollPositionMin">
            <summary>
            Gets and Sets ScrollPositionMin property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.Scrollable.ScrollPositionMax">
            <summary>
            Gets and Sets ScrollPositionMax property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.Scrollable.CanScrollVertical">
            <summary>
            Gets and Sets CanScrollVertical property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.Scrollable.CanScrollHorizontal">
            <summary>
            Gets and Sets CanScrollHorizontal property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.BaseComponents.TableView">
            <summary>
            TableView is a layout container for aligning child actors in a grid like layout.<br />
            TableView constraints the X and the Y position and the width and the height of the child actors.<br />
            The Z position and depth are left intact so that the 3D model actors can also be laid out
            in a grid without loosing their depth scaling.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.TableView.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            Dispose
            </summary>
            <param name="type">The dispose type</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.BaseComponents.TableView.CellPosition">
            <summary>
            Class to specify the layout position for the child view.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.BaseComponents.TableView.CellPosition.swigCMemOwn">
            <summary>
            swigCMemOwn
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.BaseComponents.TableView.CellPosition.disposed">
            <summary>
            A Flat to check if it is already disposed.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.TableView.CellPosition.Finalize">
            <summary>
            Dispose.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.TableView.CellPosition.Dispose">
            <summary>
            Dispose.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.TableView.CellPosition.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            Dispose.
            </summary>
            <param name="type">DisposeTypes</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.TableView.CellPosition.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            The constructor.
            </summary>
            <param name="rowIndex">The row index initialized.</param>
            <param name="columnIndex">The column index initialized.</param>
            <param name="rowSpan">The row span initialized.</param>
            <param name="columnSpan">The column span initialized.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.TableView.CellPosition.#ctor(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            The constructor to initialize values to defaults for convenience.
            </summary>
            <param name="rowIndex">The row index initialized.</param>
            <param name="columnIndex">The column index initialized.</param>
            <param name="rowSpan">The row span initialized.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.TableView.CellPosition.#ctor(System.UInt32,System.UInt32)">
            <summary>
            The constructor to initialize values to defaults for convenience.
            </summary>
            <param name="rowIndex">The row index initialized.</param>
            <param name="columnIndex">The column index initialized.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.TableView.CellPosition.#ctor(System.UInt32)">
            <summary>
            The constructor to initialize values to default for convenience.
            </summary>
            <param name="rowIndex">The row index initialized.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.TableView.CellPosition.#ctor">
            <summary>
            The default constructor.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TableView.CellPosition.rowIndex">
            <summary>
            The index of a row.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TableView.CellPosition.columnIndex">
            <summary>
            The index of a column.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TableView.CellPosition.rowSpan">
            <summary>
            The span of a row.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TableView.CellPosition.columnSpan">
            <summary>
            The span of a column.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.TableView.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Creates the TableView view.
            </summary>
            <param name="initialRows">Initial rows for the table.</param>
            <param name="initialColumns">Initial columns for the table.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.TableView.#ctor(Tizen.NUI.BaseComponents.TableView)">
            <summary>
            The Copy constructor. Creates another handle that points to the same real object.
            </summary>
            <param name="handle">Handle to copy from.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.TableView.AddChild(Tizen.NUI.BaseComponents.View,Tizen.NUI.BaseComponents.TableView.CellPosition)">
            <summary>
            Adds a child to the table.<br />
            If the row or column index is outside the table, the table gets resized bigger.<br />
            </summary>
            <param name="child">The child to add.</param>
            <param name="position">The position for the child.</param>
            <returns>True if the addition succeeded, and false if the cell is already occupied.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.TableView.GetChildAt(Tizen.NUI.BaseComponents.TableView.CellPosition)">
            <summary>
            Returns a child from the given layout position.
            </summary>
            <param name="position">The position in the table.</param>
            <returns>Child that was in the cell or an uninitialized handle.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.TableView.RemoveChildAt(Tizen.NUI.BaseComponents.TableView.CellPosition)">
            <summary>
            Removes a child from the given layout position.
            </summary>
            <param name="position">The position for the child to remove.</param>
            <returns>Child that was removed or an uninitialized handle.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.TableView.FindChildPosition(Tizen.NUI.BaseComponents.View,Tizen.NUI.BaseComponents.TableView.CellPosition)">
            <summary>
            Finds the child's layout position.
            </summary>
            <param name="child">The child to search for.</param>
            <param name="position">The position for the child.</param>
            <returns>True if the child was included in this TableView.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.TableView.InsertRow(System.UInt32)">
            <summary>
            Inserts a new row to the given index.
            </summary>
            <param name="rowIndex">The rowIndex of the new row.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.TableView.DeleteRow(System.UInt32)">
            <summary>
            Deletes a row from the given index.<br />
            Removed elements are deleted.<br />
            </summary>
            <param name="rowIndex">The rowIndex of the row to delete.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.TableView.InsertColumn(System.UInt32)">
            <summary>
            Inserts a new column to the given index.
            </summary>
            <param name="columnIndex">The columnIndex of the new column.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.TableView.DeleteColumn(System.UInt32)">
            <summary>
            Deletes a column from the given index.<br />
            Removed elements are deleted.<br />
            </summary>
            <param name="columnIndex">The columnIndex of the column to delete.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.TableView.Resize(System.UInt32,System.UInt32)">
            <summary>
            Resizes the TableView.
            </summary>
            <param name="rows">The rows for the table.</param>
            <param name="columns">The columns for the table.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.TableView.SetCellPadding(Tizen.NUI.Size2D)">
            <summary>
            Sets the horizontal and the vertical padding between cells.
            </summary>
            <param name="padding">Width and height.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.TableView.GetCellPadding">
            <summary>
            Gets the current padding as width and height.
            </summary>
            <returns>The current padding as width and height.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.TableView.SetFitHeight(System.UInt32)">
            <summary>
            Specifies this row as fitting its height to its children.
            </summary>
            <param name="rowIndex">The row to set.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.TableView.IsFitHeight(System.UInt32)">
            <summary>
            Checks if the row is a fit row.
            </summary>
            <param name="rowIndex">The row to check.</param>
            <returns>True if the row is fit.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.TableView.SetFitWidth(System.UInt32)">
            <summary>
            Specifies this column as fitting its width to its children.
            </summary>
            <param name="columnIndex">The column to set.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.TableView.IsFitWidth(System.UInt32)">
            <summary>
            Checks if the column is a fit column.
            </summary>
            <param name="columnIndex">The column to check.</param>
            <returns>True if the column is fit.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.TableView.SetFixedHeight(System.UInt32,System.Single)">
            <summary>
            Sets a row to have a fixed height.<br />
            Setting a fixed height of 0 has no effect.<br />
            </summary>
            <param name="rowIndex">The rowIndex for row with a fixed height.</param>
            <param name="height">The height in world coordinate units.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.TableView.GetFixedHeight(System.UInt32)">
            <summary>
            Gets a row's fixed height.
            </summary>
            <param name="rowIndex">The row index with a fixed height.</param>
            <returns>height The height in world coordinate units.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.TableView.SetRelativeHeight(System.UInt32,System.Single)">
            <summary>
            Sets a row to have a relative height. Relative height means percentage of
            the remainder of the table height after subtracting padding and fixed height rows.<br />
            Setting a relative height of 0 has no effect.<br />
            </summary>
            <param name="rowIndex">The rowIndex for row with a relative height.</param>
            <param name="heightPercentage">The height percentage between 0.0f and 1.0f.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.TableView.GetRelativeHeight(System.UInt32)">
            <summary>
            Gets a row's relative height.
            </summary>
            <param name="rowIndex">The row index with a relative height.</param>
            <returns>Height in percentage units, between 0.0f and 1.0f.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.TableView.SetFixedWidth(System.UInt32,System.Single)">
            <summary>
            Sets a column to have a fixed width.<br />
            Setting a fixed width of 0 has no effect.<br />
            </summary>
            <param name="columnIndex">The columnIndex for column with a fixed width.</param>
            <param name="width">The width in world coordinate units.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.TableView.GetFixedWidth(System.UInt32)">
            <summary>
            Gets a column's fixed width.
            </summary>
            <param name="columnIndex">The column index with a fixed width.</param>
            <returns>Width in world coordinate units.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.TableView.SetRelativeWidth(System.UInt32,System.Single)">
            <summary>
            Sets a column to have a relative width. Relative width means percentage of
            the remainder of the table width after subtracting padding and fixed width columns.<br />
            Setting a relative width of 0 has no effect.<br />
            </summary>
            <param name="columnIndex">The columnIndex for column with a fixed width.</param>
            <param name="widthPercentage">The widthPercentage between 0.0f and 1.0f.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.TableView.GetRelativeWidth(System.UInt32)">
            <summary>
            Gets a column's relative width.
            </summary>
            <param name="columnIndex">The column index with a relative width.</param>
            <returns>Width in percentage units, between 0.0f and 1.0f.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.TableView.SetCellAlignment(Tizen.NUI.BaseComponents.TableView.CellPosition,Tizen.NUI.HorizontalAlignmentType,Tizen.NUI.VerticalAlignmentType)">
            <summary>
            Sets the alignment on a cell.<br />
            Cells without calling this function have the default values of left and top respectively.<br />
            </summary>
            <param name="position">The cell to set alignment on.</param>
            <param name="horizontal">The horizontal alignment.</param>
            <param name="vertical">The vertical alignment.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.BaseComponents.TableView.LayoutPolicy">
            <summary>
            Enumeration for describing how the size of a row or column has been set.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.BaseComponents.TableView.LayoutPolicy.Fixed">
            <summary>
            Fixed with the given value.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.BaseComponents.TableView.LayoutPolicy.Relative">
            <summary>
            Calculated as percentage of the remainder after subtracting Padding and Fixed height/width.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.BaseComponents.TableView.LayoutPolicy.Fill">
            <summary>
             Default policy, get the remainder of the 100% (after subtracting Fixed, Fit and Relative height/ width) divided evenly between 'fill' rows/columns.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.BaseComponents.TableView.LayoutPolicy.Fit">
            <summary>
            Fit around its children.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TableView.Rows">
            <summary>
            The amount of rows in the table.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TableView.Columns">
            <summary>
            The amount of columns in the table.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TableView.CellPadding">
            <summary>
            Padding between cells.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TableView.LayoutRows">
            <summary>
            The number of layout rows.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TableView.LayoutColumns">
            <summary>
            The number of layout columns.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.BaseComponents.TextEditor">
            <summary>
            A control which provides a multi-line editable text editor.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.TextEditor.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            Dispose.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.BaseComponents.TextEditor.TextChangedEventArgs">
            <summary>
            Event arguments that passed via the TextChanged signal.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextEditor.TextChangedEventArgs.TextEditor">
            <summary>
            TextEditor - is the texteditor control which has the text contents changed.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="E:Tizen.NUI.BaseComponents.TextEditor.TextChanged">
            <summary>
            An event for the TextChanged signal which can be used to subscribe or unsubscribe the event handler
            provided by the user. The TextChanged signal is emitted when the text changes.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.BaseComponents.TextEditor.ScrollStateChangedEventArgs">
            <summary>
            Event arguments that passed via the ScrollStateChanged signal.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextEditor.ScrollStateChangedEventArgs.TextEditor">
            <summary>
            TextEditor - is the texteditor control which has the scroll state changed.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextEditor.ScrollStateChangedEventArgs.ScrollState">
            <summary>
            ScrollState - is the texteditor control scroll state.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="E:Tizen.NUI.BaseComponents.TextEditor.ScrollStateChanged">
            <summary>
            Event for the ScrollStateChanged signal which can be used to subscribe or unsubscribe the event handler
            provided by the user. The ScrollStateChanged signal is emitted when the scroll state changes.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.TextEditor.#ctor">
            <summary>
            Creates the TextEditor control.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.TextEditor.GetInputMethodContext">
            <summary>
            Get the InputMethodContext instance.
            </summary>
            <returns>The InputMethodContext instance.</returns>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextEditor.TranslatableText">
            <summary>
            The TranslatableText property.<br />
            The text can set the SID value.<br />
            </summary>
            <exception cref='T:System.ArgumentNullException'>
            ResourceManager about multilingual is null.
            </exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextEditor.TranslatablePlaceholderText">
            <summary>
            The TranslatablePlaceholderText property.<br />
            The text can set the SID value.<br />
            </summary>
            <exception cref='T:System.ArgumentNullException'>
            ResourceManager about multilingual is null.
            </exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextEditor.Text">
            <summary>
            The Text property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextEditor.TextColor">
            <summary>
            The TextColor property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextEditor.FontFamily">
            <summary>
            The FontFamily property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextEditor.FontStyle">
            <summary>
            The FontStyle property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextEditor.PointSize">
            <summary>
            The PointSize property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextEditor.HorizontalAlignment">
            <summary>
            The HorizontalAlignment property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextEditor.ScrollThreshold">
            <summary>
            The ScrollThreshold property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextEditor.ScrollSpeed">
            <summary>
            The ScrollSpeed property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextEditor.PrimaryCursorColor">
            <summary>
            The PrimaryCursorColor property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextEditor.SecondaryCursorColor">
            <summary>
            The SecondaryCursorColor property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextEditor.EnableCursorBlink">
            <summary>
            The EnableCursorBlink property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextEditor.CursorBlinkInterval">
            <summary>
            The CursorBlinkInterval property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextEditor.CursorBlinkDuration">
            <summary>
            The CursorBlinkDuration property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextEditor.CursorWidth">
            <summary>
            The CursorWidth property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextEditor.GrabHandleImage">
            <summary>
            The GrabHandleImage property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextEditor.GrabHandlePressedImage">
            <summary>
            The GrabHandlePressedImage property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextEditor.SelectionHandleImageLeft">
            <summary>
            The SelectionHandleImageLeft property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextEditor.SelectionHandleImageRight">
            <summary>
            The SelectionHandleImageRight property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextEditor.SelectionHandlePressedImageLeft">
            <summary>
            The SelectionHandlePressedImageLeft property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextEditor.SelectionHandlePressedImageRight">
            <summary>
            The SelectionHandlePressedImageRight property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextEditor.SelectionHandleMarkerImageLeft">
            <summary>
            The SelectionHandleMarkerImageLeft property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextEditor.SelectionHandleMarkerImageRight">
            <summary>
            The SelectionHandleMarkerImageRight property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextEditor.SelectionHighlightColor">
            <summary>
            The SelectionHighlightColor property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextEditor.DecorationBoundingBox">
            <summary>
            The DecorationBoundingBox property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextEditor.EnableMarkup">
            <summary>
            The EnableMarkup property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextEditor.InputColor">
            <summary>
            The InputColor property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextEditor.InputFontFamily">
            <summary>
            The InputFontFamily property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextEditor.InputFontStyle">
            <summary>
            The InputFontStyle property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextEditor.InputPointSize">
            <summary>
            The InputPointSize property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextEditor.LineSpacing">
            <summary>
            The LineSpacing property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextEditor.InputLineSpacing">
            <summary>
            The InputLineSpacing property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextEditor.Underline">
            <summary>
            The Underline property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextEditor.InputUnderline">
            <summary>
            The InputUnderline property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextEditor.Shadow">
            <summary>
            The Shadow property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextEditor.InputShadow">
            <summary>
            The InputShadow property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextEditor.Emboss">
            <summary>
            The Emboss property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextEditor.InputEmboss">
            <summary>
            The InputEmboss property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextEditor.Outline">
            <summary>
            The Outline property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextEditor.InputOutline">
            <summary>
            The InputOutline property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextEditor.SmoothScroll">
            <summary>
            The SmoothScroll property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextEditor.SmoothScrollDuration">
            <summary>
            The SmoothScrollDuration property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextEditor.EnableScrollBar">
            <summary>
            The EnableScrollBar property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextEditor.ScrollBarShowDuration">
            <summary>
            The ScrollBarShowDuration property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextEditor.ScrollBarFadeDuration">
            <summary>
            The ScrollBarFadeDuration property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextEditor.PixelSize">
            <summary>
            The PixelSize property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextEditor.LineCount">
            <summary>
            The line count of the text.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextEditor.PlaceholderText">
            <summary>
            The text to display when the TextEditor is empty and inactive.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextEditor.PlaceholderTextColor">
            <summary>
            The Placeholder text color.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextEditor.EnableSelection">
            <summary>
            The EnableSelection property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextEditor.Placeholder">
             <summary>
             The Placeholder property.
             Gets or sets the placeholder: text, color, font family, font style, point size, and pixel size.
             </summary>
             <example>
             The following example demonstrates how to set the placeholder property.
             <code>
             PropertyMap propertyMap = new PropertyMap();
             propertyMap.Add("text", new PropertyValue("Setting Placeholder Text"));
             propertyMap.Add("textFocused", new PropertyValue("Setting Placeholder Text Focused"));
             propertyMap.Add("color", new PropertyValue(Color.Red));
             propertyMap.Add("fontFamily", new PropertyValue("Arial"));
             propertyMap.Add("pointSize", new PropertyValue(12.0f));
            
             PropertyMap fontStyleMap = new PropertyMap();
             fontStyleMap.Add("weight", new PropertyValue("bold"));
             fontStyleMap.Add("width", new PropertyValue("condensed"));
             fontStyleMap.Add("slant", new PropertyValue("italic"));
             propertyMap.Add("fontStyle", new PropertyValue(fontStyleMap));
            
             TextEditor editor = new TextEditor();
             editor.Placeholder = propertyMap;
             </code>
             </example>
             <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextEditor.LineWrapMode">
            <summary>
            The LineWrapMode property.<br />
            The line wrap mode when the text lines over the layout width.<br />
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextEditor.EnableShiftSelection">
            <summary>
            Enables Text selection using Shift key.
            </summary>
            <since_tizen> 5 </since_tizen>
            This will be released at Tizen.NET API Level 5, so currently this would be used as inhouse API.
        </member>
        <member name="T:Tizen.NUI.BaseComponents.TextField">
            <summary>
            A control which provides a single line editable text field.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.TextField.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            Dispose.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.BaseComponents.TextField.TextChangedEventArgs">
            <summary>
            The TextChanged event arguments.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextField.TextChangedEventArgs.TextField">
            <summary>
            TextField.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.BaseComponents.TextField.MaxLengthReachedEventArgs">
            <summary>
            The MaxLengthReached event arguments.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextField.MaxLengthReachedEventArgs.TextField">
            <summary>
            TextField.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="E:Tizen.NUI.BaseComponents.TextField.TextChanged">
            <summary>
            The TextChanged event.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="E:Tizen.NUI.BaseComponents.TextField.MaxLengthReached">
            <summary>
            The MaxLengthReached event.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.TextField.#ctor">
            <summary>
            Creates the TextField control.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.TextField.GetInputMethodContext">
            <summary>
            Get the InputMethodContext instance.
            </summary>
            <returns>The InputMethodContext instance.</returns>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextField.TranslatableText">
            <summary>
            The TranslatableText property.<br />
            The text can set the SID value.<br />
            </summary>
            <exception cref='T:System.ArgumentNullException'>
            ResourceManager about multilingual is null.
            </exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextField.TranslatablePlaceholderText">
            <summary>
            The TranslatablePlaceholderText property.<br />
            The text can set the SID value.<br />
            </summary>
            <exception cref='T:System.ArgumentNullException'>
            ResourceManager about multilingual is null.
            </exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextField.Text">
            <summary>
            The Text property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextField.PlaceholderText">
            <summary>
            The PlaceholderText property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextField.PlaceholderTextFocused">
            <summary>
            The PlaceholderTextFocused property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextField.FontFamily">
            <summary>
            The FontFamily property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextField.FontStyle">
            <summary>
            The FontStyle property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextField.PointSize">
            <summary>
            The PointSize property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextField.MaxLength">
            <summary>
            The MaxLength property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextField.ExceedPolicy">
            <summary>
            The ExceedPolicy property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextField.HorizontalAlignment">
            <summary>
            The HorizontalAlignment property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextField.VerticalAlignment">
            <summary>
            The VerticalAlignment property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextField.TextColor">
            <summary>
            The TextColor property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextField.PlaceholderTextColor">
            <summary>
            The PlaceholderTextColor property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextField.ShadowOffset">
            <summary>
            The ShadowOffset property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextField.ShadowColor">
            <summary>
            The ShadowColor property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextField.PrimaryCursorColor">
            <summary>
            The PrimaryCursorColor property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextField.SecondaryCursorColor">
            <summary>
            The SecondaryCursorColor property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextField.EnableCursorBlink">
            <summary>
            The EnableCursorBlink property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextField.CursorBlinkInterval">
            <summary>
            The CursorBlinkInterval property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextField.CursorBlinkDuration">
            <summary>
            The CursorBlinkDuration property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextField.CursorWidth">
            <summary>
            The CursorWidth property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextField.GrabHandleImage">
            <summary>
            The GrabHandleImage property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextField.GrabHandlePressedImage">
            <summary>
            The GrabHandlePressedImage property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextField.ScrollThreshold">
            <summary>
            The ScrollThreshold property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextField.ScrollSpeed">
            <summary>
            The ScrollSpeed property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextField.SelectionHandleImageLeft">
            <summary>
            The SelectionHandleImageLeft property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextField.SelectionHandleImageRight">
            <summary>
            The SelectionHandleImageRight property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextField.SelectionHandlePressedImageLeft">
            <summary>
            The SelectionHandlePressedImageLeft property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextField.SelectionHandlePressedImageRight">
            <summary>
            The SelectionHandlePressedImageRight property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextField.SelectionHandleMarkerImageLeft">
            <summary>
            The SelectionHandleMarkerImageLeft property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextField.SelectionHandleMarkerImageRight">
            <summary>
            The SelectionHandleMarkerImageRight property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextField.SelectionHighlightColor">
            <summary>
            The SelectionHighlightColor property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextField.DecorationBoundingBox">
            <summary>
            The DecorationBoundingBox property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextField.InputMethodSettings">
            <summary>
            The InputMethodSettings property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextField.InputColor">
            <summary>
            The InputColor property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextField.EnableMarkup">
            <summary>
            The EnableMarkup property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextField.InputFontFamily">
            <summary>
            The InputFontFamily property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextField.InputFontStyle">
            <summary>
            The InputFontStyle property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextField.InputPointSize">
            <summary>
            The InputPointSize property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextField.Underline">
            <summary>
            The Underline property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextField.InputUnderline">
            <summary>
            The InputUnderline property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextField.Shadow">
            <summary>
            The Shadow property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextField.InputShadow">
            <summary>
            The InputShadow property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextField.Emboss">
            <summary>
            The Emboss property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextField.InputEmboss">
            <summary>
            The InputEmboss property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextField.Outline">
            <summary>
            The Outline property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextField.InputOutline">
            <summary>
            The InputOutline property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextField.HiddenInputSettings">
            <summary>
            The HiddenInputSettings property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextField.PixelSize">
            <summary>
            The PixelSize property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextField.EnableSelection">
            <summary>
            The Enable selection property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextField.Placeholder">
             <summary>
             The Placeholder property.
             Gets or sets the placeholder: text, color, font family, font style, point size, and pixel size.
             </summary>
             <example>
             The following example demonstrates how to set the Placeholder property.
             <code>
             PropertyMap propertyMap = new PropertyMap();
             propertyMap.Add("text", new PropertyValue("Setting Placeholder Text"));
             propertyMap.Add("textFocused", new PropertyValue("Setting Placeholder Text Focused"));
             propertyMap.Add("color", new PropertyValue(Color.Red));
             propertyMap.Add("fontFamily", new PropertyValue("Arial"));
             propertyMap.Add("pointSize", new PropertyValue(12.0f));
            
             PropertyMap fontStyleMap = new PropertyMap();
             fontStyleMap.Add("weight", new PropertyValue("bold"));
             fontStyleMap.Add("width", new PropertyValue("condensed"));
             fontStyleMap.Add("slant", new PropertyValue("italic"));
             propertyMap.Add("fontStyle", new PropertyValue(fontStyleMap));
            
             TextField field = new TextField();
             field.Placeholder = propertyMap;
             </code>
             </example>
             <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextField.Ellipsis">
            <summary>
            The Ellipsis property.<br />
            Enable or disable the ellipsis.<br />
            Placeholder PropertyMap is used to add ellipsis to placeholder text.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextField.EnableShiftSelection">
            <summary>
            Enables Text selection using Shift key.
            </summary>
            <since_tizen> 5 </since_tizen>
            This will be released at Tizen.NET API Level 5, so currently this would be used as inhouse API.
        </member>
        <member name="T:Tizen.NUI.BaseComponents.TextLabel">
            <summary>
            A control which renders a short text string.<br />
            Text labels are lightweight, non-editable, and do not respond to the user input.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.TextLabel.DownCast(Tizen.NUI.BaseHandle)">
            <summary>
            Downcasts a handle to textLabel handle
            </summary>
            <param name="handle"></param>
            <returns></returns>
            <since_tizen> 3 </since_tizen>
            Please do not use! this will be deprecated!
            Instead please use as keyword.
        </member>
        <member name="M:Tizen.NUI.BaseComponents.TextLabel.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            Dispose.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.TextLabel.#ctor">
            <summary>
            Creates the TextLabel control.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.TextLabel.#ctor(System.String)">
            <summary>
            Creates the TextLabel control.
            </summary>
            <param name="text">The text to display</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextLabel.TranslatableText">
            <summary>
            The TranslatableText property.<br />
            The text can set the SID value.<br />
            </summary>
            <exception cref='T:System.ArgumentNullException'>
            ResourceManager about multilingual is null.
            </exception>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextLabel.Text">
            <summary>
            The Text property.<br />
            The text to display in the UTF-8 format.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextLabel.FontFamily">
            <summary>
            The FontFamily property.<br />
            The requested font family to use.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextLabel.FontStyle">
            <summary>
            The FontStyle property.<br />
            The requested font style to use.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextLabel.PointSize">
            <summary>
            The PointSize property.<br />
            The size of font in points.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextLabel.MultiLine">
            <summary>
            The MultiLine property.<br />
            The single-line or multi-line layout option.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextLabel.HorizontalAlignment">
            <summary>
            The HorizontalAlignment property.<br />
            The line horizontal alignment.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextLabel.VerticalAlignment">
            <summary>
            The VerticalAlignment property.<br />
            The line vertical alignment.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextLabel.TextColor">
            <summary>
            The TextColor property.<br />
            The color of the text.<br />
            Animation framework can be used to change the color of the text when not using mark up.<br />
            Cannot animate the color when text is auto scrolling.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextLabel.ShadowOffset">
            <summary>
            The ShadowOffset property.<br />
            The drop shadow offset 0 indicates no shadow.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextLabel.ShadowColor">
            <summary>
            The ShadowColor property.<br />
            The color of a drop shadow.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextLabel.UnderlineEnabled">
            <summary>
            The UnderlineEnabled property.<br />
            The underline enabled flag.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextLabel.UnderlineColor">
            <summary>
            The UnderlineColor property.<br />
            Overrides the underline height from font metrics.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextLabel.UnderlineHeight">
            <summary>
            The UnderlineHeight property.<br />
            Overrides the underline height from font metrics.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextLabel.EnableMarkup">
            <summary>
            The EnableMarkup property.<br />
            Whether the mark-up processing is enabled.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextLabel.EnableAutoScroll">
            <summary>
            The EnableAutoScroll property.<br />
            Starts or stops auto scrolling.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextLabel.AutoScrollSpeed">
            <summary>
            The AutoScrollSpeed property.<br />
            Sets the speed of scrolling in pixels per second.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextLabel.AutoScrollLoopCount">
            <summary>
            The AutoScrollLoopCount property.<br />
            Number of complete loops when scrolling enabled.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextLabel.AutoScrollGap">
            <summary>
            The AutoScrollGap property.<br />
            Gap before scrolling wraps.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextLabel.LineSpacing">
            <summary>
            The LineSpacing property.<br />
            The default extra space between lines in points.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextLabel.Underline">
            <summary>
            The Underline property.<br />
            The default underline parameters.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextLabel.Shadow">
            <summary>
            The Shadow property.<br />
            The default shadow parameters.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextLabel.Emboss">
            <summary>
            The Emboss property.<br />
            The default emboss parameters.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextLabel.Outline">
            <summary>
            The Outline property.<br />
            The default outline parameters.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextLabel.PixelSize">
            <summary>
            The PixelSize property.<br />
            The size of font in pixels.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextLabel.Ellipsis">
            <summary>
            The Ellipsis property.<br />
            Enable or disable the ellipsis.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextLabel.AutoScrollLoopDelay">
            <summary>
            The AutoScrollLoopDelay property.<br />
            Do something.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextLabel.AutoScrollStopMode">
            <summary>
            The AutoScrollStopMode property.<br />
            Do something.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextLabel.LineCount">
            <summary>
            The line count of the text.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextLabel.LineWrapMode">
            <summary>
            The LineWrapMode property.<br />
            line wrap mode when the text lines over layout width.<br />
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextLabel.TextDirection">
            <summary>
            The text direction.
            </summary>
            <since_tizen> 5 </since_tizen>
            This will be released at Tizen.NET API Level 5, so currently this would be used as inhouse API.
        </member>
        <member name="P:Tizen.NUI.BaseComponents.TextLabel.VerticalLineAlignment">
            <summary>
            The text vertical line alignment.
            </summary>
            <since_tizen> 5 </since_tizen>
            This will be released at Tizen.NET API Level 5, so currently this would be used as inhouse API.
        </member>
        <member name="T:Tizen.NUI.BaseComponents.VideoView">
            <summary>
            VideoView is a control for video playback and display.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.VideoView.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            Dispose.
            </summary>
            <param name="type">DisposeTypes</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.BaseComponents.VideoView.FinishedEventArgs">
            <summary>
            Event arguments that passed via the finished signal.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.VideoView.FinishedEventArgs.VideoView">
            <summary>
            The view for video playback and display.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="E:Tizen.NUI.BaseComponents.VideoView.Finished">
            <summary>
            Event for the finished signal which can be used to subscribe or unsubscribe the event handler
            The finished signal is emitted when a video playback has finished.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.VideoView.#ctor">
            <summary>
            Creates an initialized VideoView.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.VideoView.#ctor(System.String)">
            <summary>
            Creates an initialized VideoView.<br />
            If the string is empty, VideoView will not display anything.<br />
            </summary>
            <param name="url">The URL of the video resource to display.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.VideoView.Play">
            <summary>
            Starts the video playback.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.VideoView.Pause">
            <summary>
            Pauses the video playback.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.VideoView.Stop">
            <summary>
            Stops the video playback.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.VideoView.Forward(System.Int32)">
            <summary>
            Seeks forward by the specified number of milliseconds.
            </summary>
            <param name="millisecond">The position for forward playback.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.VideoView.Backward(System.Int32)">
            <summary>
            Seeks backward by the specified number of milliseconds.
            </summary>
            <param name="millisecond">The position for backward playback.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.VideoView.Video">
            <summary>
            Video file setting type of PropertyMap.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.VideoView.Looping">
            <summary>
            The looping status, true or false.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.VideoView.Muted">
            <summary>
            The mute status, true or false.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.VideoView.Volume">
            <summary>
            The left and the right volume scalar as float type, PropertyMap with two values ( "left" and "right" ).
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.VideoView.Underlay">
            <summary>
            Video rendering by underlay, true or false.<br />
            This shows video composited underneath the window by the system. This means it may ignore rotation of the video-view.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.VideoView.ResourceUrl">
            <summary>
            Video file URL as string type.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.BaseComponents.View">
            <summary>
            View is the base class for all views.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.View.Add(Tizen.NUI.BaseComponents.View)">
            <summary>
            Adds a child view to this view.
            </summary>
            <seealso cref="M:Tizen.NUI.Container.Add(Tizen.NUI.BaseComponents.View)" />
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.View.Remove(Tizen.NUI.BaseComponents.View)">
            <summary>
            Removes a child view from this View. If the view was not a child of this view, this is a no-op.
            </summary>
            <seealso cref="M:Tizen.NUI.Container.Remove(Tizen.NUI.BaseComponents.View)" />
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.View.GetChildAt(System.UInt32)">
            <summary>
            Retrieves a child view by index.
            </summary>
            <seealso cref="M:Tizen.NUI.Container.GetChildAt(System.UInt32)" />
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.View.GetChildCount">
            <summary>
            Retrieves the number of children held by the view.
            </summary>
            <seealso cref="M:Tizen.NUI.Container.GetChildCount" />
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.View.GetParent">
            <summary>
            Gets the views parent.
            </summary>
            <seealso cref="M:Tizen.NUI.Container.GetParent" />
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.View.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            you can override it to clean-up your own resources.
            </summary>
            <param name="type">DisposeTypes</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="E:Tizen.NUI.BaseComponents.View.FocusGained">
            <summary>
            An event for the KeyInputFocusGained signal which can be used to subscribe or unsubscribe the event handler provided by the user.<br />
            The KeyInputFocusGained signal is emitted when the control gets the key input focus.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="E:Tizen.NUI.BaseComponents.View.FocusLost">
            <summary>
            An event for the KeyInputFocusLost signal which can be used to subscribe or unsubscribe the event handler provided by the user.<br />
            The KeyInputFocusLost signal is emitted when the control loses the key input focus.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.BaseComponents.View.KeyEventArgs">
            <summary>
            Event arguments that passed via the KeyEvent signal.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.View.KeyEventArgs.Key">
            <summary>
            Key - is the key sent to the view.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="E:Tizen.NUI.BaseComponents.View.KeyEvent">
            <summary>
            An event for the KeyPressed signal which can be used to subscribe or unsubscribe the event handler provided by the user.<br />
            The KeyPressed signal is emitted when the key event is received.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="E:Tizen.NUI.BaseComponents.View.Relayout">
            <summary>
            An event for the OnRelayout signal which can be used to subscribe or unsubscribe the event handler.<br />
            The OnRelayout signal is emitted after the size has been set on the view during relayout.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.BaseComponents.View.TouchEventArgs">
            <summary>
            Event arguments that passed via the touch signal.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.View.TouchEventArgs.Touch">
            <summary>
            Touch - contains the information of touch points.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="E:Tizen.NUI.BaseComponents.View.TouchEvent">
            <summary>
            An event for the touched signal which can be used to subscribe or unsubscribe the event handler provided by the user.<br />
            The touched signal is emitted when the touch input is received.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.BaseComponents.View.HoverEventArgs">
            <summary>
            Event arguments that passed via the hover signal.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.View.HoverEventArgs.Hover">
            <summary>
            Hover - contains touch points that represent the points that are currently being hovered or the points where a hover has stopped.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="E:Tizen.NUI.BaseComponents.View.HoverEvent">
            <summary>
            An event for the hovered signal which can be used to subscribe or unsubscribe the event handler provided by the user.<br />
            The hovered signal is emitted when the hover input is received.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.BaseComponents.View.WheelEventArgs">
            <summary>
            Event arguments that passed via the wheel signal.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.View.WheelEventArgs.Wheel">
            <summary>
            WheelEvent - store a wheel rolling type: MOUSE_WHEEL or CUSTOM_WHEEL.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="E:Tizen.NUI.BaseComponents.View.WheelEvent">
            <summary>
            An event for the WheelMoved signal which can be used to subscribe or unsubscribe the event handler provided by the user.<br />
            The WheelMoved signal is emitted when the wheel event is received.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="E:Tizen.NUI.BaseComponents.View.AddedToWindow">
            <summary>
            An event for the OnWindow signal which can be used to subscribe or unsubscribe the event handler.<br />
            The OnWindow signal is emitted after the view has been connected to the window.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="E:Tizen.NUI.BaseComponents.View.RemovedFromWindow">
            <summary>
            An event for the OffWindow signal, which can be used to subscribe or unsubscribe the event handler.<br />
            OffWindow signal is emitted after the view has been disconnected from the window.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.BaseComponents.View.VisibilityChangedEventArgs">
            <summary>
            Event arguments of visibility changed.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.View.VisibilityChangedEventArgs.View">
            <summary>
            The view, or child of view, whose visibility has changed.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.View.VisibilityChangedEventArgs.Visibility">
            <summary>
            Whether the view is now visible or not.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.View.VisibilityChangedEventArgs.Type">
            <summary>
            Whether the view's visible property has changed or a parent's.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="E:Tizen.NUI.BaseComponents.View.VisibilityChanged">
            <summary>
            An event for visibility change which can be used to subscribe or unsubscribe the event handler.<br />
            This signal is emitted when the visible property of this or a parent view is changed.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.BaseComponents.View.LayoutDirectionChangedEventArgs">
            <summary>
            Event arguments of layout direction changed.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.View.LayoutDirectionChangedEventArgs.View">
            <summary>
            The view, or child of view, whose layout direction has changed.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.View.LayoutDirectionChangedEventArgs.Type">
            <summary>
            Whether the view's layout direction property has changed or a parent's.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="E:Tizen.NUI.BaseComponents.View.LayoutDirectionChanged">
            <summary>
            Event for layout direction change which can be used to subscribe/unsubscribe the event handler.<br />
            This signal is emitted when the layout direction property of this or a parent view is changed.<br />
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="E:Tizen.NUI.BaseComponents.View.ResourcesLoaded">
            <summary>
            An event for the ResourcesLoadedSignal signal which can be used to subscribe or unsubscribe the event handler provided by the user.<br />
            This signal is emitted after all resources required by a view are loaded and ready.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.BaseComponents.View.FocusDirection">
            <summary>
            Describes the direction to move the focus towards.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.BaseComponents.View.FocusDirection.Left">
            <summary>
            Move keyboard focus towards the left direction.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.BaseComponents.View.FocusDirection.Right">
            <summary>
            Move keyboard focus towards the right direction.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.BaseComponents.View.FocusDirection.Up">
            <summary>
            Move keyboard focus towards the up direction.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.BaseComponents.View.FocusDirection.Down">
            <summary>
            Move keyboard focus towards the down direction.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.BaseComponents.View.FocusDirection.PageUp">
            <summary>
            Move keyboard focus towards the previous page direction.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.BaseComponents.View.FocusDirection.PageDown">
            <summary>
            Move keyboard focus towards the next page direction.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.View.#ctor">
            <summary>
            Creates a new instance of a view.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.View.HasFocus">
            <summary>
            Queries whether the view has a focus.
            </summary>
            <returns>True if this view has a focus.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.View.SetStyleName(System.String)">
            <summary>
            Sets the name of the style to be applied to the view.
            </summary>
            <param name="styleName">A string matching a style described in a stylesheet.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.View.GetStyleName">
            <summary>
            Retrieves the name of the style to be applied to the view (if any).
            </summary>
            <returns>A string matching a style, or an empty string.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.View.ClearBackground">
            <summary>
            Clears the background.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.View.StyleName">
            <summary>
            The StyleName, type string.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.View.BackgroundColor">
            <summary>
            The mutually exclusive with BACKGROUND_IMAGE and BACKGROUND type Vector4.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.View.AnimateBackgroundColor(System.Object,System.Int32,System.Int32,System.Nullable{Tizen.NUI.AlphaFunction.BuiltinFunctions},System.Object)">
            <summary>
            Creates an animation to animate the background color visual. If there is no
            background visual, creates one with transparent black as it's mixColor.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.View.AnimateColor(System.String,System.Object,System.Int32,System.Int32,System.Nullable{Tizen.NUI.AlphaFunction.BuiltinFunctions},System.Object)">
            <summary>
            Creates an animation to animate the mixColor of the named visual.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.View.BackgroundImage">
            <summary>
            The mutually exclusive with BACKGROUND_COLOR and BACKGROUND type Map.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.View.Background">
            <summary>
            The background of view.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.View.State">
            <summary>
            The current state of the view.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.View.SubState">
            <summary>
            The current sub state of the view.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.View.Tooltip">
            <summary>
            Displays a tooltip
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.View.TooltipText">
            <summary>
            Displays a tooltip as a text.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.View.Flex">
            <summary>
            The Child property of FlexContainer.<br />
            The proportion of the free space in the container, the flex item will receive.<br />
            If all items in the container set this property, their sizes will be proportional to the specified flex factor.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.View.AlignSelf">
            <summary>
            The Child property of FlexContainer.<br />
            The alignment of the flex item along the cross axis, which, if set, overides the default alignment for all items in the container.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.View.FlexMargin">
            <summary>
            The Child property of FlexContainer.<br />
            The space around the flex item.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.View.CellIndex">
            <summary>
            The top-left cell this child occupies, if not set, the first available cell is used.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.View.RowSpan">
            <summary>
            The number of rows this child occupies, if not set, the default value is 1.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.View.ColumnSpan">
            <summary>
            The number of columns this child occupies, if not set, the default value is 1.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.View.CellHorizontalAlignment">
            <summary>
            The horizontal alignment of this child inside the cells, if not set, the default value is 'left'.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.View.CellVerticalAlignment">
            <summary>
            The vertical alignment of this child inside the cells, if not set, the default value is 'top'.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.View.LeftFocusableView">
            <summary>
            The left focusable view.<br />
            This will return null if not set.<br />
            This will also return null if the specified left focusable view is not on a window.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.View.RightFocusableView">
            <summary>
            The right focusable view.<br />
            This will return null if not set.<br />
            This will also return null if the specified right focusable view is not on a window.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.View.UpFocusableView">
            <summary>
            The up focusable view.<br />
            This will return null if not set.<br />
            This will also return null if the specified up focusable view is not on a window.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.View.DownFocusableView">
            <summary>
            The down focusable view.<br />
            This will return null if not set.<br />
            This will also return null if the specified down focusable view is not on a window.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.View.Focusable">
            <summary>
            Whether the view should be focusable by keyboard navigation.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.BaseComponents.View.States">
            <summary>
            Enumeration for describing the states of the view.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.BaseComponents.View.States.Normal">
            <summary>
            The normal state.
            </summary>
        </member>
        <member name="F:Tizen.NUI.BaseComponents.View.States.Focused">
            <summary>
            The focused state.
            </summary>
        </member>
        <member name="F:Tizen.NUI.BaseComponents.View.States.Disabled">
            <summary>
            The disabled state.
            </summary>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.View.CurrentPosition">
            <summary>
             Retrieves the position of the view.<br />
             The coordinates are relative to the view's parent.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.View.Size2D">
            <summary>
            Sets the size of a view for the width and the height.<br />
            Geometry can be scaled to fit within this area.<br />
            This does not interfere with the view's scale factor.<br />
            The views default depth is the minimum of width and height.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.View.CurrentSize">
            <summary>
             Retrieves the size of the view.<br />
             The coordinates are relative to the view's parent.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.View.Opacity">
            <summary>
            Retrieves and sets the view's opacity.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.View.Position2D">
            <summary>
            Sets the position of the view for X and Y.<br />
            By default, sets the position vector between the parent origin and the pivot point (default).<br />
            If the position inheritance is disabled, sets the world position.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.View.ScreenPosition">
            <summary>
            Retrieves the screen postion of the view.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.View.PositionUsesPivotPoint">
            <summary>
            Determines whether the pivot point should be used to determine the position of the view.
            This is true by default.
            </summary>
            <remarks>If false, then the top-left of the view is used for the position.
            Setting this to false will allow scaling or rotation around the anchor-point without affecting the view's position.
            </remarks>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.View.PositionUsesAnchorPoint">
            <summary>
            Please do not use! this will be deprecated.
            </summary>
            Please do not use! this will be deprecated!
            Instead please use PositionUsesPivotPoint.
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.View.IsOnWindow">
            <summary>
            Queries whether the view is connected to the stage.<br />
            When a view is connected, it will be directly or indirectly parented to the root view.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.View.HierarchyDepth">
            <summary>
            Gets the depth in the hierarchy for the view.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.View.SiblingOrder">
            <summary>
            Sets the sibling order of the view so the depth position can be defined within the same parent.
            </summary>
            <remarks>
            Note the initial value is 0. SiblingOrder should be bigger than 0 or equal to 0.
            Raise, Lower, RaiseToTop, LowerToBottom, RaiseAbove, and LowerBelow will override the sibling order.
            The values set by this property will likely change.
            </remarks>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.View.NaturalSize">
            <summary>
            Returns the natural size of the view.
            </summary>
            <remarks>
            Deriving classes stipulate the natural size and by default a view has a zero natural size.
            </remarks>
            /// Please do not use! this will be deprecated!
            Instead please use NaturalSize2D.
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.View.NaturalSize2D">
            <summary>
            Returns the natural size (Size2D) of the view.
            </summary>
            <remarks>
            Deriving classes stipulate the natural size and by default a view has a zero natural size.
            </remarks>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.View.Layout">
            <summary>
            Set the layout on this control.
            </summary>
            <remarks>
            </remarks>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.View.Show">
            <summary>
            Shows the view.
            </summary>
            <remarks>
            This is an asynchronous method.
            </remarks>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.View.Hide">
            <summary>
            Hides the view.
            </summary>
            <remarks>
            This is an asynchronous method.
            If the view is hidden, then the view and its children will not be rendered.
            This is regardless of the individual visibility of the children, i.e., the view will only be rendered if all of its parents are shown.
            </remarks>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.View.RaiseToTop">
            <summary>
            Raises the view above all other views.
            </summary>
            <remarks>
            Sibling order of views within the parent will be updated automatically.
            Once a raise or lower API is used, that view will then have an exclusive sibling order independent of insertion.
            </remarks>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.View.LowerToBottom">
            <summary>
            Lowers the view to the bottom of all views.
            </summary>
            <remarks>
            The sibling order of views within the parent will be updated automatically.
            Once a raise or lower API is used that view will then have an exclusive sibling order independent of insertion.
            </remarks>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.View.IsResourceReady">
            <summary>
            Queries if all resources required by a view are loaded and ready.
            </summary>
            <remarks>Most resources are only loaded when the control is placed on the stage.
            </remarks>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.View.RaiseAbove(Tizen.NUI.BaseComponents.View)">
            <summary>
            Raises the view to above the target view.
            </summary>
            <remarks>The sibling order of views within the parent will be updated automatically.
            Views on the level above the target view will still be shown above this view.
            Raising this view above views with the same sibling order as each other will raise this view above them.
            Once a raise or lower API is used that view will then have an exclusive sibling order independent of insertion.
            </remarks>
            <param name="target">Will be raised above this view.</param>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.View.LowerBelow(Tizen.NUI.BaseComponents.View)">
            <summary>
            Lowers the view to below the target view.
            </summary>
            <remarks>The sibling order of views within the parent will be updated automatically.
            Lowering this view below views with the same sibling order as each other will lower this view above them.
            Once a raise or lower API is used that view will then have an exclusive sibling order independent of insertion.
            </remarks>
            <param name="target">Will be lowered below this view.</param>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.View.GetLayer">
            <summary>
            Gets the parent layer of this view.If a view has no parent, this method does nothing.
            </summary>
            <pre>The view has been initialized. </pre>
            <returns>the parent layer of view </returns>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.View.Unparent">
            <summary>
            Removes a view from its parent view or layer. If a view has no parent, this method does nothing.
            </summary>
            <pre>The (child) view has been initialized. </pre>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.View.FindChildByName(System.String)">
            <summary>
            Search through this view's hierarchy for a view with the given name.
            The view itself is also considered in the search.
            </summary>
            <pre>The view has been initialized.</pre>
            <param name="viewName">The name of the view to find.</param>
            <returns>A handle to the view if found, or an empty handle if not.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.View.ScreenToLocal(System.Single@,System.Single@,System.Single,System.Single)">
            <summary>
            Converts screen coordinates into the view's coordinate system using the default camera.
            </summary>
            <pre>The view has been initialized.</pre>
            <remarks>The view coordinates are relative to the top-left(0.0, 0.0, 0.5).</remarks>
            <param name="localX">On return, the X-coordinate relative to the view.</param>
            <param name="localY">On return, the Y-coordinate relative to the view.</param>
            <param name="screenX">The screen X-coordinate.</param>
            <param name="screenY">The screen Y-coordinate.</param>
            <returns>True if the conversion succeeded.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.View.SetSizeModeFactor(Tizen.NUI.Vector3)">
            <summary>
            Sets the relative to parent size factor of the view.<br />
            This factor is only used when ResizePolicy is set to either:
            ResizePolicy::SIZE_RELATIVE_TO_PARENT or ResizePolicy::SIZE_FIXED_OFFSET_FROM_PARENT.<br />
            This view's size is set to the view's size multiplied by or added to this factor, depending on ResizePolicy.<br />
            </summary>
            <pre>The view has been initialized.</pre>
            <param name="factor">A Vector3 representing the relative factor to be applied to each axis.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.View.GetHeightForWidth(System.Single)">
            <summary>
            Calculates the height of the view given a width.<br />
            The natural size is used for default calculation.<br />
            Size 0 is treated as aspect ratio 1:1.<br />
            </summary>
            <param name="width">The width to use.</param>
            <returns>The height based on the width.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.View.GetWidthForHeight(System.Single)">
            <summary>
            Calculates the width of the view given a height.<br />
            The natural size is used for default calculation.<br />
            Size 0 is treated as aspect ratio 1:1.<br />
            </summary>
            <param name="height">The height to use.</param>
            <returns>The width based on the height.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.View.GetRelayoutSize(Tizen.NUI.DimensionType)">
            <summary>
            Return the amount of size allocated for relayout.
            </summary>
            <param name="dimension">The dimension to retrieve.</param>
            <returns>Return the size.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.View.SetPadding(Tizen.NUI.PaddingType)">
            <summary>
            Set the padding for the view.
            </summary>
            <param name="padding">Padding for the view.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.View.GetPadding(Tizen.NUI.PaddingType)">
            <summary>
            Return the value of padding for the view.
            </summary>
            <param name="paddingOut">the value of padding for the view</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.View.AddRenderer(Tizen.NUI.Renderer)">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.View.GetRendererAt(System.UInt32)">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.View.RemoveRenderer(Tizen.NUI.Renderer)">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.View.RemoveRenderer(System.UInt32)">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.View.ParentOrigin">
            <summary>
            Gets or sets the origin of a view within its parent's area.<br />
            This is expressed in unit coordinates, such that (0.0, 0.0, 0.5) is the top-left corner of the parent, and (1.0, 1.0, 0.5) is the bottom-right corner.<br />
            The default parent-origin is ParentOrigin.TopLeft (0.0, 0.0, 0.5).<br />
            A view's position is the distance between this origin and the view's anchor-point.<br />
            </summary>
            <pre>The view has been initialized.</pre>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.View.PivotPoint">
            <summary>
            Gets or sets the anchor-point of a view.<br />
            This is expressed in unit coordinates, such that (0.0, 0.0, 0.5) is the top-left corner of the view, and (1.0, 1.0, 0.5) is the bottom-right corner.<br />
            The default pivot point is PivotPoint.Center (0.5, 0.5, 0.5).<br />
            A view position is the distance between its parent-origin and this anchor-point.<br />
            A view's orientation is the rotation from its default orientation, the rotation is centered around its anchor-point.<br />
            <pre>The view has been initialized.</pre>
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.View.SizeWidth">
            <summary>
            Gets or sets the size width of the view.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.View.SizeHeight">
            <summary>
            Gets or sets the size height of the view.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.View.Position">
            <summary>
            Gets or sets the position of the view.<br />
            By default, sets the position vector between the parent origin and pivot point (default).<br />
            If the position inheritance is disabled, sets the world position.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.View.PositionX">
            <summary>
            Gets or sets the position X of the view.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.View.PositionY">
            <summary>
            Gets or sets the position Y of the view.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.View.PositionZ">
            <summary>
            Gets or sets the position Z of the view.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.View.WorldPosition">
            <summary>
            Gets or sets the world position of the view.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.View.Orientation">
            <summary>
            Gets or sets the orientation of the view.<br />
            The view's orientation is the rotation from its default orientation, and the rotation is centered around its anchor-point.<br />
            </summary>
            <remarks>This is an asynchronous method.</remarks>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.View.WorldOrientation">
            <summary>
            Gets or sets the world orientation of the view.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.View.Scale">
            <summary>
            Gets or sets the scale factor applied to the view.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.View.ScaleX">
            <summary>
            Gets or sets the scale X factor applied to the view.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.View.ScaleY">
            <summary>
            Gets or sets the scale Y factor applied to the view.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.View.ScaleZ">
            <summary>
            Gets or sets the scale Z factor applied to the view.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.View.WorldScale">
            <summary>
            Gets the world scale of the view.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.View.Visibility">
            <summary>
            Retrieves the visibility flag of the view.
            </summary>
            <remarks>
            If the view is not visible, then the view and its children will not be rendered.
            This is regardless of the individual visibility values of the children, i.e., the view will only be rendered if all of its parents have visibility set to true.
            </remarks>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.View.WorldColor">
            <summary>
            Gets the view's world color.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.View.Name">
            <summary>
            Gets or sets the view's name.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.View.ChildCount">
            <summary>
            Get the number of children held by the view.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.View.ID">
            <summary>
            Gets the view's ID.
            Readonly
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.View.Sensitive">
            <summary>
            Gets or sets the status of whether the view should emit touch or hover signals.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.View.LeaveRequired">
            <summary>
            Gets or sets the status of whether the view should receive a notification when touch or hover motion events leave the boundary of the view.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.View.InheritOrientation">
            <summary>
            Gets or sets the status of whether a child view inherits it's parent's orientation.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.View.InheritScale">
            <summary>
            Gets or sets the status of whether a child view inherits it's parent's scale.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.View.DrawMode">
            <summary>
            Gets or sets the status of how the view and its children should be drawn.<br />
            Not all views are renderable, but DrawMode can be inherited from any view.<br />
            If an object is in a 3D layer, it will be depth-tested against other objects in the world, i.e., it may be obscured if other objects are in front.<br />
            If DrawMode.Overlay2D is used, the view and its children will be drawn as a 2D overlay.<br />
            Overlay views are drawn in a separate pass, after all non-overlay views within the layer.<br />
            For overlay views, the drawing order is with respect to tree levels of views, and depth-testing will not be used.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.View.SizeModeFactor">
            <summary>
            Gets or sets the relative to parent size factor of the view.<br />
            This factor is only used when ResizePolicyType is set to either: ResizePolicyType.SizeRelativeToParent or ResizePolicyType.SizeFixedOffsetFromParent.<br />
            This view's size is set to the view's size multiplied by or added to this factor, depending on ResizePolicyType.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.View.WidthResizePolicy">
            <summary>
            Gets or sets the width resize policy to be used.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.View.HeightResizePolicy">
            <summary>
            Gets or sets the height resize policy to be used.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.View.SizeScalePolicy">
            <summary>
            Gets or sets the policy to use when setting size with size negotiation.<br />
            Defaults to SizeScalePolicyType.UseSizeSet.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.View.WidthForHeight">
            <summary>
             Gets or sets the status of whether the width size is dependent on the height size.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.View.HeightForWidth">
            <summary>
            Gets or sets the status of whether the height size is dependent on the width size.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.View.Padding">
            <summary>
            Gets or sets the padding for use in layout.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.View.MinimumSize">
            <summary>
            Gets or sets the minimum size the view can be assigned in size negotiation.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.View.MaximumSize">
            <summary>
            Gets or sets the maximum size the view can be assigned in size negotiation.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.View.InheritPosition">
            <summary>
            Gets or sets whether a child view inherits it's parent's position.<br />
            Default is to inherit.<br />
            Switching this off means that using position sets the view's world position, i.e., translates from the world origin (0,0,0) to the pivot point of the view.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.View.ClippingMode">
            <summary>
            Gets or sets the clipping behavior (mode) of it's children.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.View.RendererCount">
            <summary>
            Gets the number of renderers held by the view.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.View.AnchorPoint">
            <summary>
            [Obsolete("Please do not use! this will be deprecated")]
            </summary>
            <since_tizen> 3 </since_tizen>
            Please do not use! this will be deprecated!
            Instead please use PivotPoint.
        </member>
        <member name="P:Tizen.NUI.BaseComponents.View.Size">
            <summary>
            [Obsolete("Please do not use! this will be deprecated")]
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.View.Parent">
            <summary>
            "Please DO NOT use! This will be deprecated! Please use 'Container GetParent() for derived class' instead!"
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.View.InheritLayoutDirection">
            <summary>
            Gets/Sets whether inherit parent's the layout Direction.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.View.LayoutDirection">
            <summary>
            Gets/Sets the layout Direction.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.View.Margin">
            <summary>
            Gets or sets the Margin for use in layout.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.View.PaddingEX">
            <summary>
            [Obsolete("Please do not use! this will be deprecated")]
            </summary>
            Please do not use! this will be deprecated!
            Instead please use Padding.
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.View.DoAction(System.Int32,System.Int32,Tizen.NUI.PropertyValue)">
            <summary>
            Perform an action on a visual registered to this view. <br />
            Visuals will have actions, this API is used to perform one of these actions with the given attributes.
            </summary>
            <param name="propertyIndexOfVisual">The Property index of the visual.</param>
            <param name="propertyIndexOfActionId">The action to perform.  See Visual to find supported actions.</param>
            <param name="attributes">Optional attributes for the action.</param>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.BaseComponents.ViewLayoutDirectionType">
            <summary>
            The View layout Direction type.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.BaseComponents.ViewLayoutDirectionType.LTR">
            <summary>
            Left to right.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.BaseComponents.ViewLayoutDirectionType.RTL">
            <summary>
            Right to left.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.BaseComponents.VisualView">
            <summary>
            A visual view control if a user adds any visual to it.
            </summary>
            <example>
            Example:
            <code>
            VisualView _visualView = new VisualView();
            ImageVisualMap imageVisualMap1 = new ImageVisualMap();
            imageVisualMap1.URL = "./NUISample/res/images/image-1.jpg";
            imageVisualMap1.VisualSize = new Vector2( 300.0f, 300.0f );
            imageVisualMap1.Offset = new Vector2( 50.0f, 50.0f );
            imageVisualMap1.OffsetSizeMode = new Vector4( 1.0f, 1.0f, 1.0f, 1.0f );
            imageVisualMap1.Origin = AlignType.TOP_BEGIN;
            imageVisualMap1.AnchorPoint = AlignType.TOP_BEGIN;
            _visualView.AddVisual("imageVisual1", imageVisualMap1);
            </code>
            </example>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.VisualView.#ctor">
            <summary>
            Constructor.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.VisualView.OnInitialize">
            <summary>
            Overrides the parent method.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.VisualView.AddVisual(System.String,Tizen.NUI.VisualMap)">
            <summary>
            Adds or updates a visual to visual view.
            </summary>
            <param name="visualName">The name of a visual to add. If a name is added to an existing visual name, the visual will be replaced.</param>
            <param name="visualMap">The property map of a visual to create.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.VisualView.RemoveVisual(System.String)">
            <summary>
            Removes a visual by name.
            </summary>
            <param name="visualName">The name of a visual to remove.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BaseComponents.VisualView.NumberOfVisuals">
            <summary>
            Gets the total number of visuals which are added by users.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.VisualView.RemoveAll">
            <summary>
            Removes all visuals of the visual view.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.VisualView.OnRelayout(Tizen.NUI.Vector2,Tizen.NUI.RelayoutContainer)">
            <summary>
            Overrides the method of OnRelayout() for CustomView class.<br />
            Called after the size negotiation has been finished for this control.<br />
            The control is expected to assign this given size to itself or its children.<br />
            Should be overridden by derived classes if they need to layout actors differently after certain operations like add or remove actors, resize, or after changing specific properties.<br />
            </summary>
            <remarks>As this function is called from inside the size negotiation algorithm, you cannot call RequestRelayout (the call would just be ignored).</remarks>
            <param name="size">The allocated size.</param>
            <param name="container">The control should add actors to this container that it is not able to allocate a size for.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.VisualView.AnimateVisual(Tizen.NUI.VisualMap,System.String,System.Object,System.Int32,System.Int32,System.Nullable{Tizen.NUI.AlphaFunction.BuiltinFunctions},System.Object)">
            <summary>
            Creates a visual animation (transition) with the input parameters.
            </summary>
            <param name="target">The visual map to animation.</param>
            <param name="property">The property of visual to animation.</param>
            <param name="destinationValue">The destination value of property after animation.</param>
            <param name="startTime">The start time of visual animation.</param>
            <param name="endTime">The end time of visual animation.</param>
            <param name="alphaFunction">The alpha function of visual animation.</param>
            <param name="initialValue">The initial property value of visual animation.</param>
            <returns>Animation instance</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.VisualView.AnimateVisualAdd(Tizen.NUI.VisualMap,System.String,System.Object,System.Int32,System.Int32,System.Nullable{Tizen.NUI.AlphaFunction.BuiltinFunctions},System.Object)">
            <summary>
            Adds a group visual animation (transition) map with the input parameters.
            </summary>
            <param name="target">The visual map to animation.</param>
            <param name="property">The property of visual to animation.</param>
            <param name="destinationValue">The destination value of property after animation.</param>
            <param name="startTime">The start time of visual animation.</param>
            <param name="endTime">The end time of visual animation.</param>
            <param name="alphaFunction">The alpha function of visual animation.</param>
            <param name="initialValue">The initial property value of visual animation.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.VisualView.AnimateVisualAddFinish">
            <summary>
            Finishes to add a visual animation (transition) map and creates a transition animation.
            </summary>
            <returns>Animation instance.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseComponents.VisualView.VisualAnimate(Tizen.NUI.VisualAnimator)">
            <summary>
            temporary fix to pass TCT.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.VisibilityChangeType">
            <summary>
            The visibility change type.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.VisibilityChangeType.SELF">
            <summary>
            The visibility of the actor itself has changed.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.VisibilityChangeType.PARENT">
            <summary>
            The visibility of a parent has changed.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.BaseHandle">
            <summary>
            BaseHandle is a handle to an internal Dali resource.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.BaseHandle.swigCMemOwn">
            <summary>
            swigCMemOwn
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.BaseHandle.disposed">
            <summary>
            A Flat to check if it is already disposed.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseHandle.Finalize">
            <summary>
            Dispose.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseHandle.Dispose">
            <summary>
            Dispose.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseHandle.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            Dispose.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseHandle.op_True(Tizen.NUI.BaseHandle)">
            <summary>
            Returns the bool value true to indicate that an operand is true and returns false otherwise.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseHandle.op_False(Tizen.NUI.BaseHandle)">
            <summary>
            Returns the bool false  to indicate that an operand is false and returns true otherwise.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseHandle.op_Explicit(Tizen.NUI.BaseHandle)~System.Boolean">
            <summary>
            Explicit conversion from Handle to bool.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseHandle.op_Equality(Tizen.NUI.BaseHandle,Tizen.NUI.BaseHandle)">
            <summary>
            Equality operator
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseHandle.op_Inequality(Tizen.NUI.BaseHandle,Tizen.NUI.BaseHandle)">
            <summary>
            Inequality operator. Returns Null if either operand is Null
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseHandle.op_BitwiseAnd(Tizen.NUI.BaseHandle,Tizen.NUI.BaseHandle)">
            <summary>
            Logical AND operator.<br />
            It's possible when doing a  operator this function (opBitwiseAnd) is never called due to short circuiting.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseHandle.op_BitwiseOr(Tizen.NUI.BaseHandle,Tizen.NUI.BaseHandle)">
            <summary>
            Logical OR operator for ||.<br />
            It's possible when doing a || this function (opBitwiseOr) is never called due to short circuiting.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseHandle.op_LogicalNot(Tizen.NUI.BaseHandle)">
            <summary>
            Logical ! operator
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseHandle.Equals(System.Object)">
            <summary>
            Equals
            </summary>
            <param name="o">The object should be compared.</param>
            <returns>True if equal.</returns>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseHandle.GetHashCode">
            <summary>
            Gets the the hash code of this baseHandle.
            </summary>
            <returns>The Hash Code.</returns>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseHandle.#ctor">
            <summary>
            Create an instance of BaseHandle.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseHandle.#ctor(Tizen.NUI.BaseHandle)">
            <summary>
            Create an instance of BaseHandle.
            </summary>
            <param name="handle">The BaseHandle instance.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseHandle.DoAction(System.String,Tizen.NUI.PropertyMap)">
            <summary>
            Performs an action on this object with the given action name and attributes.
            </summary>
            <param name="actionName">The command for the action.</param>
            <param name="attributes">The list of attributes for the action.</param>
            <returns>The action is performed by the object or not.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseHandle.GetTypeName">
            <summary>
            Returns the type name for the Handle.<br />
            Will return an empty string if the typename does not exist. This will happen for types that
            have not registered with type-registry.
            </summary>
            <returns>The type name. Empty string if the typename does not exist.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseHandle.GetTypeInfo(Tizen.NUI.TypeInfo)">
            <summary>
            Returns the type info for the Handle.<br />
            </summary>
            <param name="info">The type information.</param>
            <returns>True If get the type info.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseHandle.Reset">
            <summary>
            Resets the handle.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseHandle.EqualTo(Tizen.NUI.BaseHandle)">
            <summary>
            To check the BaseHandle instance is equal or not.
            </summary>
            <param name="rhs">The baseHandle instance.</param>
            <returns>True If equal.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseHandle.NotEqualTo(Tizen.NUI.BaseHandle)">
            <summary>
            To check the BaseHandle instance is equal or not.
            </summary>
            <param name="rhs">The baseHandle instance.</param>
            <returns>True If not equal.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseHandle.HasBody">
            <summary>
            To check the BaseHandle instance has body or not.
            </summary>
            <returns>True If the baseHandle instance has body.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BaseHandle.IsEqual(Tizen.NUI.BaseHandle)">
            <summary>
            To check the BaseHandle instance is equal or not.
            </summary>
            <param name="rhs">The baseHandle instance.</param>
            <returns>True If equal.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.Color">
            <summary>
            The Color class.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Color.swigCMemOwn">
            <summary>
            swigCMemOwn
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Color.disposed">
            <summary>
            A Flat to check if it is already disposed.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Color.Finalize">
            <summary>
            Dispose.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Color.Dispose">
            <summary>
            To make a color instance be disposed.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Color.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            Dispose.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Color.op_Addition(Tizen.NUI.Color,Tizen.NUI.Color)">
            <summary>
            The addition operator.
            </summary>
            <param name="arg1">The first value.</param>
            <param name="arg2">The second value.</param>
            <returns>The color containing the result of the addition.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Color.op_Subtraction(Tizen.NUI.Color,Tizen.NUI.Color)">
            <summary>
            The subtraction operator.
            </summary>
            <param name="arg1">The first value.</param>
            <param name="arg2">The second value.</param>
            <returns>The color containing the result of the subtraction.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Color.op_UnaryNegation(Tizen.NUI.Color)">
            <summary>
            The unary negation operator.
            </summary>
            <param name="arg1">The target value.</param>
            <returns>The color containg the negation.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Color.op_Multiply(Tizen.NUI.Color,Tizen.NUI.Color)">
            <summary>
            The multiplication operator.
            </summary>
            <param name="arg1">The first value.</param>
            <param name="arg2">The second value.</param>
            <returns>The color containing the result of the multiplication.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Color.op_Multiply(Tizen.NUI.Color,System.Single)">
            <summary>
            The multiplication operator.
            </summary>
            <param name="arg1">The first value.</param>
            <param name="arg2">The second value.</param>
            <returns>The color containing the result of the multiplication.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Color.op_Division(Tizen.NUI.Color,Tizen.NUI.Color)">
            <summary>
            The division operator.
            </summary>
            <param name="arg1">The first value.</param>
            <param name="arg2">The second value.</param>
            <returns>The color containing the result of the division.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Color.op_Division(Tizen.NUI.Color,System.Single)">
            <summary>
            The division operator.
            </summary>
            <param name="arg1">The first value.</param>
            <param name="arg2">The second value.</param>
            <returns>The color containing the result of the division.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Color.Item(System.UInt32)">
            <summary>
            The array subscript operator overload.
            </summary>
            <param name="index">The subscript index.</param>
            <returns>The float at the given index.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Color.#ctor">
            <summary>
            Default constructor
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Color.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            The constructor.
            </summary>
            <param name="r">The red component.</param>
            <param name="g">The green component.</param>
            <param name="b">The blue component.</param>
            <param name="a">The alpha component.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Color.#ctor(System.Single[])">
            <summary>
            The conversion constructor from an array of four floats.
            </summary>
            <param name="array">array Array of R,G,B,A.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Color.EqualTo(Tizen.NUI.Color)">
            <summary>
            Checks if two color classes are same.
            </summary>
            <param name="rhs">A color to be compared.</param>
            <returns>If two colors are are same, then true.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Color.NotEqualTo(Tizen.NUI.Color)">
            <summary>
            Checks if two color classes are different.
            </summary>
            <param name="rhs">A color to be compared.</param>
            <returns>If two colors are are different, then true.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Color.R">
            <summary>
            The red component.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Color.G">
            <summary>
            The green component.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Color.B">
            <summary>
            The blue component.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Color.A">
            <summary>
            The alpha component.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Color.Black">
            <summary>
            Gets the black colored Color class.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Color.White">
            <summary>
            Gets the white colored Color class.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Color.Red">
            <summary>
            Gets the red colored Color class.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Color.Green">
            <summary>
            Gets the green colored Color class.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Color.Blue">
            <summary>
            Gets the blue colored Color class.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Color.Yellow">
            <summary>
            Gets the yellow colored Color class.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Color.Magenta">
            <summary>
            Gets the magenta colored Color class.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Color.Cyan">
            <summary>
            Gets the cyan colored Color class.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Color.Transparent">
            <summary>
            Gets the  transparent colored Color class.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Color.op_Implicit(Tizen.NUI.Color)~Tizen.NUI.Vector4">
            <summary>
            Converts the Color class to Vector4 class implicitly.
            </summary>
            <param name="color">A color to be converted to Vector4</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Color.op_Implicit(Tizen.NUI.Vector4)~Tizen.NUI.Color">
            <summary>
            Converts Vector4 class to Color class implicitly.
            </summary>
            <param name="vec">A Vector4 to be converted to color.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.Container">
            <summary>
            The Container is an abstract class to be inherited from by classes that desire to have views
            added to them.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Container.Children">
            <summary>
            List of children of Container.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Container.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            Dispose.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Container.Add(Tizen.NUI.BaseComponents.View)">
            <summary>
            Adds a child view to this Container.
            </summary>
            <pre>This Container (the parent) has been initialized. The child view has been initialized. The child view is not the same as the parent view.</pre>
            <post>The child will be referenced by its parent. This means that the child will be kept alive, even if the handle passed into this method is reset or destroyed.</post>
            <remarks>If the child already has a parent, it will be removed from the old parent and reparented to this view. This may change child's position, color, scale, etc. as it now inherits them from this view.</remarks>
            <param name="view">The child view to add.</param>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Container.Remove(Tizen.NUI.BaseComponents.View)">
            <summary>
            Removes a child view from this view. If the view was not a child of this view, this is a no-op.
            </summary>
            <pre>This View(the parent) has been initialized. The child view is not the same as the parent view.</pre>
            <param name="view">The view to remove</param>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Container.GetChildAt(System.UInt32)">
            <summary>
            Retrieves the child view by the index.
            </summary>
            <pre>The view has been initialized.</pre>
            <param name="index">The index of the child to retrieve.</param>
            <returns>The view for the given index or empty handle if children are not initialized.</returns>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Container.GetParent">
            <summary>
            Gets the parent of this container.
            </summary>
            <pre>The child container has been initialized.</pre>
            <returns>The parent container.</returns>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Container.GetChildCount">
            <summary>
            Gets the number of children for this container.
            </summary>
            <pre>The container has been initialized.</pre>
            <returns>The number of children.</returns>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Container.Parent">
            <summary>
            Gets the parent container.
            Read only
            </summary>
            <pre>The child container has been initialized.</pre>
            <returns>The parent container.</returns>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Container.ChildCount">
            <summary>
            Gets the number of children for this container.
            Read only
            </summary>
            <pre>The container has been initialized.</pre>
            <returns>The number of children.</returns>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.Spin">
            <summary>
            Spins the CustomView class.
             </summary>
             <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Spin.#ctor">
            <summary>
            Creates an initialized spin.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Spin.OnInitialize">
            <summary>
            Overrides the method of OnInitialize() for the CustomView class.<br />
            This method is called after the control has been initialized.<br />
            Derived classes should do any second phase initialization by overriding this method.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Spin.GetNaturalSize">
            <summary>
            Overrides the method of GetNaturalSize() for the CustomView class.<br />
            Returns the natural size of the actor.<br />
            </summary>
            <returns> Natural size of this spin itself.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Spin.TextFieldKeyInputFocusGained(System.Object,System.EventArgs)">
            <summary>
            An event handler is used when the TextField in the spin gets the key focus.<br />
            Make sure when the current spin that takes input focus, also takes the keyboard focus.<br />
            For example, when you tap the spin directly.<br />
            </summary>
            <param name="source">Sender of this event.</param>
            <param name="e">Event arguments.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Spin.TextFieldKeyInputFocusLost(System.Object,System.EventArgs)">
            <summary>
            An event handler when the TextField in the spin looses it's key focus.
            </summary>
            <param name="source"></param>
            <param name="e"></param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Spin.GetNextFocusableView(Tizen.NUI.BaseComponents.View,Tizen.NUI.BaseComponents.View.FocusDirection,System.Boolean)">
            <summary>
            Overrides the method of GetNextKeyboardFocusableView() for the CustomView class.<br />
            Gets the next key focusable view in this view towards the given direction.<br />
            A view needs to override this function in order to support two-dimensional key navigation.<br />
            </summary>
            <param name="currentFocusedView">The current focused view.</param>
            <param name="direction">The direction to move the focus towards.</param>
            <param name="loopEnabled">Whether the focus movement should be looped within the control.</param>
            <returns>The next keyboard focusable view in this control or an empty handle if no view can be focused.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Spin.Value">
            <summary>
            Value to be set in the spin.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Spin.MinValue">
            <summary>
            Minimum value of the spin value.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Spin.MaxValue">
            <summary>
            Maximum value of the spin value.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Spin.Step">
            <summary>
            Increasing, decreasing step of the spin value when up or down keys are pressed.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Spin.WrappingEnabled">
            <summary>
            Wrapping enabled status.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Spin.TextPointSize">
            <summary>
            Text point size of the spin value.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Spin.TextColor">
            <summary>
            The color of the spin value.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Spin.MaxTextLength">
            <summary>
            Maximum text lengh of the spin value.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Spin.SpinText">
            <summary>
            Reference of TextField of the spin.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Spin.IndicatorImage">
            <summary>
            Show indicator image, for example, up or down arrow image.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ScriptableProperty">
             <summary>
             Adds this attribute to any property belonging to a view (control) you want to be scriptable from JSON.
             </summary>
             <remarks>
             Example:
            
             class MyView : public CustomView
             {
              [ScriptableProperty()]
              public int MyProperty
              {
               get
               {
                 return _myProperty;
               }
               set
               {
                _myProperty = value;
               }
              }
             }
            
             Internally the following occurs for property registration ( this only occurs once per Type, not per Instance):
            
             - The controls static constructor should call ViewRegistry.Register() (only called once for the lifecycle of the app).
             - Within Register() the code will introspect the Controls properties, looking for the ScriptableProperty() attribute.
             - For every property with the ScriptableProperty() attribute, TypeRegistration.RegisterProperty is called.
             - TypeRegistration.RegisterProperty calls in to DALi C++ Code Dali::CSharpTypeRegistry::RegisterProperty().
             - DALi C++ now knows the existance of the property and will try calling SetProperty, if it finds the property in a JSON file (loaded using builder).
            
              The DALi C# example:
            
              class MyView : public CustomView
              {
            
                [ScriptableProperty()]
                public double Hours
                {
                 get { return seconds / 3600; }
                 set { seconds = value * 3600; }
                }
              }
            
              Equivalent code in DALi C++:
              in MyControl.h
              class MyControl : public Control
              {
                struct Property
                {
                  enum
                  {
                    HOURS =  Control::CONTROL_PROPERTY_END_INDEX + 1
                  }
                }
              }
            
             in MyControl-impl.cpp
            
             DALI_TYPE_REGISTRATION_BEGIN( Toolkit::MyControl, Toolkit::Control, Create );
             DALI_PROPERTY_REGISTRATION( Toolkit, MyControl, "Hours",  INTEGER, DISABLED                     )
             DALI_TYPE_REGISTRATION_END()
             </remarks>
            
            
             <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ScriptableProperty.ScriptableType">
            <summary>
            Rhe enum of ScriptableType
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.ScriptableProperty.ScriptableType.Default">
            <summary>
            Read Writable, non-animatable property, event thread only.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.ScriptableProperty.type">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ScriptableProperty.#ctor(Tizen.NUI.ScriptableProperty.ScriptableType)">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.CustomViewRegistry">
             <summary>
             View the Registry singleton.
             Used for registering controls and any scriptable properties they have (see ScriptableProperty).
            
             Internal Design from C# to C++
            
             - Each custom C# view should have it's static constructor called before any JSON file is loaded.
             Static constructors for a class will only run once ( they are run per control type, not per instance).
             Example of running a static constructor:
                  System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor (typeof(Spin).TypeHandle);
             Inside the static constructor the control should register it's type with the ViewRegistry
             For example:
            
              static Spin()
              {
                 ViewRegistry.Instance.Register(CreateInstance, typeof(Spin) );
              }
            
              The control should also provide a CreateInstance function, which gets passed to the ViewRegistry.
              // Eventually it will be called if DALi Builderfinds a Spin control in a JSON file.
              static CustomView CreateInstance()
              {
                return new Spin();
              }
            
            
            
             The DALi C++ equivalent of this is
            
              TypeRegistration mType( typeid(Toolkit::Spin), typeid(Toolkit::Control), CreateInstance );
            
            
            
             </summary>
             <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.CustomViewRegistry.instance">
            <summary>
            ViewRegistry is a singleton.
            </summary>
        </member>
        <member name="F:Tizen.NUI.CustomViewRegistry._constructorMap">
            <summary>
             Maps the name of a custom view to a create instance function
             For example, given a string "Spin", we can get a function used to create the Spin View.
            </summary>
        </member>
        <member name="F:Tizen.NUI.CustomViewRegistry._daliPropertyTypeLookup">
            <summary>
            Lookup table to match C# types to DALi types, used for the automatic property registration.
            </summary>
        </member>
        <member name="M:Tizen.NUI.CustomViewRegistry.CreateControl(System.IntPtr)">
            <summary>
            Called directly from DALi C++ type registry to create a control (view) using no marshalling.
            </summary>
            <returns>Pointer to the control (views) handle.</returns>
            <param name="cPtrControlName">C pointer to the control (view) name.</param>
        </member>
        <member name="P:Tizen.NUI.CustomViewRegistry.Instance">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.CustomViewRegistry.Register(System.Func{Tizen.NUI.BaseComponents.CustomView},System.Type)">
             <summary>
             The function which registers a view and all it's scriptable properties with DALi's type registry.
             Means the view can be created or configured from a JSON script.
            
             The function uses introspection to scan a views C# properties, then selects the ones with
            [ScriptableProperty] attribute to be registered.
             Example of a Spin view registering itself:
               static Spin()
             {
               ViewRegistry registers control type with DALi type registery
               also uses introspection to find any properties that need to be registered with type registry
               ViewRegistry.Instance.Register(CreateInstance, typeof(Spin) );
             }
            
             </summary>
             <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.CustomViewRegistry.GetPropertyValue(System.IntPtr,System.String)">
            <summary>
            Gets a property value from a view.
            </summary>
        </member>
        <member name="M:Tizen.NUI.CustomViewRegistry.SetPropertyValue(System.IntPtr,System.String,System.IntPtr)">
            <summary>
            Sets a property value on a view.
            </summary>
        </member>
        <member name="T:Tizen.NUI.Degree">
            <summary>
            An angle in degrees.<br />
            This reduces ambiguity when using methods which accept angles in degrees or radians.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Degree.swigCMemOwn">
            <summary>
            swigCMemOwn.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Degree.disposed">
            <summary>
            A Flat to check if it is already disposed.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Degree.Finalize">
            <summary>
            Dispose.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Degree.Dispose">
            <summary>
            Dispose.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Degree.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            Dispose.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Degree.#ctor">
            <summary>
            The constructor.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Degree.#ctor(System.Single)">
            <summary>
            Creates an angle in degrees.
            </summary>
            <param name="value">The initial value in degrees.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Degree.#ctor(Tizen.NUI.Radian)">
            <summary>
            Creates an angle in degrees from a radian.
            </summary>
            <param name="value">The initial value in radians.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Degree.Value">
            <summary>
            The value of degree.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.DirectionBias">
            <summary>
            The Direction Bias type.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.DirectionBias.DirectionBiasLeft">
            <summary>
            Bias scroll snap to Left.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.DirectionBias.DirectionBiasNone">
            <summary>
            Don't bias scroll snap.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.DirectionBias.DirectionBiasRight">
            <summary>
            Bias scroll snap to Right.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.Extents">
            <summary>
            Extents class describing the a collection of uint16_t.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Extents.swigCMemOwn">
            <summary>
            Extents class
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Extents.disposed">
            <summary>
            A Flat to check if it is already disposed.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Extents.Finalize">
            <summary>
            Destructor.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Extents.Dispose">
            <summary>
            To make a Extents instance be disposed.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Extents.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            To make a Extents instance be disposed.
            </summary>
            <param name="type">Extents type</param>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Extents.#ctor">
            <summary>
            Constructor.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Extents.#ctor(Tizen.NUI.Extents)">
            <summary>
            Constructor.
            </summary>
            <param name="copy">A reference to the copied Extents.</param>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Extents.#ctor(System.UInt16,System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Constructor.
            <param name="start">Start extent.</param>
            <param name="end">End extent.</param>
            <param name="top">Top extent.</param>
            <param name="bottom">Bottom extent.</param>
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Extents.EqualTo(Tizen.NUI.Extents)">
            <summary>
            Equality operator.
            </summary>
            <param name="rhs">The Extents to test against.</param>
            <returns>True if the extents are not equal.</returns>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Extents.NotEqualTo(Tizen.NUI.Extents)">
            <summary>
            Inequality operator.
            </summary>
            <param name="rhs">The Extents to test against.</param>
            <returns>True if the extents are not equal.</returns>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Extents.Start">
            <summary>
            The Start extent.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Extents.End">
            <summary>
            The End extend.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Extents.Top">
            <summary>
            The Top extend.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Extents.Bottom">
            <summary>
            The Bottom Extend.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.FilterModeType">
            <summary>
            The filter mode type.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.FilterModeType.NONE">
            <summary>
            Use GL defaults (minification NEAREST_MIPMAP_LINEAR, magnification LINEAR).
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.FilterModeType.DEFAULT">
            <summary>
            Use Dali defaults (minification LINEAR, magnification LINEAR).
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.FilterModeType.NEAREST">
            <summary>
            Filter nearest.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.FilterModeType.LINEAR">
            <summary>
            Filter linear.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.FilterModeType.NEAREST_MIPMAP_NEAREST">
            <summary>
            Filter nearest mipmap nearest.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.FilterModeType.LINEAR_MIPMAP_NEAREST">
            <summary>
            Filter linear mipmap nearest.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.FilterModeType.NEAREST_MIPMAP_LINEAR">
            <summary>
            Filter nearest mipmap linear.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.FilterModeType.LINEAR_MIPMAP_LINEAR">
            <summary>
            Filter linear mipmap linear.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.FocusManager">
            <summary>
            Provides the functionality of handling keyboard navigation and maintaining the two-dimensional keyboard focus chain.<br />
            It provides functionality of setting the focus and moving the focus in four directions( i.e., left, right, up, and down).<br />
            It also draws a highlight for the focused view and sends an event when the focus is changed.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.FocusManager.PreFocusChangeEventArgs">
            <summary>
             Event arguments that passed via the PreFocusChange signal.
             </summary>
             <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.FocusManager.PreFocusChangeEventArgs.CurrentView">
            <summary>
            The current focus view.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.FocusManager.PreFocusChangeEventArgs.ProposedView">
            <summary>
            The  proposed view.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.FocusManager.PreFocusChangeEventArgs.Direction">
            <summary>
            The focus move direction.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="E:Tizen.NUI.FocusManager.PreFocusChange">
            <summary>
            PreFocusChange will be triggered before the focus is going to be changed.<br />
            The FocusManager makes the best guess for which view to focus towards the given direction, but applications might want to change that.<br />
            By connecting with this event, they can check the proposed view to focus and return a different view if they wish.<br />
            This event is only triggered when the navigation key is pressed and KeyboardFocusManager tries to move the focus automatically.<br />
            It won't be emitted for focus movement by calling the SetCurrentFocusView directly.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.FocusManager.FocusChangedEventArgs">
            <summary>
             Event arguments that passed via the FocusChanged signal.
             </summary>
             <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.FocusManager.FocusChangedEventArgs.CurrentView">
            <summary>
            The current focus view.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.FocusManager.FocusChangedEventArgs.NextView">
            <summary>
            The next focus view.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="E:Tizen.NUI.FocusManager.FocusChanged">
            <summary>
            The FocusGroupChanged will be triggered after the current focused view has been changed.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.FocusManager.FocusGroupChangedEventArgs">
            <summary>
             Event arguments that passed via the FocusGroupChanged signal.
             </summary>
             <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.FocusManager.FocusGroupChangedEventArgs.CurrentView">
            <summary>
            The current focus view.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.FocusManager.FocusGroupChangedEventArgs.ForwardDirection">
            <summary>
            The forward direction.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="E:Tizen.NUI.FocusManager.FocusGroupChanged">
            <summary>
            The FocusGroupChanged will be triggered when the focus group has been changed.<br />
            If the current focus group has a parent layout control, the FocusManager will make the best guess for the next focus group to move the focus to in the given direction (forward or backward).<br />
            If not, the application has to set the new focus.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.FocusManager.FocusedViewActivatedEventArgs">
            <summary>
             Event arguments that passed via the FocusedViewEnterKey signal.
             </summary>
             <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.FocusManager.FocusedViewActivatedEventArgs.View">
            <summary>
            View.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="E:Tizen.NUI.FocusManager.FocusedViewActivated">
            <summary>
            The FocusedViewActivated will be triggered when the current focused view has the enter key pressed on it.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.FocusManager.SetCurrentFocusView(Tizen.NUI.BaseComponents.View)">
            <summary>
            Moves the keyboard focus to the given view.<br />
            Only one view can be focused at the same time.<br />
            The view must be in the stage already and keyboard focusable.<br />
            </summary>
            <param name="view">The view to be focused.</param>
            <returns>Whether the focus is successful or not.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.FocusManager.GetCurrentFocusView">
            <summary>
            Gets the current focused view.
            </summary>
            <returns>A handle to the current focused view or an empty handle if no view is focused.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.FocusManager.MoveFocus(Tizen.NUI.BaseComponents.View.FocusDirection)">
            <summary>
            Moves the focus to the next focusable view in the focus chain in the given direction (according to the focus traversal order).
            </summary>
            <param name="direction">The direction of the focus movement.</param>
            <returns>True if the movement was successful.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.FocusManager.ClearFocus">
            <summary>
            Clears the focus from the current focused view if any, so that no view is focused in the focus chain.<br />
            It will emit the FocusChanged event without the current focused view.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.FocusManager.MoveFocusBackward">
            <summary>
            Move the focus to previous focused view.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.FocusManager.FocusGroupLoop">
            <summary>
            Gets or sets the status of whether the focus movement should be looped within the same focus group.<br />
            The focus movement is not looped by default.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.FocusManager.SetAsFocusGroup(Tizen.NUI.BaseComponents.View,System.Boolean)">
            <summary>
            Sets whether the view is a focus group that can limit the scope of the focus movement to its child views in the focus chain.<br />
            Layout controls set themselves as focus groups by default.<br />
            </summary>
            <param name="view">The view to be set as a focus group.</param>
            <param name="isFocusGroup">Whether to set the view as a focus group or not.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.FocusManager.IsFocusGroup(Tizen.NUI.BaseComponents.View)">
            <summary>
            Checks whether the view is set as a focus group or not.
            </summary>
            <param name="view">The view to be checked.</param>
            <returns>Whether the view is set as a focus group.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.FocusManager.GetFocusGroup(Tizen.NUI.BaseComponents.View)">
            <summary>
            Returns the closest ancestor of the given view that is a focus group.
            </summary>
            <param name="view">The view to be checked for its focus group.</param>
            <returns>The focus group the given view belongs to or an empty handle if the given view.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.FocusManager.FocusIndicator">
            <summary>
            Gets or sets the focus indicator view.<br />
            This will replace the default focus indicator view in the FocusManager and will be added to the focused view as a highlight.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.FocusManager.SetCustomAlgorithm(Tizen.NUI.FocusManager.ICustomFocusAlgorithm)">
            <summary>
            Provides the implementation of a custom focus algorithm interface to allow the application to define the focus logic.<br />
            </summary>
            <param name="arg0">The user's implementation of ICustomFocusAlgorithm.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.FocusManager.Instance">
            <summary>
            Gets the singleton of the FocusManager object.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.FocusManager.ICustomFocusAlgorithm">
            <summary>
            ICustomFocusAlgorithm is used to provide the custom keyboard focus algorithm for retrieving the next focusable view.<br />
            The application can implement the interface and override the keyboard focus behavior.<br />
            If the focus is changing within a layout container, then the layout container is queried first to provide the next focusable view.<br />
            If this does not provide a valid view, then the Keyboard FocusManager will check focusable properties to determine the next focusable actor.<br />
            If focusable properties are not set, then the keyboard FocusManager calls the GetNextFocusableView() method of this interface.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.FocusManager.ICustomFocusAlgorithm.GetNextFocusableView(Tizen.NUI.BaseComponents.View,Tizen.NUI.BaseComponents.View,Tizen.NUI.BaseComponents.View.FocusDirection)">
            <summary>
            Get the next focus actor.
            </summary>
            <param name="current">The current focus view.</param>
            <param name="proposed">The proposed focus view</param>
            <param name="direction">The focus move direction</param>
            <returns>The next focus actor.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.FocusManager.FocusedViewEnterKeyEventArgs">
            <summary>
            Please do not use! this will be deprecated
            </summary>
            <since_tizen> 3 </since_tizen>
            Please do not use! this will be deprecated.
            Instead please use FocusedViewActivatedEventArgs.
        </member>
        <member name="P:Tizen.NUI.FocusManager.FocusedViewEnterKeyEventArgs.View">
            <summary>
            View.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="E:Tizen.NUI.FocusManager.FocusedViewEnterKeyPressed">
            <summary>
            [Obsolete("Please do not use! this will be deprecated")]
            </summary>
            <since_tizen> 3 </since_tizen>
            Please do not use! this will be deprecated!
            Instead please use FocusedViewActivated.
        </member>
        <member name="M:Tizen.NUI.FocusManager.OnFocusedViewEnterKey2(System.IntPtr)">
            <summary>
            Please do not use! this will be deprecated!
            </summary>
            Please do not use! this will be deprecated!
            Instead please use OnFocusedViewEnterKey.
        </member>
        <member name="T:Tizen.NUI.FontClient">
            <summary>
            FontClient provides access to font information and resources.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.FontClient.GlyphBufferData.disposed">
            <summary>
            A Flat to check if it is already disposed.
            </summary>
        </member>
        <member name="P:Tizen.NUI.FontClient.Instance">
            <summary>
            Gets the singleton of the FontClient object.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.FontClient.ResetSystemDefaults">
            <summary>
            Called when the user changes the system defaults.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.FontClient.GetPointSize(System.UInt32)">
            <summary>
            Retrieves the font point size of a given font id.
            </summary>
            <param name="id">The font identifier.</param>
            <returns>The point size in 26.6 fractional points.</returns>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.FontClient.IsCharacterSupportedByFont(System.UInt32,System.UInt32)">
            <summary>
            Whether the given character is supported by the font.
            </summary>
            <param name="fontId">The id of the font.</param>
            <param name="character">The character.</param>
            <returns>True if the character is supported by the font.</returns>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.FontClient.FindDefaultFont(System.UInt32,System.UInt32,System.Boolean)">
            <summary>
            Find the default font for displaying a UTF-32 character.
            </summary>
            <param name="charcode">The character for which a font is needed.</param>
            <param name="requestedPointSize">The point size in 26.6 fractional points; the default point size is 12*64.</param>
            <param name="preferColor">True if a color font is preferred.</param>
            <returns>A valid font identifier, or zero if the font does not exist.</returns>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.FontClient.FindDefaultFont(System.UInt32,System.UInt32)">
            <summary>
            Find the default font for displaying a UTF-32 character.
            </summary>
            <param name="charcode">The character for which a font is needed.</param>
            <param name="requestedPointSize">The point size in 26.6 fractional points; the default point size is 12*64.</param>
            <returns>A valid font identifier, or zero if the font does not exist.</returns>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.FontClient.FindDefaultFont(System.UInt32)">
            <summary>
            Find the default font for displaying a UTF-32 character.
            </summary>
            <param name="charcode">The character for which a font is needed.</param>
            <returns>A valid font identifier, or zero if the font does not exist.</returns>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.FontClient.GetFontId(System.String,System.UInt32,System.UInt32)">
            <summary>
            Retrieve the unique identifier for a font..
            </summary>
            <param name="path">The path to a font file.</param>
            <param name="requestedPointSize">The point size in 26.6 fractional points; the default point size is 12*64.</param>
            <param name="faceIndex">The index of the font face.</param>
            <returns>A valid font identifier, or zero if the font does not exist.</returns>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.FontClient.GetFontId(System.String,System.UInt32)">
            <summary>
            Retrieve the unique identifier for a font..
            </summary>
            <param name="path">The path to a font file.</param>
            <param name="requestedPointSize">The point size in 26.6 fractional points; the default point size is 12*64.</param>
            <returns>A valid font identifier, or zero if the font does not exist.</returns>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.FontClient.GetFontId(System.String)">
            <summary>
            Retrieve the unique identifier for a font..
            </summary>
            <param name="path">The path to a font file.</param>
            <returns>A valid font identifier, or zero if the font does not exist.</returns>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.FontClient.IsScalable(System.String)">
            <summary>
            Check to see if a font is scalable.
            </summary>
            <param name="path">Path The path to a font file.</param>
            <returns>True if scalable.</returns>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.FontClient.AddCustomFontDirectory(System.String)">
            <summary>
            Add custom fonts directory.
            </summary>
            <param name="path">Path to the fonts directory.</param>
            <returns>True if the fonts can be added.</returns>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.Geometry">
            <summary>
            Geometry is handle to an object that can be used to define a geometric elements.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Geometry.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            Dispose.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Geometry.#ctor">
            <summary>
            Create an instance of Geometry.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Geometry.AddVertexBuffer(Tizen.NUI.PropertyBuffer)">
            <summary>
            Adds a PropertyBuffer to be used as source of geometry vertices.
            </summary>
            <param name="vertexBuffer">PropertyBuffer to be used as source of geometry vertices.</param>
            <returns>Index of the newly added buffer.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Geometry.GetNumberOfVertexBuffers">
            <summary>
            Retrieves the number of vertex buffers that have been added to this geometry.
            </summary>
            <returns>Number of vertex buffers that have been added to this geometry.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Geometry.RemoveVertexBuffer(System.UInt32)">
            <summary>
            Removes a vertex buffer.
            </summary>
            <param name="index">Index to the vertex buffer to remove.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Geometry.SetIndexBuffer(System.UInt16[],System.UInt32)">
            <summary>
            Sets a the index data to be used as a source of indices for the geometry
            Setting this buffer will cause the geometry to be rendered using indices.
            </summary>
            <param name="indices">Array of indices.</param>
            <param name="count">Number of indices in the array.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Geometry.SetType(Tizen.NUI.Geometry.Type)">
            <summary>
            Sets the type of primitives this geometry contains.
            </summary>
            <param name="geometryType">Array of indices.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Geometry.GetType">
            <summary>
            Gets the type of primitives this geometry contains.
            </summary>
            <returns>Type of primitives this geometry contains.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.Geometry.Type">
            <summary>
            Enumeration for the description of the type of geometry,
            used to determine how the coordinates will be used.
            </summary>
            <returns>Type of primitives this geometry contains.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Geometry.Type.POINTS">
            <summary>
            Individual points.
            </summary>
        </member>
        <member name="F:Tizen.NUI.Geometry.Type.LINES">
            <summary>
            Individual lines (made of 2 points each).
            </summary>
        </member>
        <member name="F:Tizen.NUI.Geometry.Type.LINE_LOOP">
            <summary>
            A strip of lines (made of 1 point each) which also joins the first and last point.
            </summary>
        </member>
        <member name="F:Tizen.NUI.Geometry.Type.LINE_STRIP">
            <summary>
            A strip of lines (made of 1 point each).
            </summary>
        </member>
        <member name="F:Tizen.NUI.Geometry.Type.TRIANGLES">
            <summary>
            Individual triangles (made of 3 points each).
            </summary>
        </member>
        <member name="F:Tizen.NUI.Geometry.Type.TRIANGLE_FAN">
            <summary>
            A fan of triangles around a centre point (after the first triangle, following triangles need only 1 point).
            </summary>
        </member>
        <member name="F:Tizen.NUI.Geometry.Type.TRIANGLE_STRIP">
            <summary>
            A strip of triangles (after the first triangle, following triangles need only 1 point).
            </summary>
        </member>
        <member name="T:Tizen.NUI.Gesture">
            <summary>
            Base structure for different gestures that an application can receive.<br />
            A Gesture is an event that is produced from a combination of several touch events
            in a particular order or within a certain time frame (for example, pinch).<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Gesture.swigCMemOwn">
            <summary>
            swigCMemOwn.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Gesture.disposed">
            <summary>
            A Flat to check if it is already disposed.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Gesture.Finalize">
            <summary>
            Dispose.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Gesture.Dispose">
            <summary>
            Dispose.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Gesture.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            Dispose.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Gesture.Type">
            <summary>
            The gesture type.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Gesture.State">
            <summary>
            The gesture state.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Gesture.Time">
            <summary>
            The time the gesture took place.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Gesture.#ctor(Tizen.NUI.Gesture)">
            <summary>
            The Copy constructor.
            </summary>
            <param name="rhs">A reference to the copied handle</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.Gesture.GestureType">
            <summary>
            Enumeration for type of gesture.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Gesture.GestureType.Pinch">
            <summary>
            When two touch points move away or towards each other.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Gesture.GestureType.Pan">
            <summary>
            When the user drags their finger(s) in a particular direction.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Gesture.GestureType.Tap">
            <summary>
            When the user taps the screen.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Gesture.GestureType.LongPress">
            <summary>
             When the user continues to touch the same area on the screen for the device configured time.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.Gesture.StateType">
            <summary>
            Enumeration for state of the gesture.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Gesture.StateType.Clear">
            <summary>
            There is no state associated with this gesture.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Gesture.StateType.Started">
            <summary>
            The touched points on the screen have moved enough to be considered a gesture.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Gesture.StateType.Continuing">
            <summary>
            The gesture is continuing.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Gesture.StateType.Finished">
            <summary>
            The user has lifted a finger or touched an additional point on the screen.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Gesture.StateType.Cancelled">
            <summary>
            The gesture has been cancelled.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Gesture.StateType.Possible">
            <summary>
             A gesture is possible.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.Hover">
            <summary>
            Hover events are a collection of points at a specific moment in time.<br />
            When a multi-event occurs, each point represents the points that are currently being
            hovered or the points where a hover has stopped.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Hover.swigCMemOwn">
            <summary>
            swigCMemOwn
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Hover.disposed">
            <summary>
            A Flat to check if it is already disposed.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Hover.Finalize">
            <summary>
            Dispose.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Hover.Dispose">
            <summary>
            Dispose.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Hover.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            Dispose.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Hover.Time">
            <summary>
            The time (in ms) that the hover event occurred.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Hover.GetDeviceId(System.UInt32)">
            <summary>
            Returns the ID of the device used for the point specified.<br />
            Each point has a unique device ID which specifies the device used for that
            point. This is returned by this method.<br />
            </summary>
            <param name="point">The point required.</param>
            <returns>The device ID of this point.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Hover.GetState(System.UInt32)">
            <summary>
            Retrieves the state of the point specified.
            </summary>
            <param name="point">The point required.</param>
            <returns>The state of the point specified.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Hover.GetHitView(System.UInt32)">
            <summary>
            Retrieves the view that was underneath the point specified.
            </summary>
            <param name="point">The point required.</param>
            <returns>The view that was underneath the point specified.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Hover.GetLocalPosition(System.UInt32)">
            <summary>
            Retrieves the coordinates relative to the top-left of the hit-view at the point specified.
            </summary>
            <param name="point">The point required.</param>
            <returns>The coordinates relative to the top-left of the hit-view of the point specified.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Hover.GetScreenPosition(System.UInt32)">
            <summary>
            Retrieves the coordinates relative to the top-left of the screen of the point specified.
            </summary>
            <param name="point">The point required.</param>
            <returns>The coordinates relative to the top-left of the screen of the point specified.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Hover.#ctor">
            <summary>
            The default constructor.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Hover.#ctor(System.UInt32)">
            <summary>
            The constructor.
            </summary>
            <param name="time">The time the event occurred.</param>
        </member>
        <member name="M:Tizen.NUI.Hover.GetPointCount">
            <summary>
            Returns the total number of points.
            </summary>
            <returns>Total number of points.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ImageLoading">
            <summary>
            Loading an image.
            </summary>
            <since_tizen> 5 </since_tizen>
            This will be released at Tizen.NET API Level 5, so currently this would be used as inhouse API.
        </member>
        <member name="M:Tizen.NUI.ImageLoading.LoadImageFromFile(System.String,Tizen.NUI.Size2D,Tizen.NUI.FittingModeType,Tizen.NUI.SamplingModeType,System.Boolean)">
            <summary>
            Load an image synchronously from local file.
            </summary>
            <param name="url">The URL of the image file to load.</param>
            <param name="size">The width and height to fit the loaded image to, 0.0 means whole image.</param>
            <param name="fittingMode">The method used to fit the shape of the image before loading to the shape defined by the size parameter.</param>
            <param name="samplingMode">The filtering method used when sampling pixels from the input image while fitting it to desired size.</param>
            <param name="orientationCorrection">Reorient the image to respect any orientation metadata in its header.</param>
            <returns>Handle to the loaded PixelBuffer object or an empty handle in case loading failed.</returns>
            <since_tizen> 5 </since_tizen>
            This will be released at Tizen.NET API Level 5, so currently this would be used as inhouse API.
        </member>
        <member name="M:Tizen.NUI.ImageLoading.LoadImageFromFile(System.String,Tizen.NUI.Size2D,Tizen.NUI.FittingModeType,Tizen.NUI.SamplingModeType)">
            <summary>
            Load an image synchronously from local file.
            </summary>
            <param name="url">The URL of the image file to load.</param>
            <param name="size">The width and height to fit the loaded image to, 0.0 means whole image.</param>
            <param name="fittingMode">The method used to fit the shape of the image before loading to the shape defined by the size parameter.</param>
            <param name="samplingMode">The filtering method used when sampling pixels from the input image while fitting it to desired size.</param>
            <returns>Handle to the loaded PixelBuffer object or an empty handle in case loading failed.</returns>
            <since_tizen> 5 </since_tizen>
            This will be released at Tizen.NET API Level 5, so currently this would be used as inhouse API.
        </member>
        <member name="M:Tizen.NUI.ImageLoading.LoadImageFromFile(System.String,Tizen.NUI.Size2D,Tizen.NUI.FittingModeType)">
            <summary>
            Load an image synchronously from local file.
            </summary>
            <param name="url">The URL of the image file to load.</param>
            <param name="size">The width and height to fit the loaded image to, 0.0 means whole image.</param>
            <param name="fittingMode">The method used to fit the shape of the image before loading to the shape defined by the size parameter.</param>
            <returns>Handle to the loaded PixelBuffer object or an empty handle in case loading failed.</returns>
            <since_tizen> 5 </since_tizen>
            This will be released at Tizen.NET API Level 5, so currently this would be used as inhouse API.
        </member>
        <member name="M:Tizen.NUI.ImageLoading.LoadImageFromFile(System.String,Tizen.NUI.Size2D)">
            <summary>
            Load an image synchronously from local file.
            </summary>
            <param name="url">The URL of the image file to load.</param>
            <param name="size">The width and height to fit the loaded image to, 0.0 means whole image.</param>
            <returns>Handle to the loaded PixelBuffer object or an empty handle in case loading failed.</returns>
            <since_tizen> 5 </since_tizen>
            This will be released at Tizen.NET API Level 5, so currently this would be used as inhouse API.
        </member>
        <member name="M:Tizen.NUI.ImageLoading.LoadImageFromFile(System.String)">
            <summary>
            Load an image synchronously from local file.
            </summary>
            <param name="url">The URL of the image file to load.</param>
            <returns>Handle to the loaded PixelBuffer object or an empty handle in case loading failed.</returns>
            <since_tizen> 5 </since_tizen>
            This will be released at Tizen.NET API Level 5, so currently this would be used as inhouse API.
        </member>
        <member name="M:Tizen.NUI.ImageLoading.GetClosestImageSize(System.String,Tizen.NUI.Size2D,Tizen.NUI.FittingModeType,Tizen.NUI.SamplingModeType,System.Boolean)">
            <summary>
            Determine the size of an image that LoadImageFromFile will provide when given the same image loading parameters.
            </summary>
            <param name="filename">The name of the image.</param>
            <param name="size">The requested size for the image</param>
            <param name="fittingMode">The method to use to map the source image to the desired dimensions.</param>
            <param name="samplingMode">The image filter to use if the image needs to be downsampled to the requested size.</param>
            <param name="orientationCorrection">Whether to use image metadata to rotate or flip the image, e.g., from portrait to landscape.</param>
            <returns>Dimensions that image will have if it is loaded with given parameters.</returns>
            <since_tizen> 5 </since_tizen>
            This will be released at Tizen.NET API Level 5, so currently this would be used as inhouse API.
        </member>
        <member name="M:Tizen.NUI.ImageLoading.GetClosestImageSize(System.String,Tizen.NUI.Size2D,Tizen.NUI.FittingModeType,Tizen.NUI.SamplingModeType)">
            <summary>
            Determine the size of an image that LoadImageFromFile will provide when given the same image loading parameters.
            </summary>
            <param name="filename">The name of the image.</param>
            <param name="size">The requested size for the image</param>
            <param name="fittingMode">The method to use to map the source image to the desired dimensions.</param>
            <param name="samplingMode">The image filter to use if the image needs to be downsampled to the requested size.</param>
            <returns>Dimensions that image will have if it is loaded with given parameters.</returns>
            <since_tizen> 5 </since_tizen>
            This will be released at Tizen.NET API Level 5, so currently this would be used as inhouse API.
        </member>
        <member name="M:Tizen.NUI.ImageLoading.GetClosestImageSize(System.String,Tizen.NUI.Size2D,Tizen.NUI.FittingModeType)">
            <summary>
            Determine the size of an image that LoadImageFromFile will provide when given the same image loading parameters.
            </summary>
            <param name="filename">The name of the image.</param>
            <param name="size">The requested size for the image</param>
            <param name="fittingMode">The method to use to map the source image to the desired dimensions.</param>
            <returns>Dimensions that image will have if it is loaded with given parameters.</returns>
            <since_tizen> 5 </since_tizen>
            This will be released at Tizen.NET API Level 5, so currently this would be used as inhouse API.
        </member>
        <member name="M:Tizen.NUI.ImageLoading.GetClosestImageSize(System.String,Tizen.NUI.Size2D)">
            <summary>
            Determine the size of an image that LoadImageFromFile will provide when given the same image loading parameters.
            </summary>
            <param name="filename">The name of the image.</param>
            <param name="size">The requested size for the image</param>
            <returns>Dimensions that image will have if it is loaded with given parameters.</returns>
            <since_tizen> 5 </since_tizen>
            This will be released at Tizen.NET API Level 5, so currently this would be used as inhouse API.
        </member>
        <member name="M:Tizen.NUI.ImageLoading.GetClosestImageSize(System.String)">
            <summary>
            Determine the size of an image that LoadImageFromFile will provide when given the same image loading parameters.
            </summary>
            <param name="filename">The name of the image.</param>
            <returns>Dimensions that image will have if it is loaded with given parameters.</returns>
            <since_tizen> 5 </since_tizen>
            This will be released at Tizen.NET API Level 5, so currently this would be used as inhouse API.
        </member>
        <member name="M:Tizen.NUI.ImageLoading.DownloadImageSynchronously(System.String,Tizen.NUI.Size2D,Tizen.NUI.FittingModeType,Tizen.NUI.SamplingModeType,System.Boolean)">
            <summary>
            Load an image synchronously from a remote resource.
            </summary>
            <param name="url">The URL of the image file to load.</param>
            <param name="size">The width and height to fit the loaded image to, 0.0 means whole image.</param>
            <param name="fittingMode">The method used to fit the shape of the image before loading to the shape defined by the size parameter.</param>
            <param name="samplingMode">The filtering method used when sampling pixels from the input image while fitting it to desired size.</param>
            <param name="orientationCorrection">Reorient the image to respect any orientation metadata in its header.</param>
            <returns>Handle to the loaded PixelBuffer object or an empty handle in case downloading or decoding failed.</returns>
            <since_tizen> 5 </since_tizen>
            This will be released at Tizen.NET API Level 5, so currently this would be used as inhouse API.
        </member>
        <member name="M:Tizen.NUI.ImageLoading.DownloadImageSynchronously(System.String,Tizen.NUI.Size2D,Tizen.NUI.FittingModeType,Tizen.NUI.SamplingModeType)">
            <summary>
            Load an image synchronously from a remote resource.
            </summary>
            <param name="url">The URL of the image file to load.</param>
            <param name="size">The width and height to fit the loaded image to, 0.0 means whole image.</param>
            <param name="fittingMode">The method used to fit the shape of the image before loading to the shape defined by the size parameter.</param>
            <param name="samplingMode">The filtering method used when sampling pixels from the input image while fitting it to desired size.</param>
            <returns>Handle to the loaded PixelBuffer object or an empty handle in case downloading or decoding failed.</returns>
            <since_tizen> 5 </since_tizen>
            This will be released at Tizen.NET API Level 5, so currently this would be used as inhouse API.
        </member>
        <member name="M:Tizen.NUI.ImageLoading.DownloadImageSynchronously(System.String,Tizen.NUI.Size2D,Tizen.NUI.FittingModeType)">
            <summary>
            Load an image synchronously from a remote resource.
            </summary>
            <param name="url">The URL of the image file to load.</param>
            <param name="size">The width and height to fit the loaded image to, 0.0 means whole image.</param>
            <param name="fittingMode">The method used to fit the shape of the image before loading to the shape defined by the size parameter.</param>
            <returns>Handle to the loaded PixelBuffer object or an empty handle in case downloading or decoding failed.</returns>
            <since_tizen> 5 </since_tizen>
            This will be released at Tizen.NET API Level 5, so currently this would be used as inhouse API.
        </member>
        <member name="M:Tizen.NUI.ImageLoading.DownloadImageSynchronously(System.String,Tizen.NUI.Size2D)">
            <summary>
            Load an image synchronously from a remote resource.
            </summary>
            <param name="url">The URL of the image file to load.</param>
            <param name="size">The width and height to fit the loaded image to, 0.0 means whole image.</param>
            <returns>Handle to the loaded PixelBuffer object or an empty handle in case downloading or decoding failed.</returns>
            <since_tizen> 5 </since_tizen>
            This will be released at Tizen.NET API Level 5, so currently this would be used as inhouse API.
        </member>
        <member name="M:Tizen.NUI.ImageLoading.DownloadImageSynchronously(System.String)">
            <summary>
            Load an image synchronously from a remote resource.
            </summary>
            <param name="url">The URL of the image file to load.</param>
            <returns>Handle to the loaded PixelBuffer object or an empty handle in case downloading or decoding failed.</returns>
            <since_tizen> 5 </since_tizen>
            This will be released at Tizen.NET API Level 5, so currently this would be used as inhouse API.
        </member>
        <member name="M:Tizen.NUI.ImageLoading.SetMaxTextureSize(System.UInt32)">
            <summary>
            Set the maximum texture size. Then size can be kwown by GL_MAX_TEXTURE_SIZE.
            </summary>
            <param name="size">The maximum texture size to set.</param>
            <since_tizen> 5 </since_tizen>
            This will be released at Tizen.NET API Level 5, so currently this would be used as inhouse API.
        </member>
        <member name="M:Tizen.NUI.ImageLoading.GetMaxTextureSize">
            <summary>
            Get the maximum texture size.
            </summary>
            <returns>The maximum texture size.</returns>
            <since_tizen> 5 </since_tizen>
            This will be released at Tizen.NET API Level 5, so currently this would be used as inhouse API.
        </member>
        <member name="T:Tizen.NUI.ImfManager">
            <summary>
            Specifically manages the input method framework which enables the virtual or hardware keyboards.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.ImfManager.Instance">
            <summary>
            Gets the singleton of the ImfManager object.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ImfManager.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            Dispose
            </summary>
            <param name="type">Dispose Type</param>
            <since_tizen> 3 </since_tizen>
            Please DO NOT use! This will be deprecated!
            Dispose() method in Singletone classes (ex: FocusManager, StyleManager, VisualFactory, ImfManager, TtsPlayer, Window) is not required.
        </member>
        <member name="T:Tizen.NUI.ImfManager.ImfEventData">
            <summary>
            This structure is used to pass on data from the IMF regarding predictive text.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.ImfManager.ImfEventData.swigCMemOwn">
            <summary>
            swigCMemOwn
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.ImfManager.ImfEventData.disposed">
            <summary>
            A Flat to check if it is already disposed.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ImfManager.ImfEventData.Finalize">
            <summary>
            Dispose.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ImfManager.ImfEventData.Dispose">
            <summary>
            The dispose pattern.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ImfManager.ImfEventData.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            Dispose.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ImfManager.ImfEventData.#ctor">
            <summary>
            The default constructor.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ImfManager.ImfEventData.#ctor(Tizen.NUI.ImfManager.ImfEvent,System.String,System.Int32,System.Int32)">
            <summary>
            The constructor.
            </summary>
            <param name="aEventName">The name of the event from the IMF.</param>
            <param name="aPredictiveString">The pre-edit or the commit string.</param>
            <param name="aCursorOffset">Start the position from the current cursor position to start deleting characters.</param>
            <param name="aNumberOfChars">The number of characters to delete from the cursorOffset.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.ImfManager.ImfEventData.PredictiveString">
            <summary>
            The pre-edit or the commit string.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.ImfManager.ImfEventData.EventName">
            <summary>
            The name of the event from the IMF.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.ImfManager.ImfEventData.CursorOffset">
            <summary>
            The start position from the current cursor position to start deleting characters.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.ImfManager.ImfEventData.NumberOfChars">
            <summary>
            The number of characters to delete from the cursorOffset.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ImfManager.ImfCallbackData">
            <summary>
            Data required by the IMF from the callback.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.ImfManager.ImfCallbackData.swigCMemOwn">
            <summary>
            swigCMemOwn
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.ImfManager.ImfCallbackData.disposed">
            <summary>
            A Flat to check if it is already disposed.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ImfManager.ImfCallbackData.Finalize">
            <summary>
            Dispose.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ImfManager.ImfCallbackData.Dispose">
            <summary>
            The dispose pattern.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ImfManager.ImfCallbackData.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            Dispose.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ImfManager.ImfCallbackData.#ctor">
            <summary>
            The default constructor.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ImfManager.ImfCallbackData.#ctor(System.Boolean,System.Int32,System.String,System.Boolean)">
            <summary>
            The constructor.
            </summary>
            <param name="aUpdate">True if the cursor position needs to be updated.</param>
            <param name="aCursorPosition">The new position of the cursor.</param>
            <param name="aCurrentText">The current text string.</param>
            <param name="aPreeditResetRequired">Flag if preedit reset is required.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.ImfManager.ImfCallbackData.CurrentText">
            <summary>
            The current text string.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.ImfManager.ImfCallbackData.CursorPosition">
            <summary>
            The current text string.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.ImfManager.ImfCallbackData.Update">
            <summary>
            If the cursor position needs to be updated.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.ImfManager.ImfCallbackData.PreeditResetRequired">
            <summary>
            Flags if preedit reset is required.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ImfManager.DestroyContext">
            <summary>
            Destroy the context of the IMF.<br/>
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ImfManager.Finalize">
            <summary>
            Destroy the context of the IMF.<br/>
            </summary>
            <since_tizen> 4 </since_tizen>
            Please do not use! This will be deprecated, instead please USE Tizen.NUI.ImfManager.Instance.DestroyContext()!
        </member>
        <member name="M:Tizen.NUI.ImfManager.Get">
            <summary>
            Retrieves a handle to the instance of the ImfManager.
            </summary>
            <returns>A handle to the ImfManager.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ImfManager.#ctor">
            <summary>
            Constructor.<br/>
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ImfManager.Activate">
            <summary>
            Activates the IMF.<br/>
            It means that the text editing is started somewhere.<br/>
            If the hardware keyboard isn't connected, then it will show the virtual keyboard.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ImfManager.Deactivate">
            <summary>
            Deactivates the IMF.<br/>
            It means that the text editing is finished somewhere.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ImfManager.RestoreAfterFocusLost">
            <summary>
            Gets the restoration status which controls if the keyboard is restored after the focus is lost and then regained.<br/>
            If true, then the keyboard will be restored (activated) after focus is regained.
            </summary>
            <returns>The restoration status.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ImfManager.SetRestoreAfterFocusLost(System.Boolean)">
            <summary>
            Sets the status whether the IMF has to restore the keyboard after losing focus.
            </summary>
            <param name="toggle">True means that keyboard should be restored after the focus is lost and regained.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ImfManager.Reset">
            <summary>
            Sends a message reset to the preedit state or the IMF module.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ImfManager.NotifyCursorPosition">
            <summary>
            Notifies the IMF context that the cursor position has changed, required for features like auto-capitalization.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ImfManager.SetCursorPosition(System.UInt32)">
            <summary>
            Sets the cursor position stored in VirtualKeyboard, this is required by the IMF context.
            </summary>
            <param name="cursorPosition">The position of the cursor.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ImfManager.GetCursorPosition">
            <summary>
            Gets the cursor position stored in VirtualKeyboard, this is required by the IMF context.
            </summary>
            <returns>The current position of the cursor.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ImfManager.SetSurroundingText(System.String)">
            <summary>
            A method to store the string required by the IMF, this is used to provide predictive word suggestions.
            </summary>
            <param name="text">The text string surrounding the current cursor point.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ImfManager.GetSurroundingText">
            <summary>
            Gets the current text string set within the IMF manager, this is used to offer predictive suggestions.
            </summary>
            <returns>The surrounding text.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ImfManager.NotifyTextInputMultiLine(System.Boolean)">
            <summary>
            Notifies the IMF context that text input is set to multiline or not.
            </summary>
            <param name="multiLine">True if multiline text input is used.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ImfManager.GetTextDirection">
            <summary>
            Returns the text direction of the keyboard's current input language.
            </summary>
            <returns>The direction of the text.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ImfManager.GetInputMethodArea">
            <summary>
            Provides the size and the position of the keyboard.<br/>
            The position is relative to whether the keyboard is visible or not.<br/>
            If the keyboard is not visible, then the position will be off the screen.<br/>
            If the keyboard is not being shown when this method is called, the keyboard is partially setup (IMFContext) to get/>
            the values then taken down. So ideally, GetInputMethodArea() should be called after Show().
            </summary>
            <returns>Rectangle which is keyboard panel x, y, width, height.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ImfManager.SetInputPanelUserData(System.String)">
            <summary>
            Sets up the input-panel specific data.
            </summary>
            <param name="text">The specific data to be set to the input panel.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ImfManager.GetInputPanelUserData(System.String@)">
            <summary>
            Gets the specific data of the current active input panel.
            </summary>
            <param name="text">The specific data to be received from the input panel.</param>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ImfManager.GetInputPanelState">
            <summary>
            Gets the state of the current active input panel.
            </summary>
            <returns>The state of the input panel.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ImfManager.SetReturnKeyState(System.Boolean)">
            <summary>
            Sets the return key on the input panel to be visible or invisible.<br/>
            The default is true.
            </summary>
            <param name="visible">True if the return key is visible (enabled), false otherwise.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ImfManager.AutoEnableInputPanel(System.Boolean)">
            <summary>
            Enables to show the input panel automatically when focused.
            </summary>
            <param name="enabled">If true, the input panel will be shown when focused.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ImfManager.ShowInputPanel">
            <summary>
            Shows the input panel.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ImfManager.HideInputPanel">
            <summary>
            Hides the input panel.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ImfManager.GetKeyboardType">
            <summary>
            Gets the keyboard type.<br/>
            The default keyboard type is SoftwareKeyboard.
            </summary>
            <returns>The keyboard type.</returns>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ImfManager.GetInputPanelLocale">
            <summary>
            Gets the current language locale of the input panel.<br/>
            For example, en_US, en_GB, en_PH, fr_FR, ...
            </summary>
            <returns>The current language locale of the input panel.</returns>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ImfManager.ActivatedEventArgs">
            <summary>
            ImfManager activated event arguments.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.ImfManager.ActivatedEventArgs.ImfManager">
            <summary>
            ImfManager
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="E:Tizen.NUI.ImfManager.Activated">
            <summary>
            ImfManager activated.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ImfManager.EventReceivedEventArgs">
            <summary>
            ImfManager event received event arguments.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.ImfManager.EventReceivedEventArgs.ImfManager">
            <summary>
            ImfManager
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.ImfManager.EventReceivedEventArgs.ImfEventData">
            <summary>
            ImfEventData
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="E:Tizen.NUI.ImfManager.EventReceived">
            <summary>
            ImfManager event received.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ImfManager.StatusChangedEventArgs">
            <summary>
            ImfManager status changed event arguments.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.ImfManager.StatusChangedEventArgs.StatusChanged">
            <summary>
            ImfManager status
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="E:Tizen.NUI.ImfManager.StatusChanged">
            <summary>
            ImfManager status changed.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ImfManager.ResizedEventArgs">
            <summary>
            ImfManager resized event.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.ImfManager.ResizedEventArgs.Resized">
            <summary>
            resized.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="E:Tizen.NUI.ImfManager.Resized">
            <summary>
            ImfManager resized.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ImfManager.LanguageChangedEventArgs">
            <summary>
            ImfManager language changed event args.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.ImfManager.LanguageChangedEventArgs.LanguageChanged">
            <summary>
            language changed.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="E:Tizen.NUI.ImfManager.LanguageChanged">
            <summary>
            ImfManager language changed.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ImfManager.KeyboardTypeChangedEventArgs">
            <summary>
            ImfManager keyboard type changed event arguments.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.ImfManager.KeyboardTypeChangedEventArgs.KeyboardType">
            <summary>
            ImfManager keyboard type
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="E:Tizen.NUI.ImfManager.KeyboardTypeChanged">
            <summary>
            ImfManager keyboard type changed.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ImfManager.TextDirection">
            <summary>
            The direction of the text.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.ImfManager.TextDirection.LeftToRight">
            <summary>
            Left to right.
            </summary>
        </member>
        <member name="F:Tizen.NUI.ImfManager.TextDirection.RightToLeft">
            <summary>
            Right to left.
            </summary>
        </member>
        <member name="T:Tizen.NUI.ImfManager.ImfEvent">
            <summary>
            Events that are generated by the IMF.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.ImfManager.ImfEvent.Void">
            <summary>
            No event.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.ImfManager.ImfEvent.Preedit">
            <summary>
            Pre-Edit changed.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.ImfManager.ImfEvent.Commit">
            <summary>
            Commit received.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.ImfManager.ImfEvent.DeleteSurrounding">
            <summary>
            An event to delete a range of characters from the string.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.ImfManager.ImfEvent.GetSurrounding">
            <summary>
            An event to query string and the cursor position.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.ImfManager.ImfEvent.PrivateCommand">
            <summary>
            Private command sent from the input panel.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ImfManager.State">
            <summary>
            Enumeration for the state of the input panel.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.ImfManager.State.Default">
            <summary>
            Unknown state.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.ImfManager.State.Show">
            <summary>
            Input panel is shown.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.ImfManager.State.Hide">
            <summary>
            Input panel is hidden.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.ImfManager.State.WillShow">
            <summary>
            Input panel in process of being shown.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ImfManager.KeyboardType">
            <summary>
            Enumeration for the types of keyboard.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.ImfManager.KeyboardType.SoftwareKeyboard">
            <summary>
            Software keyboard (virtual keyboard) is default.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.ImfManager.KeyboardType.HardwareKeyboard">
            <summary>
            Hardware keyboard.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.InputMethod">
            <summary>
            A class encapsulating the input method map.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.InputMethod.#ctor">
            <summary>
            The default constructor.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.InputMethod.PanelLayout">
            <summary>
            Gets or sets the panel layout.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.InputMethod.ActionButton">
            <summary>
            Gets or sets the action button.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.InputMethod.AutoCapital">
            <summary>
            Gets or sets the auto capital.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.InputMethod.Variation">
            <summary>
            Gets or sets the variation.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.InputMethod.NormalVariation">
            <summary>
            Gets or sets the variation for normal layout.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.InputMethod.NumberOnlyVariation">
            <summary>
            Gets or sets the variation for the number only layout.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.InputMethod.PasswordVariation">
            <summary>
            Gets or sets the variation for the password layout.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.InputMethod.OutputMap">
            <summary>
            Gets the input method map.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.InputMethod.CategoryType">
            <summary>
            SetType that can be changed in the system input method.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.InputMethod.CategoryType.PanelLayout">
            <summary>
            Set the keyboard layout.
            </summary>
        </member>
        <member name="F:Tizen.NUI.InputMethod.CategoryType.ActionButtonTitle">
            <summary>
            Set the action button title.
            </summary>
        </member>
        <member name="F:Tizen.NUI.InputMethod.CategoryType.AutoCapitalise">
            <summary>
            Set the auto capitalise of input.
            </summary>
        </member>
        <member name="F:Tizen.NUI.InputMethod.CategoryType.Variation">
            <summary>
            Set the variation.
            </summary>
        </member>
        <member name="T:Tizen.NUI.InputMethod.AutoCapitalType">
            <summary>
            Autocapitalization Types.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.InputMethod.AutoCapitalType.None">
            <summary>
            No auto-capitalization when typing.
            </summary>
        </member>
        <member name="F:Tizen.NUI.InputMethod.AutoCapitalType.Word">
            <summary>
            Autocapitalize each word typed.
            </summary>
        </member>
        <member name="F:Tizen.NUI.InputMethod.AutoCapitalType.Sentence">
            <summary>
            Autocapitalize the start of each sentence.
            </summary>
        </member>
        <member name="F:Tizen.NUI.InputMethod.AutoCapitalType.Allcharacter">
            <summary>
            Autocapitalize all letters.
            </summary>
        </member>
        <member name="T:Tizen.NUI.InputMethod.PanelLayoutType">
            <summary>
            Input panel (virtual keyboard) layout types..
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.InputMethod.PanelLayoutType.Normal">
            <summary>
            Default layout.
            </summary>
        </member>
        <member name="F:Tizen.NUI.InputMethod.PanelLayoutType.Number">
            <summary>
            Number layout.
            </summary>
        </member>
        <member name="F:Tizen.NUI.InputMethod.PanelLayoutType.Email">
            <summary>
            Email layout.
            </summary>
        </member>
        <member name="F:Tizen.NUI.InputMethod.PanelLayoutType.URL">
            <summary>
            URL layout.
            </summary>
        </member>
        <member name="F:Tizen.NUI.InputMethod.PanelLayoutType.PhoneNumber">
            <summary>
            Phone number layout.
            </summary>
        </member>
        <member name="F:Tizen.NUI.InputMethod.PanelLayoutType.IP">
            <summary>
            IP layout.
            </summary>
        </member>
        <member name="F:Tizen.NUI.InputMethod.PanelLayoutType.Month">
            <summary>
            Month layout.
            </summary>
        </member>
        <member name="F:Tizen.NUI.InputMethod.PanelLayoutType.NumberOnly">
            <summary>
            Number layout.
            </summary>
        </member>
        <member name="F:Tizen.NUI.InputMethod.PanelLayoutType.HEX">
            <summary>
            Hexadecimal layout.
            </summary>
        </member>
        <member name="F:Tizen.NUI.InputMethod.PanelLayoutType.Terminal">
            <summary>
            Command-line terminal layout including Esc, Alt, Ctrl key, and so on (no auto-correct, no auto-capitalization).
            </summary>
        </member>
        <member name="F:Tizen.NUI.InputMethod.PanelLayoutType.Password">
            <summary>
            Like normal, but no auto-correct, no auto-capitalization etc.
            </summary>
        </member>
        <member name="F:Tizen.NUI.InputMethod.PanelLayoutType.Datetime">
            <summary>
            Date and time layout.
            </summary>
        </member>
        <member name="F:Tizen.NUI.InputMethod.PanelLayoutType.Emoticon">
            <summary>
            Emoticon layout.
            </summary>
        </member>
        <member name="T:Tizen.NUI.InputMethod.ActionButtonTitleType">
            <summary>
            Specifies what the Input Method "action" button functionality is set to.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.InputMethod.ActionButtonTitleType.Default">
            <summary>
            Default action.
            </summary>
        </member>
        <member name="F:Tizen.NUI.InputMethod.ActionButtonTitleType.Done">
            <summary>
            Done.
            </summary>
        </member>
        <member name="F:Tizen.NUI.InputMethod.ActionButtonTitleType.Go">
            <summary>
            Go action.
            </summary>
        </member>
        <member name="F:Tizen.NUI.InputMethod.ActionButtonTitleType.Join">
            <summary>
            Join action.
            </summary>
        </member>
        <member name="F:Tizen.NUI.InputMethod.ActionButtonTitleType.Login">
            <summary>
            Login action.
            </summary>
        </member>
        <member name="F:Tizen.NUI.InputMethod.ActionButtonTitleType.Next">
            <summary>
            Next action.
            </summary>
        </member>
        <member name="F:Tizen.NUI.InputMethod.ActionButtonTitleType.Previous">
            <summary>
            Previous action.
            </summary>
        </member>
        <member name="F:Tizen.NUI.InputMethod.ActionButtonTitleType.Search">
            <summary>
            Search action.
            </summary>
        </member>
        <member name="F:Tizen.NUI.InputMethod.ActionButtonTitleType.Send">
            <summary>
            Send action.
            </summary>
        </member>
        <member name="F:Tizen.NUI.InputMethod.ActionButtonTitleType.SignIn">
            <summary>
            Sign in action.
            </summary>
        </member>
        <member name="F:Tizen.NUI.InputMethod.ActionButtonTitleType.Unspecified">
            <summary>
            Unspecified action.
            </summary>
        </member>
        <member name="F:Tizen.NUI.InputMethod.ActionButtonTitleType.None">
            <summary>
            Nothing to do.
            </summary>
        </member>
        <member name="T:Tizen.NUI.InputMethod.NormalLayoutType">
            <summary>
            Available variation for the normal layout.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.InputMethod.NormalLayoutType.Normal">
            <summary>
            The plain normal layout.
            </summary>
        </member>
        <member name="F:Tizen.NUI.InputMethod.NormalLayoutType.WithFilename">
            <summary>
            Filename layout. sysbols such as '/' should be disabled.
            </summary>
        </member>
        <member name="F:Tizen.NUI.InputMethod.NormalLayoutType.WithPersonName">
            <summary>
            The name of a person.
            </summary>
        </member>
        <member name="T:Tizen.NUI.InputMethod.NumberOnlyLayoutType">
            <summary>
            Available variation for the number only layout.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.InputMethod.NumberOnlyLayoutType.Normal">
            <summary>
            The plain normal number layout.
            </summary>
        </member>
        <member name="F:Tizen.NUI.InputMethod.NumberOnlyLayoutType.WithSigned">
            <summary>
            The number layout to allow a positive or negative sign at the start.
            </summary>
        </member>
        <member name="F:Tizen.NUI.InputMethod.NumberOnlyLayoutType.WithDecimal">
            <summary>
            The number layout to allow decimal point to provide fractional value.
            </summary>
        </member>
        <member name="F:Tizen.NUI.InputMethod.NumberOnlyLayoutType.WithSignedAndDecimal">
            <summary>
            The number layout to allow decimal point and negative sign.
            </summary>
        </member>
        <member name="T:Tizen.NUI.InputMethod.PasswordLayoutType">
            <summary>
            Available variation for the password layout.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.InputMethod.PasswordLayoutType.Normal">
            <summary>
            The normal password layout.
            </summary>
        </member>
        <member name="F:Tizen.NUI.InputMethod.PasswordLayoutType.WithNumberOnly">
            <summary>
            The password layout to allow only number.
            </summary>
        </member>
        <member name="T:Tizen.NUI.InputMethodContext">
            <summary>
            Specifically manages the input method framework which enables the virtual or hardware keyboards.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.InputMethodContext.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            Dispose
            </summary>
            <param name="type">Dispose Type</param>
            <since_tizen> 3 </since_tizen>
            Please DO NOT use! This will be deprecated!
            Dispose() method in Singletone classes (ex: FocusManager, StyleManager, VisualFactory, InputMethodContext, TtsPlayer, Window) is not required.
        </member>
        <member name="T:Tizen.NUI.InputMethodContext.EventData">
            <summary>
            This structure is used to pass on data from the IMF regarding predictive text.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.InputMethodContext.EventData.swigCMemOwn">
            <summary>
            swigCMemOwn
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.InputMethodContext.EventData.disposed">
            <summary>
            A Flat to check if it is already disposed.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.InputMethodContext.EventData.Finalize">
            <summary>
            Dispose.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.InputMethodContext.EventData.Dispose">
            <summary>
            The dispose pattern.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.InputMethodContext.EventData.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            Dispose.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.InputMethodContext.EventData.#ctor">
            <summary>
            The default constructor.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.InputMethodContext.EventData.#ctor(Tizen.NUI.InputMethodContext.EventType,System.String,System.Int32,System.Int32)">
            <summary>
            The constructor.
            </summary>
            <param name="aEventName">The name of the event from the IMF.</param>
            <param name="aPredictiveString">The pre-edit or the commit string.</param>
            <param name="aCursorOffset">Start the position from the current cursor position to start deleting characters.</param>
            <param name="aNumberOfChars">The number of characters to delete from the cursorOffset.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.InputMethodContext.EventData.PredictiveString">
            <summary>
            The pre-edit or the commit string.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.InputMethodContext.EventData.EventName">
            <summary>
            The name of the event from the IMF.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.InputMethodContext.EventData.CursorOffset">
            <summary>
            The start position from the current cursor position to start deleting characters.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.InputMethodContext.EventData.NumberOfChars">
            <summary>
            The number of characters to delete from the cursorOffset.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.InputMethodContext.CallbackData">
            <summary>
            Data required by the IMF from the callback.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.InputMethodContext.CallbackData.swigCMemOwn">
            <summary>
            swigCMemOwn
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.InputMethodContext.CallbackData.disposed">
            <summary>
            A Flat to check if it is already disposed.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.InputMethodContext.CallbackData.Finalize">
            <summary>
            Dispose.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.InputMethodContext.CallbackData.Dispose">
            <summary>
            The dispose pattern.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.InputMethodContext.CallbackData.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            Dispose.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.InputMethodContext.CallbackData.#ctor">
            <summary>
            The default constructor.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.InputMethodContext.CallbackData.#ctor(System.Boolean,System.Int32,System.String,System.Boolean)">
            <summary>
            The constructor.
            </summary>
            <param name="aUpdate">True if the cursor position needs to be updated.</param>
            <param name="aCursorPosition">The new position of the cursor.</param>
            <param name="aCurrentText">The current text string.</param>
            <param name="aPreeditResetRequired">Flag if preedit reset is required.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.InputMethodContext.CallbackData.CurrentText">
            <summary>
            The current text string.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.InputMethodContext.CallbackData.CursorPosition">
            <summary>
            The current text string.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.InputMethodContext.CallbackData.Update">
            <summary>
            If the cursor position needs to be updated.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.InputMethodContext.CallbackData.PreeditResetRequired">
            <summary>
            Flags if preedit reset is required.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.InputMethodContext.DestroyContext">
            <summary>
            Destroy the context of the IMF.<br/>
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.InputMethodContext.Finalize">
            <summary>
            Destroy the context of the IMF.<br/>
            </summary>
            <since_tizen> 4 </since_tizen>
            Please do not use! This will be deprecated, instead please USE Tizen.NUI.InputMethodContext.Instance.DestroyContext()!
        </member>
        <member name="M:Tizen.NUI.InputMethodContext.#ctor">
            <summary>
            Constructor.<br/>
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.InputMethodContext.Activate">
            <summary>
            Activates the IMF.<br/>
            It means that the text editing is started somewhere.<br/>
            If the hardware keyboard isn't connected, then it will show the virtual keyboard.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.InputMethodContext.Deactivate">
            <summary>
            Deactivates the IMF.<br/>
            It means that the text editing is finished somewhere.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.InputMethodContext.RestoreAfterFocusLost">
            <summary>
            Gets the restoration status which controls if the keyboard is restored after the focus is lost and then regained.<br/>
            If true, then the keyboard will be restored (activated) after focus is regained.
            </summary>
            <returns>The restoration status.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.InputMethodContext.SetRestoreAfterFocusLost(System.Boolean)">
            <summary>
            Sets the status whether the IMF has to restore the keyboard after losing focus.
            </summary>
            <param name="toggle">True means that keyboard should be restored after the focus is lost and regained.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.InputMethodContext.Reset">
            <summary>
            Sends a message reset to the preedit state or the IMF module.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.InputMethodContext.NotifyCursorPosition">
            <summary>
            Notifies the IMF context that the cursor position has changed, required for features like auto-capitalization.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.InputMethodContext.SetCursorPosition(System.UInt32)">
            <summary>
            Sets the cursor position stored in VirtualKeyboard, this is required by the IMF context.
            </summary>
            <param name="cursorPosition">The position of the cursor.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.InputMethodContext.GetCursorPosition">
            <summary>
            Gets the cursor position stored in VirtualKeyboard, this is required by the IMF context.
            </summary>
            <returns>The current position of the cursor.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.InputMethodContext.SetSurroundingText(System.String)">
            <summary>
            A method to store the string required by the IMF, this is used to provide predictive word suggestions.
            </summary>
            <param name="text">The text string surrounding the current cursor point.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.InputMethodContext.GetSurroundingText">
            <summary>
            Gets the current text string set within the IMF manager, this is used to offer predictive suggestions.
            </summary>
            <returns>The surrounding text.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.InputMethodContext.NotifyTextInputMultiLine(System.Boolean)">
            <summary>
            Notifies the IMF context that text input is set to multiline or not.
            </summary>
            <param name="multiLine">True if multiline text input is used.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.InputMethodContext.GetTextDirection">
            <summary>
            Returns the text direction of the keyboard's current input language.
            </summary>
            <returns>The direction of the text.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.InputMethodContext.GetInputMethodArea">
            <summary>
            Provides the size and the position of the keyboard.<br/>
            The position is relative to whether the keyboard is visible or not.<br/>
            If the keyboard is not visible, then the position will be off the screen.<br/>
            If the keyboard is not being shown when this method is called, the keyboard is partially setup (IMFContext) to get/>
            the values then taken down. So ideally, GetInputMethodArea() should be called after Show().
            </summary>
            <returns>Rectangle which is keyboard panel x, y, width, height.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.InputMethodContext.SetInputPanelUserData(System.String)">
            <summary>
            Sets up the input-panel specific data.
            </summary>
            <param name="text">The specific data to be set to the input panel.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.InputMethodContext.GetInputPanelUserData(System.String@)">
            <summary>
            Gets the specific data of the current active input panel.
            </summary>
            <param name="text">The specific data to be received from the input panel.</param>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.InputMethodContext.GetInputPanelState">
            <summary>
            Gets the state of the current active input panel.
            </summary>
            <returns>The state of the input panel.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.InputMethodContext.SetReturnKeyState(System.Boolean)">
            <summary>
            Sets the return key on the input panel to be visible or invisible.<br/>
            The default is true.
            </summary>
            <param name="visible">True if the return key is visible (enabled), false otherwise.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.InputMethodContext.AutoEnableInputPanel(System.Boolean)">
            <summary>
            Enables to show the input panel automatically when focused.
            </summary>
            <param name="enabled">If true, the input panel will be shown when focused.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.InputMethodContext.ShowInputPanel">
            <summary>
            Shows the input panel.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.InputMethodContext.HideInputPanel">
            <summary>
            Hides the input panel.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.InputMethodContext.GetKeyboardType">
            <summary>
            Gets the keyboard type.<br/>
            The default keyboard type is SoftwareKeyboard.
            </summary>
            <returns>The keyboard type.</returns>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.InputMethodContext.GetInputPanelLocale">
            <summary>
            Gets the current language locale of the input panel.<br/>
            For example, en_US, en_GB, en_PH, fr_FR, ...
            </summary>
            <returns>The current language locale of the input panel.</returns>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.InputMethodContext.ActivatedEventArgs">
            <summary>
            InputMethodContext activated event arguments.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.InputMethodContext.ActivatedEventArgs.InputMethodContext">
            <summary>
            InputMethodContext
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="E:Tizen.NUI.InputMethodContext.Activated">
            <summary>
            InputMethodContext activated.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.InputMethodContext.EventReceivedEventArgs">
            <summary>
            InputMethodContext event received event arguments.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.InputMethodContext.EventReceivedEventArgs.InputMethodContext">
            <summary>
            InputMethodContext
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.InputMethodContext.EventReceivedEventArgs.EventData">
            <summary>
            EventData
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="E:Tizen.NUI.InputMethodContext.EventReceived">
            <summary>
            InputMethodContext event received.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.InputMethodContext.StatusChangedEventArgs">
            <summary>
            InputMethodContext status changed event arguments.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.InputMethodContext.StatusChangedEventArgs.StatusChanged">
            <summary>
            InputMethodContext status
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="E:Tizen.NUI.InputMethodContext.StatusChanged">
            <summary>
            InputMethodContext status changed.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.InputMethodContext.ResizedEventArgs">
            <summary>
            InputMethodContext resized event.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.InputMethodContext.ResizedEventArgs.Resized">
            <summary>
            resized.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="E:Tizen.NUI.InputMethodContext.Resized">
            <summary>
            InputMethodContext resized.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.InputMethodContext.LanguageChangedEventArgs">
            <summary>
            InputMethodContext language changed event args.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.InputMethodContext.LanguageChangedEventArgs.LanguageChanged">
            <summary>
            language changed.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="E:Tizen.NUI.InputMethodContext.LanguageChanged">
            <summary>
            InputMethodContext language changed.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.InputMethodContext.KeyboardTypeChangedEventArgs">
            <summary>
            InputMethodContext keyboard type changed event arguments.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.InputMethodContext.KeyboardTypeChangedEventArgs.KeyboardType">
            <summary>
            InputMethodContext keyboard type
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="E:Tizen.NUI.InputMethodContext.KeyboardTypeChanged">
            <summary>
            InputMethodContext keyboard type changed.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.InputMethodContext.TextDirection">
            <summary>
            The direction of the text.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.InputMethodContext.TextDirection.LeftToRight">
            <summary>
            Left to right.
            </summary>
        </member>
        <member name="F:Tizen.NUI.InputMethodContext.TextDirection.RightToLeft">
            <summary>
            Right to left.
            </summary>
        </member>
        <member name="T:Tizen.NUI.InputMethodContext.EventType">
            <summary>
            Events that are generated by the IMF.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.InputMethodContext.EventType.Void">
            <summary>
            No event.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.InputMethodContext.EventType.Preedit">
            <summary>
            Pre-Edit changed.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.InputMethodContext.EventType.Commit">
            <summary>
            Commit received.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.InputMethodContext.EventType.DeleteSurrounding">
            <summary>
            An event to delete a range of characters from the string.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.InputMethodContext.EventType.GetSurrounding">
            <summary>
            An event to query string and the cursor position.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.InputMethodContext.EventType.PrivateCommand">
            <summary>
            Private command sent from the input panel.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.InputMethodContext.State">
            <summary>
            Enumeration for the state of the input panel.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.InputMethodContext.State.Default">
            <summary>
            Unknown state.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.InputMethodContext.State.Show">
            <summary>
            Input panel is shown.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.InputMethodContext.State.Hide">
            <summary>
            Input panel is hidden.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.InputMethodContext.State.WillShow">
            <summary>
            Input panel in process of being shown.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.InputMethodContext.KeyboardType">
            <summary>
            Enumeration for the types of keyboard.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.InputMethodContext.KeyboardType.SoftwareKeyboard">
            <summary>
            Software keyboard (virtual keyboard) is default.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.InputMethodContext.KeyboardType.HardwareKeyboard">
            <summary>
            Hardware keyboard.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.Key">
            <summary>
            The key structure is used to store a key press.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Key.swigCMemOwn">
            <summary>
            swigCMemOwn
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Key.disposed">
            <summary>
            A Flat to check if it is already disposed.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Key.Finalize">
            <summary>
            Dispose.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Key.Dispose">
            <summary>
            Dispose.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Key.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            Dispose.
            </summary>
            <param name="type">The dispose type.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Key.DeviceName">
            <summary>
            Device name
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Key.KeyPressedName">
            <summary>
            Name given to the key pressed.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Key.KeyCode">
            <summary>
            Keycode for the key pressed.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Key.KeyModifier">
            <summary>
            Special keys like Shift, Alt, and Ctrl which modify the next key pressed.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Key.Time">
            <summary>
            The time (in ms) that the key event occurred.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Key.State">
            <summary>
            State of the key event.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Key.DeviceClass">
            <summary>
            Get the device class the key event originated from.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Key.DeviceSubClass">
            <summary>
            Get the device subclass the key event originated from.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Key.#ctor">
            <summary>
            The default constructor.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Key.#ctor(System.String,System.String,System.Int32,System.Int32,System.UInt32,Tizen.NUI.Key.StateType)">
            <summary>
            The constructor.
            </summary>
            <param name="keyName">The name of the key pressed or command from the IMF, if later, then the following parameters will be needed.</param>
            <param name="keyString">A string of input characters or key pressed.</param>
            <param name="keyCode">The unique key code for the key pressed.</param>
            <param name="keyModifier">The key modifier for special keys like Shift and Alt.</param>
            <param name="timeStamp">The time (in ms) that the key event occurred.</param>
            <param name="keyState">The state of the key event.</param>
        </member>
        <member name="M:Tizen.NUI.Key.IsShiftModifier">
            <summary>
            Checks to see if the Shift key modifier has been supplied.
            </summary>
            <returns>True if Shift modifier.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Key.IsCtrlModifier">
            <summary>
            Checks to see if Ctrl (control) key modifier has been supplied.
            </summary>
            <returns>True if Ctrl modifier.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Key.IsAltModifier">
            <summary>
            Checks to see if Alt key modifier has been supplied.
            </summary>
            <returns>True if Alt modifier.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.Key.StateType">
            <summary>
            Enumeration for specifying the state of the key event.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Key.StateType.Down">
            <summary>
            Key Down.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Key.StateType.Up">
            <summary>
            Key Up.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Key.StateType.Last">
            <summary>
            Key Last.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.KeyFrames">
            <summary>
            A set of key frames for a property that can be animated using DALi animation.<br />
            This allows the generation of key frame objects from individual Property::Values.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.KeyFrames.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            Dispose.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.KeyFrames.Add(System.Single,System.Object)">
            <summary>
            Adds a key frame.
            </summary>
            <param name="progress">A progress value between 0.0 and 1.0.</param>
            <param name="value">A value.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.KeyFrames.Add(System.Single,System.Object,Tizen.NUI.AlphaFunction)">
            <summary>
            Adds a key frame.
            </summary>
            <param name="progress">A progress value between 0.0 and 1.0.</param>
            <param name="value">A value</param>
            <param name="alpha">The alpha function used to blend to the next keyframe.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.KeyFrames.#ctor">
            <summary>
            Creates an initialized KeyFrames handle.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.KeyFrames.GetType">
            <summary>
            Gets the type of the key frame.
            </summary>
            <returns>The key frame property type</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.KeyFrames.Add(System.Single,Tizen.NUI.PropertyValue)">
            <summary>
            Adds a key frame.
            </summary>
            <param name="progress">A progress value between 0.0 and 1.0.</param>
            <param name="value">A value.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.KeyFrames.Add(System.Single,Tizen.NUI.PropertyValue,Tizen.NUI.AlphaFunction)">
            <summary>
            Adds a key frame.
            </summary>
            <param name="progress">A progress value between 0.0 and 1.0.</param>
            <param name="value">A value.</param>
            <param name="alpha">The alpha function used to blend to the next keyframe.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.Layer">
            <summary>
            Layers provide a mechanism for overlaying groups of actors on top of each other.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Layer.Add(Tizen.NUI.BaseComponents.View)">
            From the Container base class.
            <summary>
            Adds a child view to this layer.
            </summary>
            <seealso cref="M:Tizen.NUI.Container.Add(Tizen.NUI.BaseComponents.View)">
            </seealso>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Layer.Remove(Tizen.NUI.BaseComponents.View)">
            <summary>
            Removes a child view from this layer. If the view was not a child of this layer, this is a no-op.
            </summary>
            <seealso cref="M:Tizen.NUI.Container.Remove(Tizen.NUI.BaseComponents.View)">
            </seealso>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Layer.GetChildAt(System.UInt32)">
            <summary>
            Retrieves a child view by the index.
            </summary>
            <pre>The view has been initialized.</pre>
            <param name="index">The index of the child to retrieve.</param>
            <returns>The view for the given index or empty handle if children not initialized.</returns>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Layer.GetParent">
            <summary>
            Get parent of the layer.
            </summary>
            <returns>The view's container</returns>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Layer.GetChildCount">
            <summary>
            Get the child count of the layer.
            </summary>
            <returns>The child count of the layer.</returns>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Layer.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            Dispose.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Layer.#ctor">
            <summary>
            Creates a Layer object.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Layer.DownCast(Tizen.NUI.BaseHandle)">
            <summary>
            Downcasts a handle to layer handle.
            </summary>
            <since_tizen> 3 </since_tizen>
            Please do not use! this will be deprecated!
            Instead please use as keyword.
        </member>
        <member name="M:Tizen.NUI.Layer.FindChildById(System.UInt32)">
            <summary>
            Search through this layer's hierarchy for a view with the given unique ID.
            </summary>
            <pre>This layer (the parent) has been initialized.</pre>
            <remarks>The actor itself is also considered in the search.</remarks>
            <param name="id">The id of the child to find</param>
            <returns> A handle to the view if found, or an empty handle if not. </returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Layer.Depth">
            <summary>
            Queries the depth of the layer.<br />
            0 is the bottommost layer, higher number is on the top.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Layer.Raise">
            <summary>
            Increments the depth of the layer.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Layer.Lower">
            <summary>
            Decrements the depth of the layer.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Layer.RaiseToTop">
            <summary>
            Raises the layer to the top.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Layer.LowerToBottom">
            <summary>
            Lowers the layer to the bottom.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Layer.MoveAbove(Tizen.NUI.Layer)">
            <summary>
            Moves the layer directly above the given layer.<br />
            After the call, this layer's depth will be immediately above target.<br />
            </summary>
            <param name="target">The layer to get on top of.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Layer.MoveBelow(Tizen.NUI.Layer)">
            <summary>
            Moves the layer directly below the given layer.<br />
            After the call, this layer's depth will be immediately below target.<br />
            </summary>
            <param name="target">The layer to get below of.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.Layer.LayerBehavior">
            <summary>
            Enumeration for the behavior of the layer.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Layer.LayerBehavior.Layer2D">
            <summary>
            UI control rendering mode.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Layer.LayerBehavior.LayerUI">
            <summary>
            UI control rendering mode (default mode).
            This mode is designed for UI controls that can overlap. In this
            mode renderer order will be respective to the tree hierarchy of
            Actors.<br />
            The rendering order is depth first, so for the following actor tree,
            A will be drawn first, then B, D, E, then C, F.  This ensures that
            overlapping actors are drawn as expected (whereas, with breadth first
            traversal, the actors would interleave).<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Layer.LayerBehavior.Layer3D">
            <summary>
            Layer will use depth test.
            This mode is designed for a 3 dimensional scene where actors in front
            of other actors will obscure them, i.e. the actors are sorted by the
            distance from the camera.<br />
            When using this mode, a depth test will be used. A depth clear will
            happen for each layer, which means actors in a layer "above" other
            layers will be rendered in front of actors in those layers regardless
            of their Z positions (see Layer::Raise() and Layer::Lower()).<br />
            Opaque renderers are drawn first and write to the depth buffer.  Then
            transparent renderers are drawn with depth test enabled but depth
            write switched off.  Transparent renderers are drawn based on their
            distance from the camera.  A renderer's DEPTH_INDEX property is used to
            offset the distance to the camera when ordering transparent renderers.
            This is useful if you want to define the draw order of two or more
            transparent renderers that are equal distance from the camera.  Unlike
            LAYER_UI, parent-child relationship does not affect rendering order at
            all.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Layer.Behavior">
            <summary>
            Layer behavior, type String (Layer.LayerBehavior).
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Layer.ClippingEnabled">
            <summary>
            Internal only property to enable or disable clipping, type boolean.
            By default, this is false, i.e., the viewport of the layer is the entire window.
            </summary>
        </member>
        <member name="P:Tizen.NUI.Layer.Viewport">
            <summary>
            Sets the viewport (in window coordinates), type rectangle.
            The contents of the layer will not be visible outside this box, when ViewportEnabled is true.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Layer.Opacity">
            <summary>
            Retrieves and sets the layer's opacity.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Layer.Visibility">
            <summary>
            Retrieves and sets the layer's visibility.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Layer.ChildCount">
            <summary>
            Get the number of children held by the layer.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Layer.Name">
            <summary>
            Gets or sets the layer's name.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.LongPressGesture">
            <summary>
            A long press gesture is emitted when the user holds the screen with the stated number of fingers.<br />
            A long press gesture finishes when all touches have been released.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.LongPressGesture.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            Dispose.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.LongPressGesture.NumberOfTouches">
            <summary>
            The number of touch points in this long press gesture, i.e., the number of fingers the user had
            on the screen to generate the long press gesture.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.LongPressGesture.ScreenPoint">
            <summary>
            This is the point, in screen coordinates, where the long press occurred.<br />
            If a multi-touch long press, then this is the centroid of all the touch points.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.LongPressGesture.LocalPoint">
            <summary>
            This is the point, in local actor coordinates, where the long press occurred.<br />
            If a multi-touch long press, then this is the centroid of all the touch points.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.LongPressGesture.#ctor(Tizen.NUI.Gesture.StateType)">
            <summary>
            The constructor.
            </summary>
            <param name="state">The state of the gesture</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.NUIApplication">
            <summary>
            Represents an application that have a UI screen. The NUIApplication class has a default stage.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="E:Tizen.NUI.NUIApplication.Resumed">
            <summary>
            Occurs whenever the application is resumed.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="E:Tizen.NUI.NUIApplication.Paused">
            <summary>
            Occurs whenever the application is paused.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.NUIApplication.resourceManager">
            <summary>
            The instance of ResourceManager.
            </summary>
        </member>
        <member name="M:Tizen.NUI.NUIApplication.#ctor">
            <summary>
            The default constructor.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.NUIApplication.#ctor(System.String)">
            <summary>
            The constructor with a stylesheet.
            </summary>
            <param name="styleSheet">The styleSheet url.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.NUIApplication.#ctor(System.String,Tizen.NUI.NUIApplication.WindowMode)">
            <summary>
            The constructor with a stylesheet and window mode.
            </summary>
            <param name="styleSheet">The styleSheet url.</param>
            <param name="windowMode">The windowMode.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.NUIApplication.OnLocaleChanged(Tizen.Applications.LocaleChangedEventArgs)">
            <summary>
            Overrides this method if you want to handle behavior.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.NUIApplication.OnLowBattery(Tizen.Applications.LowBatteryEventArgs)">
            <summary>
            Overrides this method if you want to handle behavior.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.NUIApplication.OnLowMemory(Tizen.Applications.LowMemoryEventArgs)">
            <summary>
            Overrides this method if you want to handle behavior.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.NUIApplication.OnRegionFormatChanged(Tizen.Applications.RegionFormatChangedEventArgs)">
            <summary>
            Overrides this method if you want to handle behavior.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.NUIApplication.OnTerminate">
            <summary>
            Overrides this method if you want to handle behavior.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.NUIApplication.OnPause">
            <summary>
            Overrides this method if you want to handle behavior.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.NUIApplication.OnResume">
            <summary>
            Overrides this method if you want to handle behavior.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.NUIApplication.OnPreCreate">
            <summary>
            Overrides this method if you want to handle behavior.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.NUIApplication.OnAppControlReceived(Tizen.Applications.AppControlReceivedEventArgs)">
            <summary>
            Overrides this method if you want to handle behavior.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.NUIApplication.OnCreate">
            <summary>
            Overrides this method if you want to handle behavior.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.NUIApplication.Run(System.String[])">
            <summary>
            Runs the NUIApplication.
            </summary>
            <param name="args">Arguments from commandline.</param>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.NUIApplication.Exit">
            <summary>
            Exits the NUIApplication.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.NUIApplication.AddIdle(System.Delegate)">
            <summary>
            Ensures that the function passed in is called from the main loop when it is idle.
            </summary>
            <param name="func">The function to call</param>
            <returns>true if added successfully, false otherwise</returns>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.NUIApplication.WindowMode">
            <summary>
            Enumeration for deciding whether a NUI application window is opaque or transparent.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.NUIApplication.WindowMode.Opaque">
            <summary>
            Opaque
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.NUIApplication.WindowMode.Transparent">
            <summary>
            Transparent
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.NUIApplication.MultilingualResourceManager">
            <summary>
            ResourceManager to handle multilingual.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.NUIApplication.Window">
            <summary>
            Gets the window instance.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ScrollModeType">
            <summary>
            This specifies all the scroll mode type.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.ScrollModeType.XAxisScrollEnabled">
            <summary>
            Whether the content can be scrolled along the X axis or not.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.ScrollModeType.XAxisSnapToInterval">
            <summary>
            When set, causes scroll view to snap to multiples of the
            value of the interval while flicking along the X axis.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.ScrollModeType.XAxisScrollBoundary">
            <summary>
            When set, the scroll view is unable to scroll beyond the
            value of the boundary along the X axis.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.ScrollModeType.YAxisScrollEnabled">
            <summary>
            Whether the content can be scrolled along the Y axis or not.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.ScrollModeType.YAxisSnapToInterval">
            <summary>
            When set, causes scroll view to snap to multiples of the
            value of the interval while flicking along the Y axis.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.ScrollModeType.YAxisScrollBoundary">
            <summary>
            When set, the scroll view is unable to scroll beyond the
            value of the boundary along the Y axis.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ColorMode">
            <summary>
            This specifies whether the actor uses its own color or inherits.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.ColorMode.UseOwnColor">
            <summary>
            Actor will use its own color.
            </summary>
        </member>
        <member name="F:Tizen.NUI.ColorMode.UseParentColor">
            <summary>
            Actor will use its parent color.
            </summary>
        </member>
        <member name="F:Tizen.NUI.ColorMode.UseOwnMultiplyParentColor">
            <summary>
            Actor will blend its color with its parents color.
            </summary>
        </member>
        <member name="F:Tizen.NUI.ColorMode.UseOwnMultiplyParentAlpha">
            <summary>
            Actor will blend its alpha with its parents alpha. This means when the parent fades in or out, the child does as well. This is the default.
            </summary>
        </member>
        <member name="T:Tizen.NUI.DimensionType">
            <summary>
            This specifies the dimension of the width or the height for size negotiation.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.DimensionType.Width">
            <summary>
            Width dimension.
            </summary>
        </member>
        <member name="F:Tizen.NUI.DimensionType.Height">
            <summary>
            Height dimension.
            </summary>
        </member>
        <member name="F:Tizen.NUI.DimensionType.AllDimensions">
            <summary>
            Mask to cover all flags.
            </summary>
        </member>
        <member name="T:Tizen.NUI.DrawModeType">
            <summary>
            Enumeration for the instance of how the actor and it's children will be drawn.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.DrawModeType.Normal">
            <summary>
            The default draw-mode.
            </summary>
        </member>
        <member name="F:Tizen.NUI.DrawModeType.Overlay2D">
            <summary>
            Draw the actor and its children as an overlay.
            </summary>
        </member>
        <member name="F:Tizen.NUI.DrawModeType.Stencil">
            <summary>
            Will be replaced by separate ClippingMode enum. Draw the actor and its children into the stencil buffer.
            </summary>
        </member>
        <member name="T:Tizen.NUI.ResizePolicyType">
            <summary>
            Enumeration for size negotiation resize policies.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.ResizePolicyType.Fixed">
            <summary>
            Size is fixed as set by SetSize.
            </summary>
        </member>
        <member name="F:Tizen.NUI.ResizePolicyType.UseNaturalSize">
            <summary>
            Size is to use the actor's natural size.
            </summary>
            <see cref="M:Tizen.NUI.ViewImpl.GetNaturalSize"/>
        </member>
        <member name="F:Tizen.NUI.ResizePolicyType.FillToParent">
            <summary>
            Size is to fill up to the actor's parent's bounds. Aspect ratio is not maintained.
            </summary>
        </member>
        <member name="F:Tizen.NUI.ResizePolicyType.SizeRelativeToParent">
            <summary>
            The actors size will be ( ParentSize * SizeRelativeToParentFactor ).
            </summary>
        </member>
        <member name="F:Tizen.NUI.ResizePolicyType.SizeFixedOffsetFromParent">
            <summary>
            The actors size will be ( ParentSize + SizeRelativeToParentFactor ).
            </summary>
        </member>
        <member name="F:Tizen.NUI.ResizePolicyType.FitToChildren">
            <summary>
            The size will adjust to wrap around all children.
            </summary>
        </member>
        <member name="F:Tizen.NUI.ResizePolicyType.DimensionDependency">
            <summary>
            One dimension is dependent on the other.
            </summary>
        </member>
        <member name="F:Tizen.NUI.ResizePolicyType.UseAssignedSize">
            <summary>
            The size will be assigned to the actor.
            </summary>
        </member>
        <member name="T:Tizen.NUI.SizeScalePolicyType">
            <summary>
            Enumeration for policies to determine how an actor should resize itself when having its size set in size negotiation.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.SizeScalePolicyType.UseSizeSet">
            <summary>
            Use the size that was set.
            </summary>
        </member>
        <member name="F:Tizen.NUI.SizeScalePolicyType.FitWithAspectRatio">
            <summary>
            Fit within the size set maintaining natural size aspect ratio.
            </summary>
        </member>
        <member name="F:Tizen.NUI.SizeScalePolicyType.FillWithAspectRatio">
            <summary>
            Fit within the size set maintaining natural size aspect ratio.
            </summary>
        </member>
        <member name="T:Tizen.NUI.ClippingModeType">
            <summary>
            Enumeration for the ClippingMode describing how this actor's children will be clipped against it.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.ClippingModeType.Disabled">
            <summary>
            This actor will not clip its children.
            </summary>
        </member>
        <member name="F:Tizen.NUI.ClippingModeType.ClipChildren">
            <summary>
            This actor will clip all children to within its boundaries (the actor will also be visible itself).
            </summary>
        </member>
        <member name="F:Tizen.NUI.ClippingModeType.ClipToBoundingBox">
            <summary>
            This Actor will clip all children within a screen-aligned rectangle encompassing its boundaries (the actor will also be visible itself).
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.CameraType">
            <summary>
            Enumeration for type determination of how the camera operates.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.CameraType.FreeLook">
            <summary>
            Camera orientation is taken from the CameraActor.
            </summary>
        </member>
        <member name="F:Tizen.NUI.CameraType.LookAtTarget">
            <summary>
            Camera is oriented to always look at a target.
            </summary>
        </member>
        <member name="T:Tizen.NUI.ProjectionMode">
            <summary>
            Enumeration for the projection modes.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.ProjectionMode.PerspectiveProjection">
            <summary>
            Distance causes foreshortening; objects further from the camera appear smaller.
            </summary>
        </member>
        <member name="F:Tizen.NUI.ProjectionMode.OrthographicProjection">
            <summary>
            Relative distance from the camera does not affect the size of objects.
            </summary>
        </member>
        <member name="T:Tizen.NUI.CustomViewBehaviour">
            <summary>
            This specifies customView behavior types.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.CustomViewBehaviour.ViewBehaviourDefault">
            <summary>
            Use to provide default behavior (size negotiation is on, event callbacks are not called).
            </summary>
        </member>
        <member name="F:Tizen.NUI.CustomViewBehaviour.DisableSizeNegotiation">
            <summary>
            True if the control does not need size negotiation, i.e., it can be skipped in the algorithm.
            </summary>
        </member>
        <member name="F:Tizen.NUI.CustomViewBehaviour.RequiresKeyboardNavigationSupport">
            <summary>
            Use to provide key navigation support.
            </summary>
        </member>
        <member name="F:Tizen.NUI.CustomViewBehaviour.DisableStyleChangeSignals">
            <summary>
            Use to make style change event disabled.
            </summary>
        </member>
        <member name="F:Tizen.NUI.CustomViewBehaviour.LastViewBehaviourFlag">
            <summary>
            Please do not use! This will be deprecated!
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.DeviceClassType">
            <summary>
            An enum of Device Class types.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.DeviceClassType.None">
            <summary>
            Not a device.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.DeviceClassType.Seat">
            <summary>
            The user/seat (the user themselves).
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.DeviceClassType.Keyboard">
            <summary>
            A regular keyboard, numberpad or attached buttons.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.DeviceClassType.Mouse">
            <summary>
            A mouse, trackball or touchpad relative motion device.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.DeviceClassType.Touch">
            <summary>
            A touchscreen with fingers or stylus.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.DeviceClassType.Pen">
            <summary>
            A special pen device.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.DeviceClassType.Pointer">
            <summary>
             A pointing device based on laser, infrared or similar technology.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.DeviceClassType.Gamepad">
            <summary>
            A gamepad controller or joystick.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.DeviceSubClassType">
            <summary>
            An enum of Device Subclass types.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.DeviceSubClassType.None">
            <summary>
            Not a device
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.DeviceSubClassType.Finger">
            <summary>
            The normal flat of your finger
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.DeviceSubClassType.Fingernail">
            <summary>
            A fingernail
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.DeviceSubClassType.Knuckle">
            <summary>
            A Knuckle
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.DeviceSubClassType.Palm">
            <summary>
            The palm of a users hand
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.DeviceSubClassType.HandSide">
            <summary>
            The side of your hand
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.DeviceSubClassType.HandFlat">
            <summary>
            The flat of your hand
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.DeviceSubClassType.PenTip">
            <summary>
            The tip of a pen
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.DeviceSubClassType.Trackpad">
            <summary>
            A trackpad style mouse
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.DeviceSubClassType.Trackpoint">
            <summary>
            A trackpoint style mouse
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.DeviceSubClassType.Trackball">
            <summary>
            A trackball style mouse
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.DeviceSubClassType.Remocon">
            <summary>
            A remote controller
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.DeviceSubClassType.VirtualKeyboard">
            <summary>
            A virtual keyboard
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.PropertyType">
            <summary>
            This specifies all the property types.<br />
            Enumeration for the property types supported.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.PropertyType.None">
            <summary>
            No type.
            </summary>
        </member>
        <member name="F:Tizen.NUI.PropertyType.Boolean">
            <summary>
            A boolean type.
            </summary>
        </member>
        <member name="F:Tizen.NUI.PropertyType.Float">
            <summary>
            A float type.
            </summary>
        </member>
        <member name="F:Tizen.NUI.PropertyType.Integer">
            <summary>
            An integer type.
            </summary>
        </member>
        <member name="F:Tizen.NUI.PropertyType.Vector2">
            <summary>
            A vector array of size=2 with float precision.
            </summary>
        </member>
        <member name="F:Tizen.NUI.PropertyType.Vector3">
            <summary>
            A vector array of size=3 with float precision.
            </summary>
        </member>
        <member name="F:Tizen.NUI.PropertyType.Vector4">
            <summary>
            A vector array of size=4 with float precision.
            </summary>
        </member>
        <member name="F:Tizen.NUI.PropertyType.Matrix3">
            <summary>
            A 3x3 matrix.
            </summary>
        </member>
        <member name="F:Tizen.NUI.PropertyType.Matrix">
            <summary>
            A 4x4 matrix.
            </summary>
        </member>
        <member name="F:Tizen.NUI.PropertyType.Rectangle">
            <summary>
            An integer array of size=4.
            </summary>
        </member>
        <member name="F:Tizen.NUI.PropertyType.Rotation">
            <summary>
            Either a quaternion or an axis angle rotation.
            </summary>
        </member>
        <member name="F:Tizen.NUI.PropertyType.String">
            <summary>
            A string type.
            </summary>
        </member>
        <member name="F:Tizen.NUI.PropertyType.Array">
            <summary>
            An array of PropertyValue.
            </summary>
        </member>
        <member name="F:Tizen.NUI.PropertyType.Map">
            <summary>
            A string key to PropertyValue mapping.
            </summary>
        </member>
        <member name="F:Tizen.NUI.PropertyType.Extents">
            <summary>
            An extents type.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.PropertyAccessMode">
            <summary>
            This specifies the property access mode types.<br />
            Enumeration for the access mode for custom properties.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.PropertyAccessMode.ReadOnly">
            <summary>
            If the property is read-only.
            </summary>
        </member>
        <member name="F:Tizen.NUI.PropertyAccessMode.ReadWrite">
            <summary>
            If the property is read or writeable.
            </summary>
        </member>
        <member name="F:Tizen.NUI.PropertyAccessMode.Animatable">
            <summary>
            If the property can be animated or constrained.
            </summary>
        </member>
        <member name="F:Tizen.NUI.PropertyAccessMode.AccessModeCount">
            <summary>
            The number of access modes.
            </summary>
        </member>
        <member name="T:Tizen.NUI.StyleChangeType">
            <summary>
            Types of style change. Enumeration for the StyleChange type.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.StyleChangeType.DefaultFontChange">
            <summary>
            Denotes that the default font has changed.
            </summary>
        </member>
        <member name="F:Tizen.NUI.StyleChangeType.DefaultFontSizeChange">
            <summary>
            Denotes that the default font size has changed.
            </summary>
        </member>
        <member name="F:Tizen.NUI.StyleChangeType.ThemeChange">
            <summary>
            Denotes that the theme has changed.
            </summary>
        </member>
        <member name="T:Tizen.NUI.HorizontalAlignmentType">
            <summary>
            Enumeration for horizontal alignment types.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.HorizontalAlignmentType.Left">
            <summary>
            Align horizontally left.
            </summary>
        </member>
        <member name="F:Tizen.NUI.HorizontalAlignmentType.Center">
            <summary>
            Align horizontally center.
            </summary>
        </member>
        <member name="F:Tizen.NUI.HorizontalAlignmentType.Right">
            <summary>
            Align horizontally right.
            </summary>
        </member>
        <member name="T:Tizen.NUI.VerticalAlignmentType">
            <summary>
            Enumeration for vertical alignment types.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.VerticalAlignmentType.Top">
            <summary>
            Align vertically top.
            </summary>
        </member>
        <member name="F:Tizen.NUI.VerticalAlignmentType.Center">
            <summary>
            Align vertically center.
            </summary>
        </member>
        <member name="F:Tizen.NUI.VerticalAlignmentType.Bottom">
            <summary>
            Align vertically bottom.
            </summary>
        </member>
        <member name="T:Tizen.NUI.PointStateType">
            <summary>
            Enumeration for point state type.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.PointStateType.Started">
            <summary>
            Touch or hover started.
            </summary>
        </member>
        <member name="F:Tizen.NUI.PointStateType.Finished">
            <summary>
            Touch or hover finished.
            </summary>
        </member>
        <member name="F:Tizen.NUI.PointStateType.Down">
            <summary>
            Screen touched.
            </summary>
        </member>
        <member name="F:Tizen.NUI.PointStateType.Up">
            <summary>
            Touch stopped.
            </summary>
        </member>
        <member name="F:Tizen.NUI.PointStateType.Motion">
            <summary>
            Finger dragged or hovered.
            </summary>
        </member>
        <member name="F:Tizen.NUI.PointStateType.Leave">
            <summary>
            Leave the boundary of an actor.
            </summary>
        </member>
        <member name="F:Tizen.NUI.PointStateType.Stationary">
            <summary>
            No change from last event. <br />
            Useful when a multi-point event occurs where all points are sent, but indicates that this particular point has not changed since the last time.
            </summary>
        </member>
        <member name="F:Tizen.NUI.PointStateType.Interrupted">
            <summary>
            A system event has occurred which has interrupted the touch or hover event sequence.
            </summary>
        </member>
        <member name="T:Tizen.NUI.HorizontalAlignment">
            <summary>
            Enumeration for the text horizontal aligning.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.HorizontalAlignment.Begin">
            <summary>
            Texts place at the begin of horizontal direction.
            </summary>
        </member>
        <member name="F:Tizen.NUI.HorizontalAlignment.Center">
            <summary>
            Texts place at the center of horizontal direction.
            </summary>
        </member>
        <member name="F:Tizen.NUI.HorizontalAlignment.End">
            <summary>
            Texts place at the end of horizontal direction.
            </summary>
        </member>
        <member name="T:Tizen.NUI.VerticalAlignment">
            <summary>
            Enumeration for the text horizontal aligning.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.VerticalAlignment.Top">
            <summary>
            Texts place at the top of vertical direction.
            </summary>
        </member>
        <member name="F:Tizen.NUI.VerticalAlignment.Center">
            <summary>
            Texts place at the center of vertical direction.
            </summary>
        </member>
        <member name="F:Tizen.NUI.VerticalAlignment.Bottom">
            <summary>
            Texts place at the bottom of vertical direction.
            </summary>
        </member>
        <member name="T:Tizen.NUI.WrapModeType">
            <summary>
            This specifies wrap mode types.<br />
            WrapModeU and WrapModeV separately decide how the texture should be sampled when the u and v coordinate exceeds the range of 0.0 to 1.0.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.WrapModeType.Default">
            <summary>
            The default value.
            </summary>
        </member>
        <member name="F:Tizen.NUI.WrapModeType.ClampToEdge">
            <summary>
            Clamp to edge.
            </summary>
        </member>
        <member name="F:Tizen.NUI.WrapModeType.Repeat">
            <summary>
            Repeat.
            </summary>
        </member>
        <member name="F:Tizen.NUI.WrapModeType.MirroredRepeat">
            <summary>
            Mirrored repeat.
            </summary>
        </member>
        <member name="T:Tizen.NUI.ReleasePolicyType">
            <summary>
            Specifies the Release Policy types <br />
            Decides if the image should be cached in different conditions
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.ReleasePolicyType.Detached">
            <summary>
            Image is released when visual detached from scene
            </summary>
        </member>
        <member name="F:Tizen.NUI.ReleasePolicyType.Destroyed">
            <summary>
            Image is only released when visual is destroyed
            </summary>
        </member>
        <member name="F:Tizen.NUI.ReleasePolicyType.Never">
            <summary>
            Image is not released.
            </summary>
        </member>
        <member name="T:Tizen.NUI.LoadPolicyType">
            <summary>
            Specifies the Load Policy types <br />
            Decides when the image texture should be loaded
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.LoadPolicyType.Immediate">
            <summary>
            Load texture once the image source has been provided. Even if not being used yet.
            </summary>
        </member>
        <member name="F:Tizen.NUI.LoadPolicyType.Attached">
            <summary>
            Only load texture once the visual is attached, when the image needs to be shown.
            </summary>
        </member>
        <member name="T:Tizen.NUI.GradientVisualUnitsType">
            <summary>
            The type of coordinate system for certain attributes of the points in a gradient.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.GradientVisualUnitsType.ObjectBoundingBox">
            <summary>
            Uses the normals for the start, end, and center points, i.e., top-left is (-0.5, -0.5) and bottom-right is (0.5, 0.5).
            </summary>
        </member>
        <member name="F:Tizen.NUI.GradientVisualUnitsType.UserSpace">
            <summary>
            Uses the user coordinates for the start, end, and center points, i.e., in a 200 by 200 control, top-left is (0, 0) and bottom-right is (200, 200).
            </summary>
        </member>
        <member name="T:Tizen.NUI.GradientVisualSpreadMethodType">
            <summary>
            This specifies SpreadMethod types.<br />
            SpreadMethod defines what happens if the gradient starts or ends inside the bounds of the target rectangle.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.GradientVisualSpreadMethodType.Pad">
            <summary>
            Uses the terminal colors of the gradient to fill the remainder of the quad.
            </summary>
        </member>
        <member name="F:Tizen.NUI.GradientVisualSpreadMethodType.Reflect">
            <summary>
            Reflects the gradient pattern start-to-end, end-to-start, start-to-end, etc. until the quad is filled.
            </summary>
        </member>
        <member name="F:Tizen.NUI.GradientVisualSpreadMethodType.Repeat">
            <summary>
            Repeats the gradient pattern start-to-end, start-to-end, start-to-end, etc. until the quad is filled.
            </summary>
        </member>
        <member name="T:Tizen.NUI.MeshVisualShadingModeValue">
            <summary>
            The shading mode used by the mesh visual.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.MeshVisualShadingModeValue.TexturelessWithDiffuseLighting">
            <summary>
            *Simplest*. One color that is lit by ambient and diffuse lighting.
            </summary>
        </member>
        <member name="F:Tizen.NUI.MeshVisualShadingModeValue.TexturedWithSpecularLighting">
            <summary>
            Uses only the visual image textures provided with specular lighting in addition to ambient and diffuse lighting.
            </summary>
        </member>
        <member name="F:Tizen.NUI.MeshVisualShadingModeValue.TexturedWithDetailedSpecularLighting">
            <summary>
            Uses all textures provided including gloss, normal, and texture map along with specular, ambient, and diffuse lighting.
            </summary>
        </member>
        <member name="T:Tizen.NUI.PrimitiveVisualShapeType">
            <summary>
            The primitive shape to render as a primitive visual.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.PrimitiveVisualShapeType.Sphere">
            <summary>
            A perfectly round geometrical object in the three-dimensional space.
            </summary>
        </member>
        <member name="F:Tizen.NUI.PrimitiveVisualShapeType.ConicalFrustrum">
            <summary>
            The area bound between two circles, i.e., a cone with the tip removed.
            </summary>
        </member>
        <member name="F:Tizen.NUI.PrimitiveVisualShapeType.Cone">
            <summary>
            Equivalent to a conical frustrum with the top radius of zero.
            </summary>Equivalent to a conical frustrum with the top radius of zero.
        </member>
        <member name="F:Tizen.NUI.PrimitiveVisualShapeType.Cylinder">
            <summary>
            Equivalent to a conical frustrum with the top radius of zero.
            </summary>
        </member>
        <member name="F:Tizen.NUI.PrimitiveVisualShapeType.Cube">
            <summary>
            Equivalent to a conical frustrum with equal radii for the top and bottom circles.
            </summary>
        </member>
        <member name="F:Tizen.NUI.PrimitiveVisualShapeType.Octahedron">
            <summary>
            Equivalent to a bevelled cube with a bevel percentage of zero.
            </summary>
        </member>
        <member name="F:Tizen.NUI.PrimitiveVisualShapeType.BevelledCube">
            <summary>
            Equivalent to a bevelled cube with a bevel percentage of one.
            </summary>
        </member>
        <member name="T:Tizen.NUI.FittingModeType">
            <summary>
            This specifies fitting mode types. Fitting options, used when resizing images to fit desired dimensions.<br />
            A fitting mode controls the region of a loaded image to be mapped to the desired image rectangle.<br />
            All fitting modes preserve the aspect ratio of the image contents.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.FittingModeType.ShrinkToFit">
            <summary>
            Full-screen image display: Limit loaded image resolution to device resolution using the ShrinkToFit mode.
            </summary>
        </member>
        <member name="F:Tizen.NUI.FittingModeType.ScaleToFill">
            <summary>
            Thumbnail gallery grid: Limit loaded image resolution to screen tile using the ScaleToFill mode.
            </summary>
        </member>
        <member name="F:Tizen.NUI.FittingModeType.FitWidth">
            <summary>
            Image columns: Limit loaded image resolution to column width using the FitWidth mode.
            </summary>
        </member>
        <member name="F:Tizen.NUI.FittingModeType.FitHeight">
            <summary>
            Image rows: Limit loaded image resolution to row height using the FitHeight mode.
            </summary>
        </member>
        <member name="T:Tizen.NUI.SamplingModeType">
            <summary>
            This specifies sampling mode types. Filtering options are used when resizing images to sample original pixels.<br />
            A SamplingMode controls how pixels in an input image are sampled and combined to generate each pixel of a destination image during scaling.<br />
            NoFilter and Box modes do not guarantee that the output pixel array exactly matches the rectangle specified by the desired dimensions and the FittingMode,<br />
            but all other filter modes do if the desired dimensions are not more than the raw dimensions of the input image file.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.SamplingModeType.Box">
            <summary>
            Iteratively box filter to generate an image of 1/2, 1/4, 1/8, etc. width and height and approximately the desired size. <br />
            This is the default.
            </summary>
        </member>
        <member name="F:Tizen.NUI.SamplingModeType.Nearest">
            <summary>
            For each output pixel, read one input pixel.
            </summary>
        </member>
        <member name="F:Tizen.NUI.SamplingModeType.Linear">
            <summary>
            For each output pixel, read a quad of four input pixels and write a weighted average of them.
            </summary>
        </member>
        <member name="F:Tizen.NUI.SamplingModeType.BoxThenNearest">
            <summary>
            Iteratively box filter to generate an image of 1/2, 1/4, 1/8, etc. width and height and approximately the desired size, <br />
            then for each output pixel, read one pixel from the last level of box filtering.<br />
            </summary>
        </member>
        <member name="F:Tizen.NUI.SamplingModeType.BoxThenLinear">
            <summary>
            Iteratively box filter to almost the right size, then for each output pixel, read four pixels from the last level of box filtering and write their weighted average.
            </summary>
        </member>
        <member name="F:Tizen.NUI.SamplingModeType.NoFilter">
            <summary>
            No filtering is performed. If the SCALE_TO_FILL scaling mode is enabled, the borders of the image may be trimmed to match the aspect ratio of the desired dimensions.
            </summary>
        </member>
        <member name="F:Tizen.NUI.SamplingModeType.DontCare">
            <summary>
            For caching algorithms where a client strongly prefers a cache-hit to reuse a cached image.
            </summary>
        </member>
        <member name="T:Tizen.NUI.VisualTransformPolicyType">
            <summary>
            This specifies policy types that could be used by the transform for the offset or size.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.VisualTransformPolicyType.Relative">
            <summary>
            Relative to the control (percentage [0.0f to 1.0f] of the control).
            </summary>
        </member>
        <member name="F:Tizen.NUI.VisualTransformPolicyType.Absolute">
            <summary>
            Absolute value in world units.
            </summary>
        </member>
        <member name="T:Tizen.NUI.VisualTransformPropertyType">
            <summary>
            This specifies all the transform property types.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.VisualTransformPropertyType.Offset">
            <summary>
            Offset of the visual, which can be either relative (percentage [0.0f to 1.0f] of the parent) or absolute (in world units).
            </summary>
        </member>
        <member name="F:Tizen.NUI.VisualTransformPropertyType.Size">
            <summary>
            Size of the visual, which can be either relative (percentage [0.0f to 1.0f] of the parent) or absolute (in world units).
            </summary>
        </member>
        <member name="F:Tizen.NUI.VisualTransformPropertyType.Origin">
            <summary>
            The origin of the visual within its control area.
            </summary>
        </member>
        <member name="F:Tizen.NUI.VisualTransformPropertyType.AnchorPoint">
            <summary>
            The anchor-point of the visual.
            </summary>
        </member>
        <member name="F:Tizen.NUI.VisualTransformPropertyType.OffsetPolicy">
            <summary>
            Whether the x or y offset values are relative (percentage [0.0f to 1.0f] of the control) or absolute (in world units).
            </summary>
        </member>
        <member name="F:Tizen.NUI.VisualTransformPropertyType.SizePolicy">
            <summary>
            Whether the width or the height size values are relative (percentage [0.0f to 1.0f] of the control) or absolute (in world units).
            </summary>
        </member>
        <member name="T:Tizen.NUI.Visual">
            <summary>
            This specifies visual types.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.Visual.Type">
            <summary>
            The index for the visual type.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Visual.Type.Border">
            <summary>
            Renders a solid color as an internal border to the control's quad.
            </summary>
        </member>
        <member name="F:Tizen.NUI.Visual.Type.Color">
            <summary>
            Renders a solid color to the control's quad.
            </summary>
        </member>
        <member name="F:Tizen.NUI.Visual.Type.Gradient">
            <summary>
            Renders a smooth transition of colors to the control's quad.
            </summary>
        </member>
        <member name="F:Tizen.NUI.Visual.Type.Image">
            <summary>
            Renders an image into the control's quad.
            </summary>
        </member>
        <member name="F:Tizen.NUI.Visual.Type.Mesh">
            <summary>
            Renders a mesh using an "obj" file, optionally with textures provided by an "mtl" file.
            </summary>
        </member>
        <member name="F:Tizen.NUI.Visual.Type.Primitive">
            <summary>
            Renders a simple 3D shape, such as a cube or a sphere.
            </summary>
        </member>
        <member name="F:Tizen.NUI.Visual.Type.Wireframe">
            <summary>
            Renders a simple wire-frame outlining a quad.
            </summary>
        </member>
        <member name="F:Tizen.NUI.Visual.Type.Text">
            <summary>
            Renders text.
            </summary>
        </member>
        <member name="F:Tizen.NUI.Visual.Type.NPatch">
            <summary>
            Renders an n-patch image.
            </summary>
        </member>
        <member name="F:Tizen.NUI.Visual.Type.SVG">
            <summary>
            Renders an SVG image.
            </summary>
        </member>
        <member name="F:Tizen.NUI.Visual.Type.AnimatedImage">
            <summary>
            Renders a animated image (animated GIF).
            </summary>
        </member>
        <member name="T:Tizen.NUI.Visual.Property">
            <summary>
            This specifies visual properties.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Visual.Property.Type">
            <summary>
            Type.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Visual.Property.Shader">
            <summary>
            Shader.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Visual.Property.Transform">
            <summary>
            Transform.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Visual.Property.PremultipliedAlpha">
            <summary>
            PremultipliedAlpha.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Visual.Property.MixColor">
            <summary>
            MixColor.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Visual.Property.Opacity">
            <summary>
            Opacity.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.Visual.ShaderProperty">
            <summary>
            This specifies shader properties.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Visual.ShaderProperty.VertexShader">
            <summary>
            Vertex shader code
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Visual.ShaderProperty.FragmentShader">
            <summary>
            Fragment shader code
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Visual.ShaderProperty.ShaderSubdivideGridX">
            <summary>
            How to subdivide the grid along X
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Visual.ShaderProperty.ShaderSubdivideGridY">
            <summary>
            How to subdivide the grid along Y
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Visual.ShaderProperty.ShaderHints">
            <summary>
            Bitmask of hints
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.Visual.AlignType">
            <summary>
            This specifies visaul align types.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Visual.AlignType.TopBegin">
            <summary>
            TopBegin
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Visual.AlignType.TopCenter">
            <summary>
            TopCenter
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Visual.AlignType.TopEnd">
            <summary>
            TopEnd
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Visual.AlignType.CenterBegin">
            <summary>
            CenterBegin
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Visual.AlignType.Center">
            <summary>
            Center
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Visual.AlignType.CenterEnd">
            <summary>
            CenterEnd
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Visual.AlignType.BottomBegin">
            <summary>
            BottomBegin
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Visual.AlignType.BottomCenter">
            <summary>
            BottomCenter
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Visual.AlignType.BottomEnd">
            <summary>
            BottomEnd
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.BorderVisualProperty">
            <summary>
            This specifies properties of the BorderVisual.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.BorderVisualProperty.Color">
            <summary>
            The color of the border.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.BorderVisualProperty.Size">
            <summary>
            The width of the border (in pixels).
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.BorderVisualProperty.AntiAliasing">
            <summary>
            Whether anti-aliasing of the border is required.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ColorVisualProperty">
            <summary>
            This specifies properties of the ColorVisual.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.ColorVisualProperty.MixColor">
            <summary>
            The solid color required.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.GradientVisualProperty">
            <summary>
            This specifies properties of the GradientVisual.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.GradientVisualProperty.StartPosition">
            <summary>
            The start position of a linear gradient.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.GradientVisualProperty.EndPosition">
            <summary>
            The end position of a linear gradient.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.GradientVisualProperty.Center">
            <summary>
            The center point of a radial gradient.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.GradientVisualProperty.Radius">
            <summary>
            The size of the radius of a radial gradient.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.GradientVisualProperty.StopOffset">
            <summary>
            All the stop offsets.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.GradientVisualProperty.StopColor">
            <summary>
            The color at the stop offsets.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.GradientVisualProperty.Units">
            <summary>
            Defines the coordinate system for certain attributes of the points in a gradient.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.GradientVisualProperty.SpreadMethod">
            <summary>
            Indicates what happens if the gradient starts or ends inside the bounds of the target rectangle.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ImageVisualProperty">
            <summary>
            This specifies properties of the ImageVisual.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.ImageVisualProperty.URL">
            <summary>
            The URL of the image.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.ImageVisualProperty.AlphaMaskURL">
            <summary>
            The URL of the alpha mask image.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.ImageVisualProperty.FittingMode">
            <summary>
            Fitting options, used when resizing images to fit desired dimensions.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.ImageVisualProperty.SamplingMode">
            <summary>
            Filtering options, used when resizing images to sample original pixels.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.ImageVisualProperty.DesiredWidth">
            <summary>
            The desired image width.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.ImageVisualProperty.DesiredHeight">
            <summary>
            The desired image height.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.ImageVisualProperty.SynchronousLoading">
            <summary>
            Whether to load the image synchronously.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.ImageVisualProperty.BorderOnly">
            <summary>
            If true, only draws the borders.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.ImageVisualProperty.PixelArea">
            <summary>
            The image area to be displayed.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.ImageVisualProperty.WrapModeU">
            <summary>
            The wrap mode for u coordinate.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.ImageVisualProperty.WrapModeV">
            <summary>
            The wrap mode for v coordinate.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.ImageVisualProperty.Border">
            <summary>
            The border of the image.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.ImageVisualProperty.MaskContentScale">
            <summary>
            The scale factor to apply to the content image before masking.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.ImageVisualProperty.CropToMask">
            <summary>
            Whether to crop image to mask or scale mask to fit image
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.ImageVisualProperty.BatchSize">
            <summary>
            Defines the batch size for pre-loading images in the AnimatedImageVisual
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.ImageVisualProperty.CacheSize">
            <summary>
            Defines the cache size for loading images in the AnimatedImageVisual
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.ImageVisualProperty.FrameDelay">
            <summary>
            The number of milliseconds between each frame in the AnimatedImageVisual
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Tizen.NUI.ImageVisualProperty.LoopCount" -->
        <member name="F:Tizen.NUI.ImageVisualProperty.ReleasePolicy">
            <summary>
            The policy to determine when an image should no longer be cached
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.ImageVisualProperty.LoadPolicy">
            <summary>
            The policy to determine when an image should be loaded
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.ImageVisualProperty.OrientationCorrection">
            <summary>
            Determines if image orientation should be corrected so the image displays as it was intended
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.ImageVisualProperty.AuxiliaryImageURL">
            <summary>
            Overlays the auxiliary image on top of an NPatch image.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.ImageVisualProperty.AuxiliaryImageAlpha">
            <summary>
            Alpha value for the auxiliary image, without affecting the underlying NPatch image
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.MeshVisualProperty">
            <summary>
            This specifies properties of the MeshVisual.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.MeshVisualProperty.ObjectURL">
            <summary>
            The location of the ".obj" file.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.MeshVisualProperty.MaterialtURL">
            <summary>
            The location of the ".mtl" file.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.MeshVisualProperty.TexturesPath">
            <summary>
            Path to the directory the textures (including gloss and normal) are stored in.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.MeshVisualProperty.ShadingMode">
            <summary>
            Sets the type of shading mode that the mesh will use.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.MeshVisualProperty.UseMipmapping">
            <summary>
            Whether to use mipmaps for textures or not.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.MeshVisualProperty.UseSoftNormals">
            <summary>
            Whether to average normals at each point to smooth textures or not.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.MeshVisualProperty.LightPosition">
            <summary>
            The position, in stage space, of the point light that applies lighting to the model.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.PrimitiveVisualProperty">
            <summary>
            This specifies properties of the PrimitiveVisual.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.PrimitiveVisualProperty.Shape">
            <summary>
            The specific shape to render.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.PrimitiveVisualProperty.MixColor">
            <summary>
            The color of the shape.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.PrimitiveVisualProperty.Slices">
            <summary>
            The number of slices as you go around the shape.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.PrimitiveVisualProperty.Stacks">
            <summary>
            The number of stacks as you go down the shape.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.PrimitiveVisualProperty.ScaleTopRadius">
            <summary>
            The scale of the radius of the top circle of a conical frustrum.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.PrimitiveVisualProperty.ScaleBottomRadius">
            <summary>
            The scale of the radius of the bottom circle of a conical frustrum.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.PrimitiveVisualProperty.ScaleHeight">
            <summary>
            The scale of the height of a conic.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.PrimitiveVisualProperty.ScaleRadius">
            <summary>
            The scale of the radius of a cylinder.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.PrimitiveVisualProperty.ScaleDimensions">
            <summary>
            The dimensions of a cuboid. Scales in the same fashion as a 9-patch image.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.PrimitiveVisualProperty.BevelPercentage">
            <summary>
            Determines how bevelled the cuboid should be, based off the smallest dimension.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.PrimitiveVisualProperty.BevelSmoothness">
            <summary>
            Defines how smooth the bevelled edges should be.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.PrimitiveVisualProperty.LightPosition">
            <summary>
            The position, in stage space, of the point light that applies lighting to the model.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.TextVisualProperty">
            <summary>
            This specifies properties of the TextVisual.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.TextVisualProperty.Text">
            <summary>
            The text to display in UTF-8 format.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.TextVisualProperty.FontFamily">
            <summary>
            The requested font family to use.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.TextVisualProperty.FontStyle">
            <summary>
            The requested font style to use.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.TextVisualProperty.PointSize">
            <summary>
            The size of font in points.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.TextVisualProperty.MultiLine">
            <summary>
            The single-line or multi-line layout option.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.TextVisualProperty.HorizontalAlignment">
            <summary>
            The line horizontal alignment.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.TextVisualProperty.VerticalAlignment">
            <summary>
            The line vertical alignment.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.TextVisualProperty.TextColor">
            <summary>
            The color of the text.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.TextVisualProperty.EnableMarkup">
            <summary>
            Whether the mark-up processing is enabled.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.NpatchImageVisualProperty">
            <summary>
            This specifies properties of the NpatchImageVisual.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.NpatchImageVisualProperty.URL">
            <summary>
            The URL of the image.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.NpatchImageVisualProperty.FittingMode">
            <summary>
            Fitting options, used when resizing images to fit desired dimensions.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.NpatchImageVisualProperty.SamplingMode">
            <summary>
            Filtering options, used when resizing images to sample original pixels.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.NpatchImageVisualProperty.DesiredWidth">
            <summary>
            The desired image width.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.NpatchImageVisualProperty.DesiredHeight">
            <summary>
            The desired image height.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.NpatchImageVisualProperty.SynchronousLoading">
            <summary>
            Whether to load the image synchronously.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.NpatchImageVisualProperty.BorderOnly">
            <summary>
            If true, only draws the borders.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.NpatchImageVisualProperty.PixelArea">
            <summary>
            The image area to be displayed.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.NpatchImageVisualProperty.WrapModeU">
            <summary>
            The wrap mode for u coordinate.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.NpatchImageVisualProperty.WrapModeV">
            <summary>
            The wrap mode for v coordinate.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.NpatchImageVisualProperty.Border">
            <summary>
            The border of the image.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.HiddenInputProperty">
            <summary>
            The HiddenInput property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.HiddenInputProperty.Mode">
            <summary>
            The mode for input text display.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.HiddenInputProperty.SubstituteCharacter">
            <summary>
            All input characters are substituted by this character.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.HiddenInputProperty.SubstituteCount">
            <summary>
            Length of text to show or hide, available when HIDE_COUNT/SHOW_COUNT mode is used.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.HiddenInputProperty.ShowLastCharacterDuration">
            <summary>
            Hide last character after this duration, available when SHOW_LAST_CHARACTER mode.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.HiddenInputModeType">
            <summary>
            The type for HiddenInput mode.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.HiddenInputModeType.HideNone">
            <summary>
            Don't hide text.
            </summary>
        </member>
        <member name="F:Tizen.NUI.HiddenInputModeType.HideAll">
            <summary>
            Hide all the input text.
            </summary>
        </member>
        <member name="F:Tizen.NUI.HiddenInputModeType.HideCount">
            <summary>
            Hide n characters from start.
            </summary>
        </member>
        <member name="F:Tizen.NUI.HiddenInputModeType.ShowCount">
            <summary>
            Show n characters from start.
            </summary>
        </member>
        <member name="F:Tizen.NUI.HiddenInputModeType.ShowLastCharacter">
            <summary>
            Show last character for the duration(use ShowLastCharacterDuration property to modify duration).
            </summary>
        </member>
        <member name="T:Tizen.NUI.ParentOrigin">
            <summary>
            ParentOrigin constants.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.ParentOrigin.Top">
            <summary>
            Top
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.ParentOrigin.Bottom">
            <summary>
            Bottom
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.ParentOrigin.Left">
            <summary>
            Left
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.ParentOrigin.Right">
            <summary>
            Right
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.ParentOrigin.Middle">
            <summary>
            Middle
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.ParentOrigin.TopLeft">
            <summary>
            TopLeft
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.ParentOrigin.TopCenter">
            <summary>
            TopCenter
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.ParentOrigin.TopRight">
            <summary>
            TopRight
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.ParentOrigin.CenterLeft">
            <summary>
            CenterLeft
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.ParentOrigin.Center">
            <summary>
            Center
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.ParentOrigin.CenterRight">
            <summary>
            CenterRight
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.ParentOrigin.BottomLeft">
            <summary>
            BottomLeft
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.ParentOrigin.BottomCenter">
            <summary>
            BottomCenter
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.ParentOrigin.BottomRight">
            <summary>
            BottomRight
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.PivotPoint">
            <summary>
            PivotPoint constants.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.PivotPoint.Top">
            <summary>
            Top
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.PivotPoint.Bottom">
            <summary>
            Bottom
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.PivotPoint.Left">
            <summary>
            Left
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.PivotPoint.Right">
            <summary>
            Right
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.PivotPoint.Middle">
            <summary>
            Middle
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.PivotPoint.TopLeft">
            <summary>
            TopLeft
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.PivotPoint.TopCenter">
            <summary>
            TopCenter
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.PivotPoint.TopRight">
            <summary>
            TopRight
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.PivotPoint.CenterLeft">
            <summary>
            CenterLeft
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.PivotPoint.Center">
            <summary>
            Center
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.PivotPoint.CenterRight">
            <summary>
            CenterRight
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.PivotPoint.BottomLeft">
            <summary>
            BottomLeft
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.PivotPoint.BottomCenter">
            <summary>
            BottomCenter
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.PivotPoint.BottomRight">
            <summary>
            BottomRight
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.PositionAxis">
            <summary>
            PositionAxis constants.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.PositionAxis.X">
            <summary>
            The X axis
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.PositionAxis.Y">
            <summary>
            The Y axis
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.PositionAxis.Z">
            <summary>
            The Z axis
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.PositionAxis.NegativeX">
            <summary>
            The Negative X axis
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.PositionAxis.NegativeY">
            <summary>
            The Negative Y axis
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.PositionAxis.NegativeZ">
            <summary>
            The Negative Z axis
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.AutoScrollStopMode">
            <summary>
            Auto scrolling stop behavior.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.AutoScrollStopMode.FinishLoop">
            <summary>
            Stop animation after current loop finished.
            </summary>
        </member>
        <member name="F:Tizen.NUI.AutoScrollStopMode.Immediate">
            <summary>
            Stop animation immediately and reset position.
            </summary>
        </member>
        <member name="T:Tizen.NUI.ScreenOffMode">
            <summary>
            An enum of screen mode.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.ScreenOffMode.Timout">
            <summary>
            The mode which turns the screen off after a timeout.
            </summary>
        </member>
        <member name="F:Tizen.NUI.ScreenOffMode.Never">
            <summary>
            The mode which keeps the screen turned on.
            </summary>
        </member>
        <member name="T:Tizen.NUI.NotificationLevel">
            <summary>
            An enum of notification window's priority level.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.NotificationLevel.None">
            <summary>
            No notification level.<br />
            Default level.<br />
            This value makes the notification window place in the layer of the normal window.
            </summary>
        </member>
        <member name="F:Tizen.NUI.NotificationLevel.Base">
            <summary>
            The base nofitication level.
            </summary>
        </member>
        <member name="F:Tizen.NUI.NotificationLevel.Medium">
            <summary>
            The medium notification level than base.
            </summary>
        </member>
        <member name="F:Tizen.NUI.NotificationLevel.High">
            <summary>
            The higher notification level than medium.
            </summary>
        </member>
        <member name="F:Tizen.NUI.NotificationLevel.Top">
            <summary>
            The highest notification level.
            </summary>
        </member>
        <member name="T:Tizen.NUI.WindowType">
            <summary>
            An enum of window types.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.WindowType.Normal">
            <summary>
            A default window type.<br />
            Indicates a normal or top-level window.
            Almost every window will be created with this type.
            </summary>
        </member>
        <member name="F:Tizen.NUI.WindowType.Notification">
            <summary>
            A notification window, like a warning about battery life or a new email received.
            </summary>
        </member>
        <member name="F:Tizen.NUI.WindowType.Utility">
            <summary>
            A persistent utility window, like a toolbox or a palette.
            </summary>
        </member>
        <member name="F:Tizen.NUI.WindowType.Dialog">
            <summary>
            Used for simple dialog windows.
            </summary>
        </member>
        <member name="T:Tizen.NUI.DisposeTypes">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.DisposeTypes.Explicit">
            <summary>
            Called By User
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.DisposeTypes.Implicit">
            <summary>
            Called by DisposeQueue
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.AnchorPoint">
            <summary>
            [Obsolete("Please do not use! this will be deprecated")]
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.AnchorPoint.Top">
            <summary>
            Top
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.AnchorPoint.Bottom">
            <summary>
            Bottom
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.AnchorPoint.Left">
            <summary>
            Left
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.AnchorPoint.Right">
            <summary>
            Right
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.AnchorPoint.Middle">
            <summary>
            Middle
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.AnchorPoint.TopLeft">
            <summary>
            TopLeft
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.AnchorPoint.TopCenter">
            <summary>
            TopCenter
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.AnchorPoint.TopRight">
            <summary>
            TopRight
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.AnchorPoint.CenterLeft">
            <summary>
            CenterLeft
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.AnchorPoint.Center">
            <summary>
            Center
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.AnchorPoint.CenterRight">
            <summary>
            CenterRight
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.AnchorPoint.BottomLeft">
            <summary>
            BottomLeft
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.AnchorPoint.BottomCenter">
            <summary>
            BottomCenter
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.AnchorPoint.BottomRight">
            <summary>
            BottomRight
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ScrollState">
            <summary>
            An enum of the scroll state of the text eidtor.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.ScrollState.Started">
            <summary>
            Scrolling is started.
            </summary>
        </member>
        <member name="F:Tizen.NUI.ScrollState.Finished">
            <summary>
            Scrolling is finished.
            </summary>
        </member>
        <member name="T:Tizen.NUI.LineWrapMode">
            <summary>
            An enum of the line wrap mode of text controls.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.LineWrapMode.Word">
            <summary>
            The word mode will move a word to the next line.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.LineWrapMode.Character">
            <summary>
            character will move character by character to the next line.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.TextDirection">
            <summary>
            An enum of text direction.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.TextDirection.LeftToRight">
            <summary>
            Text direction is from left to right.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.TextDirection.RightToLeft">
            <summary>
            Text direction is from right to left.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.VerticalLineAlignment">
            <summary>
            An enum of vertical line alignment.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.VerticalLineAlignment.Top">
            <summary>
            vertical line alignment is from top. 
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.VerticalLineAlignment.Center">
            <summary>
            vertical line alignment is from center.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.VerticalLineAlignment.Bottom">
            <summary>
            vertical line alignment is from bottom.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.FontSlantType">
            <summary>
            Enumeration type for the font's slant.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.FontSlantType.None">
            <summary>
            None.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.FontSlantType.Normal">
            <summary>
            Normal.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.FontSlantType.Roman">
            <summary>
            Roman.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.FontSlantType.Italic">
            <summary>
            Italic.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.FontSlantType.Oblique">
            <summary>
            Oblique.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.FontWeightType">
            <summary>
            Enumeration type for the font's weight.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.FontWeightType.None">
            <summary>
            None.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.FontWeightType.Thin">
            <summary>
            Thin.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.FontWeightType.UltraLight">
            <summary>
            UltraLight.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.FontWeightType.ExtraLight">
            <summary>
            ExtraLight.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.FontWeightType.Light">
            <summary>
            Light.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.FontWeightType.DemiLight">
            <summary>
            DemiLight.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.FontWeightType.SemiLight">
            <summary>
            SemiLight.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.FontWeightType.Book">
            <summary>
            Book.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.FontWeightType.Normal">
            <summary>
            Normal.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.FontWeightType.Regular">
            <summary>
            Regular.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.FontWeightType.Medium">
            <summary>
            Medium.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.FontWeightType.DemiBold">
            <summary>
            DemiBold.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.FontWeightType.SemiBold">
            <summary>
            SemiBold.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.FontWeightType.Bold">
            <summary>
            Bold.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.FontWeightType.UltraBold">
            <summary>
            UltraBold.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.FontWeightType.ExtraBold">
            <summary>
            ExtraBold.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.FontWeightType.Black">
            <summary>
            Black.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.FontWeightType.Heavy">
            <summary>
            Heavy.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.FontWeightType.ExtraBlack">
            <summary>
            ExtraBlack.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.FontWidthType">
            <summary>
            Enumeration type for the font's width.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.FontWidthType.None">
            <summary>
            None.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.FontWidthType.UltraCondensed">
            <summary>
            UltraCondensed.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.FontWidthType.ExtraCondensed">
            <summary>
            ExtraCondensed.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.FontWidthType.Condensed">
            <summary>
            Condensed.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.FontWidthType.SemiCondensed">
            <summary>
            SemiCondensed.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.FontWidthType.Normal">
            <summary>
            Normal.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.FontWidthType.SemiExpanded">
            <summary>
            SemiExpanded.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.FontWidthType.Expanded">
            <summary>
            Expanded.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.FontWidthType.ExtraExpanded">
            <summary>
            ExtraExpanded.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.FontWidthType.UltraExpanded">
            <summary>
            UltraExpanded.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.GlyphType">
            <summary>
            Enumeration type for the glyph type
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.GlyphType.BitmapGlyph">
            <summary>
            Glyph stored as pixels.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.GlyphType.VectorGlyph">
            <summary>
            Glyph stored as vectors (scalable). This feature requires highp shader support and is not available on all platforms.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.NUIWidgetApplication">
            <summary>
            Represents an application that have UI screen. The NUIWidgetApplication class has a default stage.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.NUIWidgetApplication.#ctor(System.Type)">
            <summary>
            The default constructor.
            </summary>
            <remarks>Widget ID will be replaced as the application ID.</remarks>
            <param name="widgetType">Derived widget class type.</param>
        </member>
        <member name="M:Tizen.NUI.NUIWidgetApplication.#ctor(System.Type,System.String)">
            <summary>
            The default constructor with stylesheet.
            </summary>
            <remarks>Widget ID will be replaced as the application ID.</remarks>
            <param name="widgetType">Derived widget class type.</param>
            <param name="styleSheet">The styleSheet url.</param>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.NUIWidgetApplication.OnLocaleChanged(Tizen.Applications.LocaleChangedEventArgs)">
            <summary>
            Overrides this method if want to handle OnLocaleChanged behavior.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.NUIWidgetApplication.OnLowBattery(Tizen.Applications.LowBatteryEventArgs)">
            <summary>
            Overrides this method if want to handle OnLowBattery behavior.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.NUIWidgetApplication.OnLowMemory(Tizen.Applications.LowMemoryEventArgs)">
            <summary>
            Overrides this method if want to handle OnLowMemory behavior.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.NUIWidgetApplication.OnRegionFormatChanged(Tizen.Applications.RegionFormatChangedEventArgs)">
            <summary>
            Overrides this method if want to handle OnRegionFormatChanged behavior.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.NUIWidgetApplication.OnTerminate">
            <summary>
            Overrides this method if want to handle OnTerminate behavior.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.NUIWidgetApplication.OnPreCreate">
            <summary>
            Overrides this method if want to handle OnPreCreate behavior.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.NUIWidgetApplication.OnCreate">
            <summary>
            Overrides this method if want to handle OnCreate behavior.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.NUIWidgetApplication.Run(System.String[])">
            <summary>
            Run NUIWidgetApplication.
            </summary>
            <param name="args">Arguments from commandline.</param>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.NUIWidgetApplication.Exit">
            <summary>
            Exit NUIWidgetApplication.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.PaddingType">
            <summary>
            The gesture state.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.PaddingType.swigCMemOwn">
            <summary>
            swigCMemOwn
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.PaddingType.disposed">
            <summary>
            A Flat to check if it is already disposed.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PaddingType.Finalize">
            <summary>
            Dispose.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PaddingType.Dispose">
            <summary>
            Dispose.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PaddingType.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            Dispose.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PaddingType.op_Equality(Tizen.NUI.PaddingType,Tizen.NUI.PaddingType)">
            <summary>
            Equality operator.
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>True if the values are identical</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PaddingType.op_Inequality(Tizen.NUI.PaddingType,Tizen.NUI.PaddingType)">
            <summary>
            Inequality operator.
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>True if the values are not identical</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PaddingType.Equals(System.Object)">
            <summary>
            Equals
            </summary>
            <param name="o">The object should be compared.</param>
            <returns>True if equal.</returns>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PaddingType.GetHashCode">
            <summary>
            Gets the the hash code of this baseHandle.
            </summary>
            <returns>The Hash Code.</returns>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.PaddingType.Start">
            <summary>
            The Start value.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.PaddingType.End">
            <summary>
            The End value.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.PaddingType.Top">
            <summary>
            The Top value.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.PaddingType.Bottom">
            <summary>
            The Bottom value.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PaddingType.#ctor">
            <summary>
            Creates an uninitialized PaddingType.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PaddingType.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            PaddingType Constructor.
            </summary>
            <param name="start">Start padding or X coordinate</param>
            <param name="end">End padding or Y coordinate</param>
            <param name="top">Top padding or Height</param>
            <param name="bottom">Bottom padding or Width</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PaddingType.Set(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Assignment from individual values.
            </summary>
            <param name="newStart">Start padding or X coordinate</param>
            <param name="newEnd">End padding or Y coordinate</param>
            <param name="newTop">Top padding or Height</param>
            <param name="newBottom">Bottom padding or Width</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.PanGesture">
            <summary>
            A PanGesture is emitted when the user moves one or more fingers in a particular direction.<br />
            A pan gesture will end in the following ways:<br />
            - User releases the primary finger (the first touch).<br />
            - User has more fingers on the screen than the maximum specified.<br />
            - User has less fingers on the screen than the minimum specified.<br />
            - Cancelled by the system.<br />
            A pan gesture will continue to be sent to the actor under than initial pan until it ends.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PanGesture.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            Dispose.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.PanGesture.Velocity">
            <summary>
            The velocity at which the user is moving their fingers.<br />
            This is represented as a Vector2 and is the pixel movement per millisecond.<br />
            A positive x value shows that the user is panning to the right, a negative x value means the opposite.<br />
            A positive y value shows that the user is panning downwards, a negative y values means upwards.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.PanGesture.Displacement">
            <summary>
            This is a Vector2 showing how much the user has panned (dragged) since the last pan gesture or,
            if the gesture has just started, then the amount panned since the user touched the screen.<br />
            A positive x value shows that the user is panning to the right, a negative x value means the opposite.<br />
            A positive y value shows that the user is panning downwards, a negative y value means upwards.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.PanGesture.Position">
            <summary>
            The current touch position of the primary touch point in local actor coordinates.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.PanGesture.ScreenVelocity">
            <summary>
            The velocity at which the user is moving their fingers.<br />
            This is represented as a Vector2 and is the pixel movement per millisecond.<br />
            A positive x value shows that the user is panning to the right, a negative x value means the opposite.<br />
            A positive y value shows that the user is panning downwards, a negative y values means upwards.<br />
            This value represents the screen coordinates.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.PanGesture.ScreenDisplacement">
            <summary>
            This is a Vector2 showing how much the user has panned (dragged) since the last pan gesture or,
            if the gesture has just started, then the amount panned since the user touched the screen.<br />
            A positive x value shows that the user is panning to the right, a negative x value means the opposite.<br />
            A positive y value shows that the user is panning downwards, a negative y value means upwards.<br />
            This value is in screen coordinates.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.PanGesture.ScreenPosition">
            <summary>
            The current touch position of the primary touch point in screen coordinates.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.PanGesture.NumberOfTouches">
            <summary>
            The total number of fingers touching the screen in a pan gesture.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PanGesture.#ctor">
            <summary>
            The default constructor.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PanGesture.#ctor(Tizen.NUI.Gesture.StateType)">
            <summary>
            The constructor.
            </summary>
            <param name="state">The state of the gesture</param>
        </member>
        <member name="M:Tizen.NUI.PanGesture.GetSpeed">
            <summary>
            Returns the speed at which the user is moving their fingers.<br />
            This is the pixel movement per millisecond.<br />
            </summary>
            <returns>The speed of the pan (in pixels per millisecond).</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PanGesture.GetDistance">
            <summary>
            Returns the distance the user has panned (dragged) since the last pan gesture or,
            if the gesture has just started, then the distance moved since the user touched the screen.<br />
            This is always a positive value.<br />
            </summary>
            <returns>The distance, as a float, a user's finger has panned.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PanGesture.GetScreenSpeed">
            <summary>
            Returns the speed at which the user is moving their fingers relative to screen coordinates.<br />
            This is the pixel movement per millisecond.<br />
            </summary>
            <returns>The speed of the pan (in pixels per millisecond).</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PanGesture.GetScreenDistance">
            <summary>
            Returns the distance the user has panned (dragged) since the last pan gesture in screen
            coordinates or, if the gesture has just started, then the distance in screen coordinates moved
            since the user touched the screen.<br />
            This is always a positive value.<br />
            </summary>
            <returns>The distance, as a float, a user's finger has panned.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.Path">
            <summary>
            A 3D parametric curve.<br />
            Paths can be used to animate the position and orientation of actors.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Path.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            Dispose
            </summary>
            <param name="type">The dispoase type</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Path.#ctor">
            <summary>
            Creates an initialized path handle.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Path.AddPoint(Tizen.NUI.Position)">
            <summary>
            Adds an interpolation point.
            </summary>
            <param name="point">The new interpolation point to be added.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Path.AddControlPoint(Tizen.NUI.Vector3)">
            <summary>
            Adds a control point.
            </summary>
            <param name="point">The new control point to be added.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Path.GenerateControlPoints(System.Single)">
            <summary>
            Automatic generation of control points. Generated control points which result in a smooth join between the splines of each segment.<br />
            The generating algorithm is as follows:<br />
            For a given knot point K[N], find the vector that bisects K[N-1],[N] and [N],[N+1].<br />
            Calculate the tangent vector by taking the normal of this bisector.<br />
            The in control point is the length of the preceding segment back along this bisector multiplied by the curvature.<br />
            The out control point is the length of the succeeding segment forward along this bisector multiplied by the curvature.<br />
            </summary>
            <param name="curvature">The curvature of the spline. 0 gives straight lines between the knots, negative values means the spline contains loops, positive values up to 0.5 result in a smooth curve, positive values between 0.5 and 1 result in looped curves where the loops are not distinct (i.e., the curve appears to be non-continuous), positive values higher than 1 result in looped curves.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Path.Sample(System.Single,Tizen.NUI.Vector3,Tizen.NUI.Vector3)">
            <summary>
            Sample path at a given progress. Calculates the position and tangent at that point of the curve.
            </summary>
            <param name="progress">A floating point value between 0.0 and 1.0.</param>
            <param name="position">The interpolated position at that progress.</param>
            <param name="tangent">The interpolated tangent at that progress.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Path.GetPoint(System.UInt32)">
            <summary>
            An accessor for the interpolation points.
            </summary>
            <param name="index">The index of the interpolation point.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Path.GetControlPoint(System.UInt32)">
            <summary>
            An accessor for the control points.
            </summary>
            <param name="index">The index of the control point.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Path.GetPointCount">
            <summary>
            Gets the number of interpolation points in the path.
            </summary>
            <returns>The number of interpolation points in the path.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Path.Points">
            <summary>
            Enumeration for the Points.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Path.ControlPoints">
            <summary>
            Enumeration for the ControlPoints.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.PinchGesture">
            <summary>
            A PinchGesture is emitted when the user moves two fingers towards or away from each other.<br />
            A pinch gesture will continue to be sent to the actor under the center point of the pinch until the pinch ends.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PinchGesture.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            Dispose.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.PinchGesture.Scale">
            <summary>
            The scale factor from the start of the pinch gesture till the latest pinch gesture.<br />
            If the user is moving their fingers away from each other, then
            this value increases. Conversely, if the user is moving their
            fingers towards each other, this value will decrease.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.PinchGesture.Speed">
            <summary>
            The speed at which the user is moving their fingers.<br />
            This is the pixel movement per second.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.PinchGesture.ScreenCenterPoint">
            <summary>
            The center point of the two points that caused the pinch gesture in screen coordinates.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.PinchGesture.LocalCenterPoint">
            <summary>
            The center point of the two points that caused the pinch gesture in local actor coordinates.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PinchGesture.#ctor(Tizen.NUI.Gesture.StateType)">
            <summary>
            The default constructor.
            </summary>
            <param name="state">The state of the gesture.</param>
        </member>
        <member name="T:Tizen.NUI.PixelBuffer">
             <summary>
             The PixelBuffer object holds a pixel buffer.
             The PixelBuffer keeps ownership of it's initial buffer however, the
             user is free to modify the pixel data, either directly, or via image operations.
            
             In order to upload the pixel data to texture memory, there are two
             possibilities - either convert it back to a PixelData object, which
             releases the PixelBuffer object, leaving the user with an empty handle
             (ideal for one-time indirect image manipulation), or create a new
             PixelData object from this object, leaving the buffer intact (ideal
             for continuous manipulation)
             </summary>
             <since_tizen> 5 </since_tizen>
             This will be released at Tizen.NET API Level 5, so currently this would be used as inhouse API.
        </member>
        <member name="M:Tizen.NUI.PixelBuffer.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            Dispose.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PixelBuffer.#ctor(System.UInt32,System.UInt32,Tizen.NUI.PixelFormat)">
            <summary>
            Create a PixelBuffer with it's own data buffer.
            </summary>
            <param name="width">The pixel buffer width</param>
            <param name="height">The pixel buffer height</param>
            <param name="pixelFormat">The pixel format</param>
            <since_tizen> 5 </since_tizen>
            This will be released at Tizen.NET API Level 5, so currently this would be used as inhouse API.
        </member>
        <member name="M:Tizen.NUI.PixelBuffer.Convert(Tizen.NUI.PixelBuffer)">
            <summary>
            Convert to a pixel data and release the pixelBuffer's object.
            This handle is left empty.
            Any other handles that keep a reference to this object
            will be left with no buffer, trying to access it will return NULL.
            </summary>
            <param name="pixelBuffer">A pixel buffer</param>
            <returns>A new PixelData which takes ownership of the PixelBuffer's buffer.</returns>
            <since_tizen> 5 </since_tizen>
            This will be released at Tizen.NET API Level 5, so currently this would be used as inhouse API.
        </member>
        <member name="M:Tizen.NUI.PixelBuffer.CreatePixelData">
            <summary>
            Copy the data from this object into a new PixelData object, which could be
            used for uploading to a texture.
            </summary>
            <returns>The pixel data.</returns>
            <since_tizen> 5 </since_tizen>
            This will be released at Tizen.NET API Level 5, so currently this would be used as inhouse API.
        </member>
        <member name="M:Tizen.NUI.PixelBuffer.GetWidth">
            <summary>
            Gets the width of the buffer in pixels.
            </summary>
            <returns>The width of the buffer in pixels.</returns>
            <since_tizen> 5 </since_tizen>
            This will be released at Tizen.NET API Level 5, so currently this would be used as inhouse API.
        </member>
        <member name="M:Tizen.NUI.PixelBuffer.GetHeight">
            <summary>
            Gets the height of the buffer in pixels.
            </summary>
            <returns>The height of the buffer in pixels.</returns>
            <since_tizen> 5 </since_tizen>
            This will be released at Tizen.NET API Level 5, so currently this would be used as inhouse API.
        </member>
        <member name="M:Tizen.NUI.PixelBuffer.GetPixelFormat">
            <summary>
            Gets the pixel format.
            </summary>
            <returns>The pixel format.</returns>
            <since_tizen> 5 </since_tizen>
            This will be released at Tizen.NET API Level 5, so currently this would be used as inhouse API.
        </member>
        <member name="M:Tizen.NUI.PixelBuffer.ApplyMask(Tizen.NUI.PixelBuffer,System.Single,System.Boolean)">
             <summary>
             Apply the mask to this pixel data, and return a new pixel data containing
             the masked image. If this PixelBuffer doesn't have an alpha channel, then
             the resultant PixelBuffer will be converted to a format that supports at
             least the width of the color channels and the alpha channel from the mask.
            
             If cropToMask is set to true, then the contentScale is applied first to
             this buffer, and the target buffer is cropped to the size of the mask. If
             it's set to false, then the mask is scaled to match this buffer's size
             before the mask is applied.
             </summary>
             <param name="mask">The mask to apply.</param>
             <param name="contentScale">The scaling factor to apply to the content.</param>
             <param name="cropToMask">Whether to crop the output to the mask size (true) or scale the mask to the content size (false).</param>
             <since_tizen> 5 </since_tizen>
             This will be released at Tizen.NET API Level 5, so currently this would be used as inhouse API.
        </member>
        <member name="M:Tizen.NUI.PixelBuffer.ApplyMask(Tizen.NUI.PixelBuffer,System.Single)">
             <summary>
             Apply the mask to this pixel data, and return a new pixel data containing
             the masked image. If this PixelBuffer doesn't have an alpha channel, then
             the resultant PixelBuffer will be converted to a format that supports at
             least the width of the color channels and the alpha channel from the mask.
            
             If cropToMask is set to true, then the contentScale is applied first to
             this buffer, and the target buffer is cropped to the size of the mask. If
             it's set to false, then the mask is scaled to match this buffer's size
             before the mask is applied.
             </summary>
             <param name="mask">The mask to apply.</param>
             <param name="contentScale">The scaling factor to apply to the content.</param>
             <since_tizen> 5 </since_tizen>
             This will be released at Tizen.NET API Level 5, so currently this would be used as inhouse API.
        </member>
        <member name="M:Tizen.NUI.PixelBuffer.ApplyMask(Tizen.NUI.PixelBuffer)">
             <summary>
             Apply the mask to this pixel data, and return a new pixel data containing
             the masked image. If this PixelBuffer doesn't have an alpha channel, then
             the resultant PixelBuffer will be converted to a format that supports at
             least the width of the color channels and the alpha channel from the mask.
            
             If cropToMask is set to true, then the contentScale is applied first to
             this buffer, and the target buffer is cropped to the size of the mask. If
             it's set to false, then the mask is scaled to match this buffer's size
             before the mask is applied.
             </summary>
             <param name="mask">The mask to apply.</param>
             <since_tizen> 5 </since_tizen>
             This will be released at Tizen.NET API Level 5, so currently this would be used as inhouse API.
        </member>
        <member name="M:Tizen.NUI.PixelBuffer.ApplyGaussianBlur(System.Single)">
            <summary>
            Apply a Gaussian blur to this pixel data with the given radius.
            A bigger radius will yield a blurrier image. Only works for pixel data in RGBA format.
            </summary>
            <param name="blurRadius">The radius for Gaussian blur. A value of 0 or negative value indicates no blur.</param>
            <since_tizen> 5 </since_tizen>
            This will be released at Tizen.NET API Level 5, so currently this would be used as inhouse API.
        </member>
        <member name="M:Tizen.NUI.PixelBuffer.Crop(System.UInt16,System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Crops this buffer to the given crop rectangle.
            </summary>
            <param name="x">The top left corner's X.</param>
            <param name="y">The top left corner's Y.</param>
            <param name="width">The crop width.</param>
            <param name="height">The crop height.</param>
            <since_tizen> 5 </since_tizen>
            This will be released at Tizen.NET API Level 5, so currently this would be used as inhouse API.
        </member>
        <member name="M:Tizen.NUI.PixelBuffer.Resize(System.UInt16,System.UInt16)">
            <summary>
            Resizes the buffer to the given dimensions.
            </summary>
            <param name="width">The new width.</param>
            <param name="height">The new height.</param>
            <since_tizen> 5 </since_tizen>
            This will be released at Tizen.NET API Level 5, so currently this would be used as inhouse API.
        </member>
        <member name="T:Tizen.NUI.PixelData">
            <summary>
             The PixelData object holds a pixel buffer.<br />
             The PixelData takes over the ownership of the pixel buffer.<br />
             The buffer memory must NOT be released outside of this class, instead,
             the PixelData object will release it automatically when the reference count falls to zero.
            </summary>
            Please DO NOT use! This will be deprecated!
            PixelData class requires externally allocated pixel memory buffer and this buffer loses its ownershop by native DALi.
            And this would make some problem, because dotnet runtime would change the address of memory allocated.
            So this is required to be removed.
            currently no use. will be added later
            <since_tizen> 5 </since_tizen>
            This will be released at Tizen.NET API Level 5, so currently this would be used as inhouse API.
        </member>
        <member name="M:Tizen.NUI.PixelData.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            Dispose.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PixelData.#ctor(System.Byte[],System.UInt32,System.UInt32,System.UInt32,Tizen.NUI.PixelFormat,Tizen.NUI.PixelData.ReleaseFunction)">
            <summary>
            Creates a PixelData object.
            </summary>
            <param name="buffer">The raw pixel data.</param>
            <param name="bufferSize">The size of the buffer in bytes.</param>
            <param name="width">Buffer width in pixels.</param>
            <param name="height">Buffer height in pixels.</param>
            <param name="pixelFormat">The pixel format.</param>
            <param name="releaseFunction">The function used to release the memory.</param>
            <since_tizen> 5 </since_tizen>
            This will be released at Tizen.NET API Level 5, so currently this would be used as inhouse API.
        </member>
        <member name="M:Tizen.NUI.PixelData.GetWidth">
            <summary>
            Gets the width of the buffer in pixels.
            </summary>
            <returns>The width of the buffer in pixels.</returns>
            <since_tizen> 5 </since_tizen>
            This will be released at Tizen.NET API Level 5, so currently this would be used as inhouse API.
        </member>
        <member name="M:Tizen.NUI.PixelData.GetHeight">
            <summary>
            Gets the height of the buffer in pixels.
            </summary>
            <returns>The height of the buffer in pixels.</returns>
            <since_tizen> 5 </since_tizen>
            This will be released at Tizen.NET API Level 5, so currently this would be used as inhouse API.
        </member>
        <member name="M:Tizen.NUI.PixelData.GetPixelFormat">
            <summary>
            Gets the pixel format.
            </summary>
            <returns>The pixel format.</returns>
            <since_tizen> 5 </since_tizen>
            This will be released at Tizen.NET API Level 5, so currently this would be used as inhouse API.
        </member>
        <member name="T:Tizen.NUI.PixelData.ReleaseFunction">
            <summary>
            Enumeration for Function to release the pixel buffer.
            </summary>
            <since_tizen> 5 </since_tizen>
            This will be released at Tizen.NET API Level 5, so currently this would be used as inhouse API.
        </member>
        <member name="F:Tizen.NUI.PixelData.ReleaseFunction.Free">
            <summary>
            Use free function to release the pixel buffer.
            </summary>
        </member>
        <member name="F:Tizen.NUI.PixelData.ReleaseFunction.DeleteArray">
            <summary>
            Use delete[] operator to release the pixel buffer.
            </summary>
        </member>
        <member name="T:Tizen.NUI.PixelFormat">
            <summary>
            Enumeration for Pixel formats.<br />
            Pixel format, default color depth is RGBA 32 bit with alpha.
            </summary>
            /// <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.PixelFormat.INVALID">
            <summary>
             Used to represent an unsupported format.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.PixelFormat.A8">
            <summary>
            color depth 8-bit, alpha.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.PixelFormat.L8">
            <summary>
            color depth 8-bit, luminance
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.PixelFormat.LA88">
            <summary>
            color depth 16-bit, luminance with 8 bit alpha
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.PixelFormat.RGB565">
            <summary>
             color depth 16 bit, 5-6-5
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.PixelFormat.BGR565">
            <summary>
            color depth 16 bit, 5-6-5
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.PixelFormat.RGBA4444">
            <summary>
            color depth 16 bit with alpha, 4-4-4-4
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.PixelFormat.BGRA4444">
            <summary>
            color depth 16 bit with alpha, 4-4-4-4
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.PixelFormat.RGBA5551">
            <summary>
            color depth 16 bit with alpha, 5-5-5-1
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.PixelFormat.BGRA5551">
            <summary>
            color depth 16 bit with alpha, 5-5-5-1
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.PixelFormat.RGB888">
            <summary>
            color depth 24 bit, 8-8-8
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.PixelFormat.RGB8888">
            <summary>
            color depth 32 bit, alpha is reserved but not used, 8-8-8-8#
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.PixelFormat.BGR8888">
            <summary>
            color depth 32 bit, alpha is reserved but not used, 8-8-8-8#
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.PixelFormat.RGBA8888">
            <summary>
            color depth 32 bit with alpha, 8-8-8-8
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.PixelFormat.BGRA8888">
            <summary>
            color depth 32 bit with alpha, 8-8-8-8
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.PixelFormat.COMPRESSED_R11_EAC">
            <summary>
            ETC2 / EAC single-channel, unsigned
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.PixelFormat.COMPRESSED_SIGNED_R11_EAC">
            <summary>
            ETC2 / EAC single-channel, signed
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.PixelFormat.COMPRESSED_RG11_EAC">
            <summary>
            ETC2 / EAC dual-channel, unsigned
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.PixelFormat.COMPRESSED_SIGNED_RG11_EAC">
            <summary>
            ETC2 / EAC dual-channel, signed
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.PixelFormat.COMPRESSED_RGB8_ETC2">
            <summary>
            ETC2 / EAC RGB
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.PixelFormat.COMPRESSED_SRGB8_ETC2">
            <summary>
            ETC2 / EAC RGB using sRGB colourspace.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.PixelFormat.COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2">
            <summary>
            ETC2 / EAC RGB with single bit per pixel alpha mask.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.PixelFormat.COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2">
            <summary>
            ETC2 / EAC RGB using sRGB colourspace, with single bit per pixel alpha mask.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.PixelFormat.COMPRESSED_RGBA8_ETC2_EAC">
            <summary>
            ETC2 / EAC RGB plus separate alpha channel.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.PixelFormat.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC">
            <summary>
            ETC2 / EAC RGB using sRGB colourspace, plus separate alpha channel.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.PixelFormat.COMPRESSED_RGB8_ETC1">
            <summary>
            ETC1 RGB as defined by GLES 2 extension OES_compressed_ETC1_RGB8_texture: http://www.khronos.org/registry/gles/extensions/OES/OES_compressed_ETC1_RGB8_texture.txt
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.PixelFormat.COMPRESSED_RGB_PVRTC_4BPPV1">
            <summary>
            PowerVR 4bpp RGB format (v1) as defined by extension IMG_texture_compression_pvrtc: http://www.khronos.org/registry/gles/extensions/IMG/IMG_texture_compression_pvrtc.txt
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.PixelFormat.COMPRESSED_RGBA_ASTC_4x4_KHR">
            <summary>
            ASTC Non-linear (gamma-corrected) color space with a 4x4 block-size.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.PixelFormat.COMPRESSED_RGBA_ASTC_5x4_KHR">
            <summary>
             ASTC Non-linear (gamma-corrected) color space with a 5x4 block-size.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.PixelFormat.COMPRESSED_RGBA_ASTC_5x5_KHR">
            <summary>
            ASTC Non-linear (gamma-corrected) color space with a 5x5 block-size.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.PixelFormat.COMPRESSED_RGBA_ASTC_6x5_KHR">
            <summary>
            ASTC Non-linear (gamma-corrected) color space with a 6x5 block-size.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.PixelFormat.COMPRESSED_RGBA_ASTC_6x6_KHR">
            <summary>
            ASTC Non-linear (gamma-corrected) color space with a 6x6 block-size.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.PixelFormat.COMPRESSED_RGBA_ASTC_8x5_KHR">
            <summary>
            ASTC Non-linear (gamma-corrected) color space with a 8x5 block-size.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.PixelFormat.COMPRESSED_RGBA_ASTC_8x6_KHR">
            <summary>
            ASTC Non-linear (gamma-corrected) color space with a 8x6 block-size.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.PixelFormat.COMPRESSED_RGBA_ASTC_8x8_KHR">
            <summary>
            ASTC Non-linear (gamma-corrected) color space with a 8x8 block-size.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.PixelFormat.COMPRESSED_RGBA_ASTC_10x5_KHR">
            <summary>
            ASTC Non-linear (gamma-corrected) color space with a 10x5 block-size.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.PixelFormat.COMPRESSED_RGBA_ASTC_10x6_KHR">
            <summary>
            ASTC Non-linear (gamma-corrected) color space with a 10x6 block-size.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.PixelFormat.COMPRESSED_RGBA_ASTC_10x8_KHR">
            <summary>
            ASTC Non-linear (gamma-corrected) color space with a 10x8 block-size.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.PixelFormat.COMPRESSED_RGBA_ASTC_10x10_KHR">
            <summary>
            ASTC Non-linear (gamma-corrected) color space with a 10x10 block-size.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.PixelFormat.COMPRESSED_RGBA_ASTC_12x10_KHR">
            <summary>
            ASTC Non-linear (gamma-corrected) color space with a 12x10 block-size.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.PixelFormat.COMPRESSED_RGBA_ASTC_12x12_KHR">
            <summary>
            ASTC Non-linear (gamma-corrected) color space with a 12x12 block-size.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.PixelFormat.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR">
            <summary>
            ASTC Non-linear (gamma-corrected) color space with a 4x4 block-size.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.PixelFormat.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR">
            <summary>
            ASTC Non-linear (gamma-corrected) color space with a 5x4 block-size.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.PixelFormat.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR">
            <summary>
            ASTC Non-linear (gamma-corrected) color space with a 5x5 block-size.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.PixelFormat.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR">
            <summary>
            ASTC Non-linear (gamma-corrected) color space with a 6x5 block-size.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.PixelFormat.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR">
            <summary>
            ASTC Non-linear (gamma-corrected) color space with a 6x6 block-size.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.PixelFormat.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR">
            <summary>
            ASTC Non-linear (gamma-corrected) color space with a 8x5 block-size.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.PixelFormat.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR">
            <summary>
            ASTC Non-linear (gamma-corrected) color space with a 8x6 block-size.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.PixelFormat.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR">
            <summary>
            ASTC Non-linear (gamma-corrected) color space with a 8x8 block-size.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.PixelFormat.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR">
            <summary>
            ASTC Non-linear (gamma-corrected) color space with a 10x5 block-size.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.PixelFormat.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR">
            <summary>
            ASTC Non-linear (gamma-corrected) color space with a 10x6 block-size.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.PixelFormat.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR">
            <summary>
            ASTC Non-linear (gamma-corrected) color space with a 10x8 block-size.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.PixelFormat.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR">
            <summary>
            ASTC Non-linear (gamma-corrected) color space with a 10x10 block-size.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.PixelFormat.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR">
            <summary>
            ASTC Non-linear (gamma-corrected) color space with a 12x10 block-size.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.PixelFormat.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR">
            <summary>
            ASTC Non-linear (gamma-corrected) color space with a 12x12 block-size.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.Position">
            <summary>
            Position is a three-dimensional vector.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Position.swigCMemOwn">
            <summary>
            swigCMemOwn
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Position.disposed">
            <summary>
            A Flat to check if it is already disposed.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Position.Finalize">
            <summary>
            Dispose.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Position.Dispose">
            <summary>
            Dispose.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Position.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            Dispose.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Position.op_Addition(Tizen.NUI.Position,Tizen.NUI.Position)">
            <summary>
            An addition operator.
            </summary>
            <param name="arg1">The vector to add.</param>
            <param name="arg2">The vector to add.</param>
            <returns>The vector containing the result of the addition.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Position.op_Subtraction(Tizen.NUI.Position,Tizen.NUI.Position)">
            <summary>
            The subtraction operator.
            </summary>
            <param name="arg1">The vector to subtract.</param>
            <param name="arg2">The vector to subtract.</param>
            <returns>The vector containing the result of the subtraction.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Position.op_UnaryNegation(Tizen.NUI.Position)">
            <summary>
            The unary negation operator.
            </summary>
            <param name="arg1">The vector to negate.</param>
            <returns>The vector containg the negation.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Position.op_Multiply(Tizen.NUI.Position,Tizen.NUI.Position)">
            <summary>
            The multiplication operator.
            </summary>
            <param name="arg1">The vector to multiply.</param>
            <param name="arg2">The vector to multiply.</param>
            <returns>The vector containing the result of the multiplication.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Position.op_Multiply(Tizen.NUI.Position,System.Single)">
            <summary>
            The multiplication operator.
            </summary>
            <param name="arg1">The vector to multiply</param>
            <param name="arg2">The float value to scale the vector.</param>
            <returns>The vector containing the result of scaling.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Position.op_Division(Tizen.NUI.Position,Tizen.NUI.Position)">
            <summary>
            The division operator.
            </summary>
            <param name="arg1">The vector to divide.</param>
            <param name="arg2">The vector to divide.</param>
            <returns>The vector containing the result of the division.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Position.op_Division(Tizen.NUI.Position,System.Single)">
            <summary>
            The division operator.
            </summary>
            <param name="arg1">The vector to divide.</param>
            <param name="arg2">The float value to scale the vector by.</param>
            <returns>The vector containing the result of scaling.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Position.Item(System.UInt32)">
            <summary>
            The const array subscript operator overload. Should be 0, 1, or 2.
            </summary>
            <param name="index">The subscript index.</param>
            <returns>The float at the given index.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Position.#ctor">
            <summary>
            The constructor.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Position.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            The constructor.
            </summary>
            <param name="x">The x component.</param>
            <param name="y">The y component.</param>
            <param name="z">The z component.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Position.#ctor(Tizen.NUI.Position2D)">
            <summary>
            The constructor.
            </summary>
            <param name="position2d">Position2D to create this vector from.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Position.EqualTo(Tizen.NUI.Position)">
            <summary>
            Compares if rhs is equal to.
            </summary>
            <param name="rhs">The vector to compare.</param>
            <returns>Returns true if the two vectors are equal, otherwise false.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Position.NotEqualTo(Tizen.NUI.Position)">
            <summary>
            Compares if rhs is not equal to.
            </summary>
            <param name="rhs">The vector to compare.</param>
            <returns>Returns true if the two vectors are not equal, otherwise false.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Position.X">
            <summary>
            The x component.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Position.Y">
            <summary>
            The y component.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Position.Z">
            <summary>
            The z component.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Position.ParentOriginTop">
            <summary>
            ParentOrigin constants. It's 0.0.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Position.ParentOriginBottom">
            <summary>
            ParentOrigin constants. It's 1.0.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Position.ParentOriginLeft">
            <summary>
            ParentOrigin constants. It's 0.0.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Position.ParentOriginRight">
            <summary>
            ParentOrigin constants. It's 1.0.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Position.ParentOriginMiddle">
            <summary>
            ParentOrigin constants. It's 0.5.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Position.ParentOriginTopLeft">
            <summary>
            ParentOrigin constants: 0.0, 0.0, 0.5.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Position.ParentOriginTopCenter">
            <summary>
            ParentOrigin constants: 0.5, 0.0, 0.5.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Position.ParentOriginTopRight">
            <summary>
            ParentOrigin constants: 1.0, 0.0, 0.5.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Position.ParentOriginCenterLeft">
            <summary>
            ParentOrigin constants: 0.0, 0.5, 0.5.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Position.ParentOriginCenter">
            <summary>
            ParentOrigin constants: 0.0, 0.5, 0.5
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Position.ParentOriginCenterRight">
            <summary>
            ParentOrigin constants: 1.0, 0.5, 0.5.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Position.ParentOriginBottomLeft">
            <summary>
            ParentOrigin constants: 0.0f, 1.0f, 0.5f.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Position.ParentOriginBottomCenter">
            <summary>
            ParentOrigin constants: 0.5, 1.0, 0.5.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Position.ParentOriginBottomRight">
            <summary>
            ParentOrigin constants: 1.0, 1.0, 0.5.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Position.PivotPointTop">
            <summary>
            PivotPoint constants: 0.0.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Position.PivotPointBottom">
            <summary>
            PivotPoint constants: 1.0.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Position.PivotPointLeft">
            <summary>
            PivotPoint constants: 0.0.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Position.PivotPointRight">
            <summary>
            PivotPoint constants: 1.0.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Position.PivotPointMiddle">
            <summary>
            PivotPoint constants: 0.0.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Position.PivotPointTopLeft">
            <summary>
            PivotPoint constants: 0.0, 0.0, 0.5.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Position.PivotPointTopCenter">
            <summary>
            PivotPoint constants: 0.5, 0.0, 0.5.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Position.PivotPointTopRight">
            <summary>
            PivotPoint constants: 1.0, 0.0, 0.5.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Position.PivotPointCenterLeft">
            <summary>
            PivotPoint constants: 0.0, 0.5, 0.5.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Position.PivotPointCenter">
            <summary>
            PivotPoint constants: 0.5, 0.5, 0.5.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Position.PivotPointCenterRight">
            <summary>
            PivotPoint constants: 1.0, 0.5, 0.5.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Position.PivotPointBottomLeft">
            <summary>
            PivotPoint constants: 0.0, 1.0, 0.5.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Position.PivotPointBottomCenter">
            <summary>
            PivotPoint constants: 0.5, 1.0, 0.5
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Position.PivotPointBottomRight">
            <summary>
            PivotPoint constants: 1.0, 1.0, 0.5.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Position.One">
            <summary>
            Constant ( 1.0f, 1.0f, 1.0f ).
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Position.Zero">
            <summary>
            Constant ( 0.0f, 0.0f, 0.0f ).
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Position.op_Implicit(Tizen.NUI.Position)~Tizen.NUI.Vector3">
            <summary>
            Converts a position instance to a Vector3 instance.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Position.op_Implicit(Tizen.NUI.Vector3)~Tizen.NUI.Position">
            <summary>
            Converts a Vector3 instance to a position instance.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.Position2D">
            <summary>
            Position2D is a two-dimensional vector.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Position2D.swigCMemOwn">
            <summary>
            swigCMemOwn
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Position2D.disposed">
            <summary>
            A Flat to check if it is already disposed.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Position2D.Finalize">
            <summary>
            Dispose.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Position2D.Dispose">
            <summary>
            Dispose.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Position2D.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            Dispose.
            </summary>
            <param name="type">The dispose type.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Position2D.op_Addition(Tizen.NUI.Position2D,Tizen.NUI.Position2D)">
            <summary>
            The addition operator.
            </summary>
            <param name="arg1">The vector to add.</param>
            <param name="arg2">The vector to add.</param>
            <returns>The vector containing the result of the addition.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Position2D.op_Subtraction(Tizen.NUI.Position2D,Tizen.NUI.Position2D)">
            <summary>
            The subtraction operator.
            </summary>
            <param name="arg1">The vector to subtract.</param>
            <param name="arg2">The vector to subtract.</param>
            <returns>The vector containing the result of the subtraction.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Position2D.op_UnaryNegation(Tizen.NUI.Position2D)">
            <summary>
            The unary negation operator.
            </summary>
            <param name="arg1">The vector to negate.</param>
            <returns>The vector containing the negation.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Position2D.op_Multiply(Tizen.NUI.Position2D,Tizen.NUI.Position2D)">
            <summary>
            The multiplication operator.
            </summary>
            <param name="arg1">The vector to multiply.</param>
            <param name="arg2">The vector to multiply.</param>
            <returns>The vector containing the result of the multiplication.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Position2D.op_Multiply(Tizen.NUI.Position2D,System.Int32)">
            <summary>
            The multiplication operator.
            </summary>
            <param name="arg1">The vector to multiply.</param>
            <param name="arg2">The integer value to scale the vector.</param>
            <returns>The vector containing the result of the multiplication.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Position2D.op_Division(Tizen.NUI.Position2D,Tizen.NUI.Position2D)">
            <summary>
            The division operator.
            </summary>
            <param name="arg1">The vector to divide.</param>
            <param name="arg2">The vector to divide.</param>
            <returns>The vector containing the result of the division.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Position2D.op_Division(Tizen.NUI.Position2D,System.Int32)">
            <summary>
            The division operator.
            </summary>
            <param name="arg1">The vector to divide.</param>
            <param name="arg2">The integer value to scale the vector by.</param>
            <returns>The vector containing the result of the division.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Position2D.Item(System.UInt32)">
            <summary>
            The const array subscript operator overload. Should be 0, or 1.
            </summary>
            <param name="index">The subscript index.</param>
            <returns>The float at the given index.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Position2D.#ctor">
            <summary>
            The constructor.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Position2D.#ctor(System.Int32,System.Int32)">
            <summary>
            The constructor.
            </summary>
            <param name="x">x component</param>
            <param name="y">y component</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Position2D.#ctor(Tizen.NUI.Position)">
            <summary>
            The constructor.
            </summary>
            <param name="position">Position to create this vector from</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Position2D.EqualTo(Tizen.NUI.Position2D)">
            <summary>
            Compares if the rhs is equal to.
            </summary>
            <param name="rhs">The vector to compare</param>
            <returns>Returns true if the two vectors are equal, otherwise false</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Position2D.NotEqualTo(Tizen.NUI.Position2D)">
            <summary>
            Compares if the rhs is not equal to.
            </summary>
            <param name="rhs">The vector to compare.</param>
            <returns>Returns true if the two vectors are not equal, otherwise false.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Position2D.X">
            <summary>
            The x component.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Position2D.Y">
            <summary>
            The y component.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Position2D.op_Implicit(Tizen.NUI.Position2D)~Tizen.NUI.Vector2">
            <summary>
            Converts a Position2D instance to a Vector2 instance.
            </summary>
            <param name="position2d">An object of the Position2D type.</param>
            <returns>return an object of the Vector2 type</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Position2D.op_Implicit(Tizen.NUI.Vector2)~Tizen.NUI.Position2D">
            <summary>
            Converts a Vector2 instance to a Position2D instance.
            </summary>
            <param name="vec">An object of the Vector2 type.</param>
            <returns>return an object of the Position2D type</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Property.swigCMemOwn">
            <summary>
            swigCMemOwn
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Property.disposed">
            <summary>
            <since_tizen> 3 </since_tizen>
            A Flat to check if it is already disposed.
            </summary>
        </member>
        <member name="M:Tizen.NUI.Property.#ctor(Tizen.NUI.Animatable,System.Int32)">
            <summary>
            This constructor creates a property instance.
            </summary>
            <param name="arg0">A valid handle to the target object.</param>
            <param name="propertyIndex">The index of a property.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Property.#ctor(Tizen.NUI.Animatable,System.Int32,System.Int32)">
            <summary>
            This constructor creates a property instance.
            </summary>
            <param name="arg0">A valid handle to the target object.</param>
            <param name="propertyIndex">The index of a property.</param>
            <param name="componentIndex">Index to a sub component of a property, for use with Vector2, Vector3 and Vector4. -1 for the main property (default is -1).</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Property.#ctor(Tizen.NUI.Animatable,System.String)">
            <summary>
            This constructor creates a property instance.<br />
            This performs a property index query and is therefore slower than constructing a property directly with the index.<br />
            </summary>
            <param name="arg0">A valid handle to the target object.</param>
            <param name="propertyName">The property name.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Property.#ctor(Tizen.NUI.Animatable,System.String,System.Int32)">
            <summary>
            This constructor creates a property instance.<br />
            This performs a property index query and is therefore slower than constructing a property directly with the index.<br />
            </summary>
            <param name="arg0">A valid handle to the target object.</param>
            <param name="propertyName">The property name.</param>
            <param name="componentIndex">Index to a sub component of a property, for use with Vector2, Vector3 and Vector4. -1 for main property (default is -1).</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Property.propertyIndex">
            <summary>
            Gets or sets the index of the property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Property.componentIndex">
            <summary>
            Gets or sets the component index of the property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.PropertyArray">
            <summary>
            An array of property values.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.PropertyArray.swigCMemOwn">
            <summary>
            swigCMemOwn
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.PropertyArray.disposed">
            <summary>
            A Flat to check if it is already disposed.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PropertyArray.Finalize">
            <summary>
            Dispose.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PropertyArray.Dispose">
            <summary>
            Dispose.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PropertyArray.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            Dispose.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.PropertyArray.Item(System.UInt32)">
            <summary>
            The operator to access an element.
            </summary>
            <param name="index">The element index to access. No bounds checking is performed.</param>
            <returns>The reference to the element.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PropertyArray.#ctor">
            <summary>
            The constructor.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PropertyArray.Size">
            <summary>
            Retrieves the number of elements in the array.
            </summary>
            <returns>The number of elements in the array.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PropertyArray.Count">
            <summary>
            Retrieves the number of elements in the array.
            </summary>
            <returns>The number of elements in the array.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PropertyArray.Empty">
            <summary>
            Returns whether the array is empty.
            </summary>
            <returns>Returns true if empty, false otherwise.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PropertyArray.Clear">
            <summary>
            Clears the array.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PropertyArray.Reserve(System.UInt32)">
            <summary>
            Increases the capacity of the array.
            </summary>
            <param name="size">The size to reserve.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PropertyArray.Resize(System.UInt32)">
            <summary>
            Resizes to size.
            </summary>
            <param name="size">The size to resize</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PropertyArray.Capacity">
            <summary>
            Retrieves the capacity of the array.
            </summary>
            <returns>The allocated capacity of the array.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PropertyArray.PushBack(Tizen.NUI.PropertyValue)">
            <summary>
            Adds an element to the array.
            </summary>
            <param name="value">The value to add at the end of the array.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PropertyArray.Add(Tizen.NUI.PropertyValue)">
            <summary>
            Adds an element to the array.
            </summary>
            <param name="value">The value to add at the end of the array.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PropertyArray.GetElementAt(System.UInt32)">
            <summary>
            Accesses an element.
            </summary>
            <param name="index">The element index to access. No bounds checking is performed.</param>
            <returns>The reference to the element.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PropertyArray.ValueOfIndex(System.UInt32)">
            <summary>
            Retrieves the value of elements in the array.
            </summary>
            <param name="index">The element index to retrieve.</param>
            <returns>The reference to the element.</returns>
        </member>
        <member name="T:Tizen.NUI.PropertyKey">
            <summary>
            A key type which can be either a std::string or a Property::Index.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.PropertyKey.swigCMemOwn">
            <summary>
            swigCMemOwn
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.PropertyKey.disposed">
            <summary>
            A Flat to check if it is already disposed.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PropertyKey.Finalize">
            <summary>
            Dispose.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PropertyKey.Dispose">
            <summary>
            Dispose.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PropertyKey.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            Dispose.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.PropertyKey.Type">
            <summary>
            The type of the key.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.PropertyKey.IndexKey">
            <summary>
            The index key.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.PropertyKey.StringKey">
            <summary>
            The string key.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PropertyKey.#ctor(System.String)">
            <summary>
            The constructor.
            </summary>
            <param name="key">The string key.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PropertyKey.#ctor(System.Int32)">
            <summary>
            The constructor.
            </summary>
            <param name="key">The index key.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PropertyKey.EqualTo(System.String)">
            <summary>
            Compares if rhs is equal to.
            </summary>
            <param name="rhs">A string key to compare against.</param>
            <returns>Returns true if the key compares, or false if it isn't equal or of the wrong type.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PropertyKey.EqualTo(System.Int32)">
            <summary>
            Compares if rhs is equal to.
            </summary>
            <param name="rhs">The index key to compare against.</param>
            <returns>Returns true if the key compares, or false if it isn't equal or of the wrong type.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PropertyKey.EqualTo(Tizen.NUI.PropertyKey)">
            <summary>
            Compares if rhs is equal to
            </summary>
            <param name="rhs">A key to compare against</param>
            <returns>Returns true if the keys are of the same type and have the same value.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PropertyKey.NotEqualTo(System.String)">
            <summary>
            Compares if rhs is not equal to.
            </summary>
            <param name="rhs">The index key to compare against.</param>
            <returns>Returns true if the key is not equal or not a string key.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PropertyKey.NotEqualTo(System.Int32)">
            <summary>
            Compares if rhs is not equal to.
            </summary>
            <param name="rhs">The index key to compare against.</param>
            <returns>Returns true if the key is not equal, or not the index key.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PropertyKey.NotEqualTo(Tizen.NUI.PropertyKey)">
            <summary>
            Compares if rhs is not equal to.
            </summary>
            <param name="rhs">A key to compare against.</param>
            <returns>Returns true if the keys are not of the same type or are not equal.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.PropertyKey.KeyType">
            <summary>
            The type of key.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.PropertyKey.KeyType.Index">
            <summary>
            The type of key is index.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.PropertyKey.KeyType.String">
            <summary>
            The type of key is string.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.PropertyMap">
            <summary>
            A map of property values, the key type could be string or Property::Index.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.PropertyMap.swigCMemOwn">
            <summary>
            swigCMemOwn
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.PropertyMap.disposed">
            <summary>
            A Flat to check if it is already disposed.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PropertyMap.Finalize">
            <summary>
            Dispose.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PropertyMap.Dispose">
            <summary>
            Dispose.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PropertyMap.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            Dispose.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.PropertyMap.Item(System.String)">
            <summary>
            The operator to access the element with the specified string key.<br />
            If an element with the key does not exist, then it is created.<br />
            </summary>
            <param name="key">The key whose value to access.</param>
            <returns>A value for the element with the specified key.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.PropertyMap.Item(System.Int32)">
            <summary>
            The operator to access the element with the specified index key.<br />
            If an element with the key does not exist, then it is created.<br />
            </summary>
            <param name="key">The key whose value to access.</param>
            <returns>A value for the element with the specified key.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PropertyMap.#ctor">
            <summary>
            The constructor.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PropertyMap.#ctor(Tizen.NUI.PropertyMap)">
            <summary>
            The copy constructor.
            </summary>
            <param name="other">The map to copy from.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PropertyMap.Count">
            <summary>
            Retrieves the number of elements in the map.
            </summary>
            <returns>The number of elements in the map.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PropertyMap.Empty">
            <summary>
            Returns whether the map is empty.
            </summary>
            <returns>Returns true if empty, false otherwise.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PropertyMap.Insert(System.String,Tizen.NUI.PropertyValue)">
            <summary>
            Inserts the key-value pair in the map, with the key type as string.<br />
            Does not check for duplicates.<br />
            </summary>
            <param name="key">The key to insert.</param>
            <param name="value">The value to insert.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PropertyMap.Insert(System.Int32,Tizen.NUI.PropertyValue)">
            <summary>
            Inserts the key-value pair in the map, with the key type as index.<br />
            Does not check for duplicates.<br />
            </summary>
            <param name="key">The key to insert.</param>
            <param name="value">The value to insert.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PropertyMap.Add(System.String,Tizen.NUI.PropertyValue)">
            <summary>
            Inserts the key-value pair in the map, with the key type as string.<br />
            Does not check for duplicates.<br />
            </summary>
            <param name="key">The key to insert.</param>
            <param name="value">The value to insert.</param>
            <returns>Returns a reference to this object.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PropertyMap.Add(System.Int32,Tizen.NUI.PropertyValue)">
            <summary>
            Inserts the key-value pair in the map, with the key type as string.<br />
            Does not check for duplicates.<br />
            </summary>
            <param name="key">The key to insert.</param>
            <param name="value">The value to insert.</param>
            <returns>Returns a reference to this object.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PropertyMap.GetValue(System.UInt32)">
            <summary>
            Retrieves the value at the specified position.
            </summary>
            <param name="position">The specified position.</param>
            <returns>A reference to the value at the specified position.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PropertyMap.GetKeyAt(System.UInt32)">
            <summary>
            Retrieves the key at the specified position.
            </summary>
            <param name="position">The specified position.</param>
            <returns>A copy of the key at the specified position.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PropertyMap.Find(System.Int32)">
            <summary>
            Finds the value for the specified key if it exists.
            </summary>
            <param name="key">The key to find.</param>
            <returns>The value if it exists, an empty object otherwise.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PropertyMap.Find(System.Int32,System.String)">
            <summary>
            Finds the value for the specified keys if either exist.
            </summary>
            <param name="indexKey">The index key to find.</param>
            <param name="stringKey">The string key to find.</param>
            <returns>The value if it exists, an empty object otherwise.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PropertyMap.Clear">
            <summary>
            Clears the map.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PropertyMap.Merge(Tizen.NUI.PropertyMap)">
            <summary>
            Merges values from the map 'from' to the current.<br />
            Any values in 'from' will overwrite the values in the current map.<br />
            </summary>
            <param name="from">The map to merge from.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PropertyMap.ValueOfIndex(System.String)">
            <summary>
            Retrieves the element with the specified string key.
            </summary>
            <param name="key">The key whose value to retrieve.</param>
            <returns>The value for the element with the specified key.</returns>
        </member>
        <member name="M:Tizen.NUI.PropertyMap.ValueOfIndex(System.Int32)">
            <summary>
            Retrieves the element with the specified index key.
            </summary>
            <param name="key">The key whose value to retrieve.</param>
            <returns>The value for the element with the specified key.</returns>
        </member>
        <member name="T:Tizen.NUI.PropertyValue">
            <summary>
            A value-type representing a property value.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.PropertyValue.swigCMemOwn">
            <summary>
            swigCMemOwn
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.PropertyValue.disposed">
            <summary>
            A Flat to check if it is already disposed.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PropertyValue.Finalize">
            <summary>
            Dispose.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PropertyValue.Dispose">
            <summary>
            Dispose.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PropertyValue.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            Dispose.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PropertyValue.CreateFromObject(System.Object)">
            <summary>
            An extension to the property value class that allows us to create a
            Property value from a C# object, for example, integer, float, or string.<br />
            </summary>
            <param name="obj">An object to create.</param>
            <returns>The created value.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PropertyValue.#ctor(Tizen.NUI.Size2D)">
            <summary>
            Creates a Size2D property value.
            </summary>
            <param name="vectorValue">Size2D values.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PropertyValue.#ctor(Tizen.NUI.Position2D)">
            <summary>
            Creates a Position2D property value.
            </summary>
            <param name="vectorValue">Position2D values.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PropertyValue.#ctor(Tizen.NUI.Size)">
            <summary>
            Creates a Size property value.
            </summary>
            <param name="vectorValue">Size values.</param>
        </member>
        <member name="M:Tizen.NUI.PropertyValue.#ctor(Tizen.NUI.Position)">
            <summary>
            Creates a Position property value.
            </summary>
            <param name="vectorValue">Position values.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PropertyValue.#ctor(Tizen.NUI.Color)">
            <summary>
            Creates a Color property value.
            </summary>
            <param name="vectorValue">Color values.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PropertyValue.Get(Tizen.NUI.Size2D)">
            <summary>
            Retrieves a Size2D value.
            </summary>
            <param name="vectorValue"> On return, a Size2D value.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PropertyValue.Get(Tizen.NUI.Position2D)">
            <summary>
            Retrieves a Position2D value.
            </summary>
            <param name="vectorValue"> On return, a Position2D value.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PropertyValue.Get(Tizen.NUI.Size)">
            <summary>
            Retrieves a Size value.
            </summary>
            <param name="vectorValue"> On return, a size value.</param>
        </member>
        <member name="M:Tizen.NUI.PropertyValue.Get(Tizen.NUI.Position)">
            <summary>
            Retrieves a Position value.
            </summary>
            <param name="vectorValue"> On return, a position value.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PropertyValue.Get(Tizen.NUI.Color)">
            <summary>
            Retrieves a Color value.
            </summary>
            <param name="vectorValue"> On return, a color value.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PropertyValue.#ctor">
            <summary>
            The default constructor.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PropertyValue.#ctor(System.Boolean)">
            <summary>
            Creates a boolean property value.
            </summary>
            <param name="boolValue">A boolean value.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PropertyValue.#ctor(System.Int32)">
            <summary>
            Creates an integer property value.
            </summary>
            <param name="integerValue">An integer value.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PropertyValue.#ctor(System.Single)">
            <summary>
            Creates a float property value.
            </summary>
            <param name="floatValue">A floating-point value.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PropertyValue.#ctor(Tizen.NUI.Vector2)">
            <summary>
            Creates a Vector2 property value.
            </summary>
            <param name="vectorValue">A vector of 2 floating-point values.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PropertyValue.#ctor(Tizen.NUI.Vector3)">
            <summary>
            Creates a Vector3 property value.
            </summary>
            <param name="vectorValue">A vector of 3 floating-point values.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PropertyValue.#ctor(Tizen.NUI.Vector4)">
            <summary>
            Creates a Vector4 property value.
            </summary>
            <param name="vectorValue">A vector of 4 floating-point values.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PropertyValue.#ctor(Tizen.NUI.Rectangle)">
            <summary>
            Creates a Rectangle property value.
            </summary>
            <param name="vectorValue">Rectangle values.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PropertyValue.#ctor(Tizen.NUI.Rotation)">
            <summary>
            Creates a Rotation property value.
            </summary>
            <param name="quaternion">Rotation values.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PropertyValue.#ctor(System.String)">
            <summary>
            Creates a string property value.
            </summary>
            <param name="stringValue">A string.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PropertyValue.#ctor(Tizen.NUI.PropertyArray)">
            <summary>
            Creates an array property value.
            </summary>
            <param name="arrayValue">An array.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PropertyValue.#ctor(Tizen.NUI.PropertyMap)">
            <summary>
            Creates a map property value.
            </summary>
            <param name="mapValue">An array.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PropertyValue.#ctor(Tizen.NUI.Extents)">
            <summary>
            Creates a Extents value.
            </summary>
            <param name="extentsValue">A Extents value.</param>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PropertyValue.#ctor(Tizen.NUI.PropertyType)">
            <summary>
            Creates a PropertyType value.
            </summary>
            <param name="type">A PropertyType value.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PropertyValue.#ctor(Tizen.NUI.PropertyValue)">
            <summary>
            Creates a PropertyValue value.
            </summary>
            <param name="value">A PropertyValue value.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PropertyValue.GetType">
            <summary>
            Queries the type of this property value.
            </summary>
            <returns>The type ID</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PropertyValue.Get(System.Boolean@)">
            <summary>
            Retrieves a boolean value.
            </summary>
            <param name="boolValue">On return, a boolean value.</param>
            <returns>Returns true if the value is successfully retrieved, false if the type is not convertible.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PropertyValue.Get(System.Single@)">
            <summary>
            Retrieves a floating-point value.
            </summary>
            <param name="floatValue">On return, a floating-point value.</param>
            <returns>Returns true if the value is successfully retrieved, false if the type is not convertible.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PropertyValue.Get(System.Int32@)">
            <summary>
            Retrieves an integer value.
            </summary>
            <param name="integerValue">On return, an integer value.</param>
            <returns>Returns true if the value is successfully retrieved, false if the type is not convertible.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PropertyValue.Get(Tizen.NUI.Rectangle)">
            <summary>
            Retrieves an integer rectangle.
            </summary>
            <param name="rect">On return, an integer rectangle.</param>
            <returns>Returns true if the value is successfully retrieved, false if the type is not convertible.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PropertyValue.Get(Tizen.NUI.Vector2)">
            <summary>
            Retrieves a vector value.
            </summary>
            <param name="vectorValue">On return, a vector value.</param>
            <returns>Returns true if the value is successfully retrieved, false if the type is not convertible.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PropertyValue.Get(Tizen.NUI.Vector3)">
            <summary>
            Retrieves a vector value.
            </summary>
            <param name="vectorValue">On return, a vector value.</param>
            <returns>Returns true if the value is successfully retrieved, false if the type is not convertible.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PropertyValue.Get(Tizen.NUI.Vector4)">
            <summary>
            Retrieves a vector value.
            </summary>
            <param name="vectorValue">On return, a vector value.</param>
            <returns>Returns true if the value is successfully retrieved, false if the type is not convertible.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PropertyValue.Get(Tizen.NUI.Rotation)">
            <summary>
            Retrieves a Rotation value.
            </summary>
            <param name="quaternionValue">On return, a rotation value.</param>
            <returns>Returns true if the value is successfully retrieved, false if the type is not convertible.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PropertyValue.Get(System.String@)">
            <summary>
            Retrieves a string property value.
            </summary>
            <param name="stringValue">On return, a string.</param>
            <returns>Returns true if the value is successfully retrieved, false if the type is not convertible.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PropertyValue.Get(Tizen.NUI.PropertyArray)">
            <summary>
            Retrieves an array property value.
            </summary>
            <param name="arrayValue">On return, the array as a vector property values.</param>
            <returns>Returns true if the value is successfully retrieved, false if the type is not convertible.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PropertyValue.Get(Tizen.NUI.PropertyMap)">
            <summary>
            Retrieves a map property value.
            </summary>
            <param name="mapValue">On return, the map as vector of string and property value pairs.</param>
            <returns>Returns true if the value is successfully retrieved, false if the type is not convertible.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PropertyValue.Get(Tizen.NUI.Extents)">
            <summary>
            Retrieves a Extents value.
            </summary>
            <param name="extentsValue">On return, a extents.</param>
            <returns>Returns true if the value is successfully retrieved, false if the type is not convertible.</returns>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.PropertyBuffer">
            <summary>
            PropertyBuffer is a handle to an object that contains a buffer of structured properties.<br />
            PropertyBuffers can be used to provide data to Geometry objects.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PropertyBuffer.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            Dispose.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PropertyBuffer.#ctor(Tizen.NUI.PropertyMap)">
            <summary>
            Creates a PropertyBuffer.
            </summary>
            <param name="bufferFormat">The map of names and types that describes the components of the buffer.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PropertyBuffer.SetData(System.IntPtr,System.UInt32)">
            <summary>
            Updates the whole buffer information.<br />
            This function expects a pointer to an array of structures with the same
            format that was given in the construction, and the number of elements to
            be the same as the size of the buffer.<br />
            </summary>
            <param name="data">A pointer to the data that will be copied to the buffer.</param>
            <param name="size">Number of elements to expand or contract the buffer.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PropertyBuffer.GetSize">
            <summary>
            Gets the number of elements in the buffer.
            </summary>
            <returns>Number of elements to expand or contract the buffer.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.PropertyCondition">
            <summary>
            A condition that can be evaluated on a Property Value
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PropertyCondition.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            Dispose.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PropertyCondition.#ctor">
            <summary>
            Create a property condition instance.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PropertyCondition.GetArgumentCount">
            <summary>
            Retrieves the arguments that this condition uses.
            </summary>
            <returns>The arguments used for this condition.</returns>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PropertyCondition.GetArgument(System.UInt32)">
            <summary>
            Retrieves the arguments that this condition uses
            </summary>
            <param name="index">The condition index to get the argument.</param>
            <returns>The arguments used for this condition.</returns>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PropertyCondition.LessThan(System.Single)">
            <summary>
            LessThan condition compares whether property is less than arg.
            </summary>
            <param name="arg">The argument for the condition.</param>
            <returns>A property condition function object.</returns>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PropertyCondition.GreaterThan(System.Single)">
            <summary>
            GreaterThan condition compares whether property is greater than arg.
            </summary>
            <param name="arg">The argument for the condition.</param>
            <returns>A property condition function object.</returns>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PropertyCondition.Inside(System.Single,System.Single)">
            <summary>
            Inside condition compares whether property is greater than arg0 and less than arg1.
            </summary>
            <param name="arg0">The first argument for the condition.</param>
            <param name="arg1">The second argument for the condition.</param>
            <returns>A property condition function object.</returns>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PropertyCondition.Outside(System.Single,System.Single)">
            <summary>
            Outside condition compares whether property is less than arg0 or greater than arg1
            </summary>
            <param name="arg0">The first argument for the condition.</param>
            <param name="arg1">The second argument for the condition.</param>
            <returns>A property condition function object.</returns>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PropertyCondition.Step(System.Single,System.Single)">
            <summary>
            Detects when a property changes by stepAmount from initialValue, in both positive and negative directions. This will continue checking for multiples of stepAmount.
            </summary>
            <param name="stepAmount">The step size required to trigger condition.</param>
            <param name="initialValue">The initial value to step from.</param>
            <returns>A property condition function object.</returns>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PropertyCondition.Step(System.Single)">
            <summary>
            Receives notifications as a property goes above/below the inputted values. Values must be ordered and can be either ascending or descending.
            </summary>
            <param name="stepAmount">List of values to receive notifications for as a property crosses them.</param>
            <returns>A property condition function object.</returns>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.PropertyNotification">
            <summary>
             Issues a notification upon a condition of the property being met.
             See PropertyCondition for available defined conditions.
            </summary>
             <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PropertyNotification.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            Dispose.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.PropertyNotification.NotifyEventArgs">
            <summary>
             Event arguments that passed via Notify signal
            </summary>
             <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.PropertyNotification.NotifyEventArgs.PropertyNotification">
            <summary>
             PropertyNotification - is the PropertyNotification handle that has the notification properties.
            </summary>
             <since_tizen> 3 </since_tizen>
        </member>
        <member name="E:Tizen.NUI.PropertyNotification.Notified">
            <summary>
             Event for Notified signal which can be used to subscribe/unsubscribe the event handler
             Notified signal is emitted when the notification upon a condition of the property being met, has occurred.
            </summary>
             <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PropertyNotification.GetPropertyNotificationFromPtr(System.IntPtr)">
            <summary>
            Get property notification from Intptr.<br/>
            This should be internal, please do not use.
            </summary>
            <param name="cPtr">An object of IntPtr type.</param>
            <returns>An object of the PropertyNotification type.</returns>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PropertyNotification.#ctor">
            <summary>
            Create a instance of PropertyNotification.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PropertyNotification.DownCast(Tizen.NUI.BaseHandle)">
            <summary>
            Downcast a PropertyNotification instance.
            </summary>
            <param name="handle">Handle to an object of BaseHandle type.</param>
            <returns>Handle to an object of the PropertyNotification type.</returns>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PropertyNotification.#ctor(Tizen.NUI.PropertyNotification)">
            <summary>
            Create a instance of PropertyNotification.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PropertyNotification.Assign(Tizen.NUI.PropertyNotification)">
            <summary>
            Assign.
            </summary>
            <param name="rhs">A reference to the copied handle.</param>
            <returns>A reference to this.</returns>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PropertyNotification.GetCondition">
            <summary>
            Gets the condition of this notification.
            </summary>
            <returns>The condition is returned.</returns>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PropertyNotification.GetTarget">
            <summary>
            Gets the target handle that this notification is observing.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PropertyNotification.GetTargetProperty">
            <summary>
            Gets the target handle's property index that this notification.
            </summary>
            <returns>The target property index.</returns>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PropertyNotification.SetNotifyMode(Tizen.NUI.PropertyNotification.NotifyMode)">
            <summary>
            Sets the Notification mode.
            </summary>
            <param name="mode">mode Notification mode (Default is PropertyNotification::NotifyOnTrue).</param>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PropertyNotification.GetNotifyMode">
            <summary>
            Retrieves the current Notification mode.
            </summary>
            <returns>Notification mode.</returns>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PropertyNotification.GetNotifyResult">
            <summary>
            Gets the result of the last condition check that caused a signal emit,
            useful when using NotifyOnChanged mode and need to know what it changed to.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PropertyNotification.NotifySignal">
            <summary>
            Connects to this signal to be notified when the notification has occurred.
            </summary>
            <returns>A signal object to Connect() with</returns>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.PropertyNotification.NotifyMode">
            <summary>
            Enumeration for description of how to check condition.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.PropertyNotification.NotifyMode.Disabled">
            <summary>
            Don't notify, regardless of result of Condition
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.PropertyNotification.NotifyMode.NotifyOnTrue">
            <summary>
            Notify whenever condition changes from false to true.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.PropertyNotification.NotifyMode.NotifyOnFalse">
            <summary>
            Notify whenever condition changes from true to false.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.PropertyNotification.NotifyMode.NotifyOnChanged">
            <summary>
            Notify whenever condition changes (false to true, and true to false)
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.PropertyNotifySignal">
            <summary>
             Signal connection class for PropertyNotification
            </summary>
             <since_tizen> 4 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.PropertyNotifySignal.swigCMemOwn">
            <summary>
            swigCMemOwn
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.PropertyNotifySignal.disposed">
            <summary>
            A Flat to check if it is already disposed.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PropertyNotifySignal.Finalize">
            <summary>
            Dispose
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PropertyNotifySignal.Dispose">
            <summary>
            Dispose
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PropertyNotifySignal.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            Dispose
            </summary>
            <param name="type">The dispose type.</param>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PropertyNotifySignal.Empty">
            <summary>
            Queries whether there are any connected slots.
            </summary>
            <returns>True if there are any slots connected to the signal.</returns>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PropertyNotifySignal.GetConnectionCount">
            <summary>
            Queries the number of slots.
            </summary>
            <returns>The number of slots connected to this signal</returns>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PropertyNotifySignal.Connect(System.Delegate)">
            <summary>
            Connects a function.
            </summary>
            <param name="func">The function to connect</param>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PropertyNotifySignal.Disconnect(System.Delegate)">
            <summary>
            Disconnects a function.
            </summary>
            <param name="func">The function to disconnect.</param>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PropertyNotifySignal.Emit(Tizen.NUI.PropertyNotification)">
            <summary>
            Emits a signal with 1 parameter.
            </summary>
            <param name="arg">The first value to pass to callbacks.</param>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PropertyNotifySignal.#ctor">
            <summary>
            The constructor.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.Radian">
            <summary>
            An angle in radians.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Radian.swigCMemOwn">
            <summary>
            swigCMemOwn
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Radian.disposed">
            <summary>
            A Flat to check if it is already disposed.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Radian.Finalize">
            <summary>
            Dispose.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Radian.Dispose">
            <summary>
            Dispose.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Radian.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            Dispose.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Radian.#ctor">
            <summary>
            The default constructor, initializes to 0.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Radian.#ctor(System.Single)">
            <summary>
            Creates an angle in radians.
            </summary>
            <param name="value">The initial value in radians.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Radian.#ctor(Tizen.NUI.Degree)">
            <summary>
            Creates an angle in radians from an angle in degrees.
            </summary>
            <param name="degree">The initial value in degrees.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Radian.ConvertToFloat">
            <summary>
            Conversion to float.
            </summary>
            <returns>The float value of this radian.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Radian.Value">
            <summary>
            The value in radians.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.Rectangle">
            <summary>
            The Rectangle class.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Rectangle.swigCMemOwn">
            <summary>
            swigCMemOwn
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Rectangle.disposed">
            <summary>
            A Flat to check if it is already disposed.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Rectangle.Finalize">
            <summary>
            Dispose.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Rectangle.Dispose">
            <summary>
            Dispose.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Rectangle.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            Dispose.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Rectangle.op_Equality(Tizen.NUI.Rectangle,Tizen.NUI.Rectangle)">
            <summary>
            THe Equality operator.
            </summary>
            <param name="a">The first operand.</param>
            <param name="b">The second operand.</param>
            <returns>True if the boxes are exactly the same.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Rectangle.Equals(System.Object)">
            <summary>
            Equality operator.
            </summary>
            <param name="o">The object to compare with the current object.</param>
            <returns>True if boxes are exactly same.</returns>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Rectangle.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>A hash code for the current object.</returns>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Rectangle.op_Inequality(Tizen.NUI.Rectangle,Tizen.NUI.Rectangle)">
            <summary>
            Inequality operator.
            </summary>
            <param name="a">The first rectangle.</param>
            <param name="b">The second rectangle.</param>
            <returns>True if the rectangles are not identical.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Rectangle.X">
            <summary>
            The x position of the rectangle.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Rectangle.Y">
            <summary>
            The Y position of the rectangle.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Rectangle.Width">
            <summary>
            The width of the rectangle.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Rectangle.Height">
            <summary>
            The height of the rectangle.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Rectangle.#ctor">
            <summary>
            The constructor.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Rectangle.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            The constructor.
            </summary>
            <param name="x">The x coordinate (or left).</param>
            <param name="y">The y coordinate (or right).</param>
            <param name="width">The width (or bottom).</param>
            <param name="height">The height (or top).</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Rectangle.Set(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Assignment from individual values.
            </summary>
            <param name="newX">The x coordinate.</param>
            <param name="newY">The y coordinate.</param>
            <param name="newWidth">The width.</param>
            <param name="newHeight">The height.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Rectangle.IsEmpty">
            <summary>
            Determines whether or not this rectangle is empty.
            </summary>
            <returns>True if width or height are zero.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Rectangle.Left">
            <summary>
            Gets the left of the rectangle.
            </summary>
            <returns>The left edge of the rectangle.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Rectangle.Right">
            <summary>
            Gets the right of the rectangle.
            </summary>
            <returns>The right edge of the rectangle.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Rectangle.Top">
            <summary>
            Gets the top of the rectangle.
            </summary>
            <returns>The top of the rectangle.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Rectangle.Bottom">
            <summary>
            Gets the bottom of the rectangle.
            </summary>
            <returns>The bottom of the rectangle.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Rectangle.Area">
            <summary>
            Gets the area of the rectangle.
            </summary>
            <returns>The area of the rectangle.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Rectangle.Intersects(Tizen.NUI.Rectangle)">
            <summary>
            Determines whether or not this rectangle and the specified rectangle intersect.
            </summary>
            <param name="other">The other rectangle to test against this rectangle.</param>
            <returns>True if the rectangles intersect.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Rectangle.Contains(Tizen.NUI.Rectangle)">
            <summary>
            Determines whether or not this rectangle contains the specified rectangle.
            </summary>
            <param name="other">The other rectangle to test against this rectangle.</param>
            <returns>True if the specified rectangle is contained.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.RelativeVector2">
            <summary>
            RelativeVector2 is a two-dimensional vector.
            Both values (x and y) should be between [0, 1].
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.RelativeVector2.swigCMemOwn">
            <summary>
            swigCMemOwn
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.RelativeVector2.disposed">
            <summary>
            A Flat to check if it is already disposed.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.RelativeVector2.Finalize">
            <summary>
            Dispose.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.RelativeVector2.Dispose">
            <summary>
            Dispose.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.RelativeVector2.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            Dispose.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.RelativeVector2.op_Addition(Tizen.NUI.RelativeVector2,Tizen.NUI.RelativeVector2)">
            <summary>
            The addition operator.
            </summary>
            <param name="arg1">The vector to add.</param>
            <param name="arg2">The vector to add.</param>
            <returns>The vector containing the result of the addition.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.RelativeVector2.op_Subtraction(Tizen.NUI.RelativeVector2,Tizen.NUI.RelativeVector2)">
            <summary>
            The subtraction operator.
            </summary>
            <param name="arg1">The vector to subtract.</param>
            <param name="arg2">The vector to subtract.</param>
            <returns>The vector containing the result of the subtraction.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.RelativeVector2.op_Multiply(Tizen.NUI.RelativeVector2,Tizen.NUI.RelativeVector2)">
            <summary>
            The multiplication operator.
            </summary>
            <param name="arg1">The vector to multiply.</param>
            <param name="arg2">The vector to multiply.</param>
            <returns>The vector containing the result of the multiplication.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.RelativeVector2.op_Multiply(Tizen.NUI.RelativeVector2,System.Single)">
            <summary>
            The multiplication operator.
            </summary>
            <param name="arg1">The vector to multiply.</param>
            <param name="arg2">The float value to scale the vector.</param>
            <returns>The vector containing the result of the scaling.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.RelativeVector2.op_Division(Tizen.NUI.RelativeVector2,Tizen.NUI.RelativeVector2)">
            <summary>
            The division operator.
            </summary>
            <param name="arg1">The vector to divide.</param>
            <param name="arg2">The vector to divide.</param>
            <returns>The vector containing the result of the division.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.RelativeVector2.op_Division(Tizen.NUI.RelativeVector2,System.Single)">
            <summary>
            The division operator.
            </summary>
            <param name="arg1">The vector to divide.</param>
            <param name="arg2">The float value to scale the vector by.</param>
            <returns>The vector containing the result of the scaling.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.RelativeVector2.Item(System.UInt32)">
            <summary>
            The const array subscript operator overload. Should be 0, 1.
            </summary>
            <param name="index">The subscript index.</param>
            <returns>The float at the given index.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.RelativeVector2.GetRelativeVector2FromPtr(System.IntPtr)">
            <summary>
            </summary>
        </member>
        <member name="M:Tizen.NUI.RelativeVector2.#ctor">
            <summary>
            The constructor.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.RelativeVector2.#ctor(System.Single,System.Single)">
            <summary>
            The constructor.
            </summary>
            <param name="x">The x component.</param>
            <param name="y">The y component.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.RelativeVector2.#ctor(Tizen.NUI.RelativeVector3)">
            <summary>
            The constructor.
            </summary>
            <param name="relativeVector3">The RelativeVector3 to create this vector from.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.RelativeVector2.#ctor(Tizen.NUI.RelativeVector4)">
            <summary>
            The constructor.
            </summary>
            <param name="relativeVector4">The RelativeVector4 to create this vector from.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.RelativeVector2.EqualTo(Tizen.NUI.RelativeVector2)">
            <summary>
            Compares if the rhs is equal to.
            </summary>
            <param name="rhs">The vector to compare.</param>
            <returns>Returns true if the two vectors are equal, otherwise false.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.RelativeVector2.NotEqualTo(Tizen.NUI.RelativeVector2)">
            <summary>
            Compares if the rhs is not equal to.
            </summary>
            <param name="rhs">The vector to compare.</param>
            <returns>Returns true if the two vectors are not equal, otherwise false.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.RelativeVector2.X">
            <summary>
            The x component.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.RelativeVector2.Y">
            <summary>
            The y component.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.RelativeVector2.op_Implicit(Tizen.NUI.RelativeVector2)~Tizen.NUI.Vector2">
            <summary>
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.RelativeVector2.op_Implicit(Tizen.NUI.Vector2)~Tizen.NUI.RelativeVector2">
            <summary>
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.RelativeVector3">
            <summary>
            RelativeVector3 is a three-dimensional vector.
            All values (x, y, z and w) should be between [0, 1].
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.RelativeVector3.swigCMemOwn">
            <summary>
            swigCMemOwn
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.RelativeVector3.disposed">
            <summary>
            A Flat to check if it is already disposed.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.RelativeVector3.Finalize">
            <summary>
            Dispose.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.RelativeVector3.Dispose">
            <summary>
            Dispose.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.RelativeVector3.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            Dispose.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.RelativeVector3.op_Addition(Tizen.NUI.RelativeVector3,Tizen.NUI.RelativeVector3)">
            <summary>
            The addition operator.
            </summary>
            <param name="arg1">The vector to add.</param>
            <param name="arg2">Th vector to add.</param>
            <returns>The vector containing the result of the addition.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.RelativeVector3.op_Subtraction(Tizen.NUI.RelativeVector3,Tizen.NUI.RelativeVector3)">
            <summary>
            The subtraction operator.
            </summary>
            <param name="arg1">The vector to subtract.</param>
            <param name="arg2">The vector to subtract.</param>
            <returns>The vector containing the result of the subtraction.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.RelativeVector3.op_Multiply(Tizen.NUI.RelativeVector3,Tizen.NUI.RelativeVector3)">
            <summary>
            The multiplication operator.
            </summary>
            <param name="arg1">The vector to multiply.</param>
            <param name="arg2">The vector to multiply.</param>
            <returns>The vector containing the result of the multiplication.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.RelativeVector3.op_Multiply(Tizen.NUI.RelativeVector3,System.Single)">
            <summary>
            The multiplication operator.
            </summary>
            <param name="arg1">The vector to multiply.</param>
            <param name="arg2">The float value to scale the vector.</param>
            <returns>The vector containing the result of the scaling.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.RelativeVector3.op_Division(Tizen.NUI.RelativeVector3,Tizen.NUI.RelativeVector3)">
            <summary>
            The division operator.
            </summary>
            <param name="arg1">The vector to divide.</param>
            <param name="arg2">The vector to divide.</param>
            <returns>The vector containing the result of the division.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.RelativeVector3.op_Division(Tizen.NUI.RelativeVector3,System.Single)">
            <summary>
            The division operator.
            </summary>
            <param name="arg1">The vector to divide.</param>
            <param name="arg2">The float value to scale the vector by.</param>
            <returns>The vector containing the result of the scaling.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.RelativeVector3.Item(System.UInt32)">
            <summary>
            The const array subscript operator overload. Should be 0, 1 or 2.
            </summary>
            <param name="index">The subscript index.</param>
            <returns>The float at the given index.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.RelativeVector3.GetRelativeVector3FromPtr(System.IntPtr)">
            <summary>
            </summary>
        </member>
        <member name="M:Tizen.NUI.RelativeVector3.#ctor">
            <summary>
            The constructor.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.RelativeVector3.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            The constructor.
            </summary>
            <param name="x">The x component.</param>
            <param name="y">The y component.</param>
            <param name="z">The z component.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.RelativeVector3.#ctor(Tizen.NUI.RelativeVector2)">
            <summary>
            The constructor.
            </summary>
            <param name="relativeVector2">The RelativeVector2 to create this vector from.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.RelativeVector3.#ctor(Tizen.NUI.RelativeVector4)">
            <summary>
            The constructor.
            </summary>
            <param name="relativeVector4">The RelativeVector4 to create this vector from.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.RelativeVector3.EqualTo(Tizen.NUI.RelativeVector3)">
            <summary>
            Compares if the rhs is equal to.
            </summary>
            <param name="rhs">The vector to compare.</param>
            <returns>Returns true if the two vectors are equal, otherwise false.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.RelativeVector3.NotEqualTo(Tizen.NUI.RelativeVector3)">
            <summary>
            Compares if the rhs is not equal to.
            </summary>
            <param name="rhs">The vector to compare.</param>
            <returns>Returns true if the two vectors are not equal, otherwise false.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.RelativeVector3.X">
            <summary>
            The x component.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.RelativeVector3.Y">
            <summary>
            The y component.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.RelativeVector3.Z">
            <summary>
            The z component.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.RelativeVector3.op_Implicit(Tizen.NUI.RelativeVector3)~Tizen.NUI.Vector3">
            <summary>
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.RelativeVector3.op_Implicit(Tizen.NUI.Vector3)~Tizen.NUI.RelativeVector3">
            <summary>
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.RelativeVector4">
            <summary>
            RelativeVector4 is a four-dimensional vector.
            All values (x, y, and z) should be between [0, 1].
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.RelativeVector4.swigCMemOwn">
            <summary>
            swigCMemOwn
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.RelativeVector4.disposed">
            <summary>
            A Flat to check if it is already disposed.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.RelativeVector4.Finalize">
            <summary>
            Dispose.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.RelativeVector4.Dispose">
            <summary>
            Dispose.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.RelativeVector4.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            Dispose.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.RelativeVector4.op_Addition(Tizen.NUI.RelativeVector4,Tizen.NUI.RelativeVector4)">
            <summary>
            The addition operator.
            </summary>
            <param name="arg1">The vector to add.</param>
            <param name="arg2">The vector to add.</param>
            <returns>The vector containing the result of the addition.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.RelativeVector4.op_Subtraction(Tizen.NUI.RelativeVector4,Tizen.NUI.RelativeVector4)">
            <summary>
            The subtraction operator.
            </summary>
            <param name="arg1">The vector to subtract.</param>
            <param name="arg2">The vector to subtract.</param>
            <returns>The vector containing the result of the subtraction.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.RelativeVector4.op_Multiply(Tizen.NUI.RelativeVector4,Tizen.NUI.RelativeVector4)">
            <summary>
            The multiplication operator.
            </summary>
            <param name="arg1">The vector to multiply.</param>
            <param name="arg2">The vector to multiply.</param>
            <returns>The vector containing the result of the multiplication.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.RelativeVector4.op_Multiply(Tizen.NUI.RelativeVector4,System.Single)">
            <summary>
            The multiplication operator.
            </summary>
            <param name="arg1">The vector to multiply.</param>
            <param name="arg2">The float value to scale the vector.</param>
            <returns>The vector containing the result of the scaling.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.RelativeVector4.op_Division(Tizen.NUI.RelativeVector4,Tizen.NUI.RelativeVector4)">
            <summary>
            The division operator.
            </summary>
            <param name="arg1">The vector to divide.</param>
            <param name="arg2">The vector to divide.</param>
            <returns>The vector containing the result of the division.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.RelativeVector4.op_Division(Tizen.NUI.RelativeVector4,System.Single)">
            <summary>
            The division operator.
            </summary>
            <param name="arg1">The vector to divide.</param>
            <param name="arg2">The float value to scale the vector by.</param>
            <returns>The vector containing the result of the scaling.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.RelativeVector4.Item(System.UInt32)">
            <summary>
            The const array subscript operator overload. Should be 0, 1 3 or 3.
            </summary>
            <param name="index">The subscript index.</param>
            <returns>The float at the given index.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.RelativeVector4.GetRelativeVector4FromPtr(System.IntPtr)">
            <summary>
            </summary>
        </member>
        <member name="M:Tizen.NUI.RelativeVector4.#ctor">
            <summary>
            The constructor.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.RelativeVector4.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            The constructor.
            </summary>
            <param name="x">The x component.</param>
            <param name="y">The y component.</param>
            <param name="z">The z component.</param>
            <param name="w">The w component.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.RelativeVector4.#ctor(Tizen.NUI.RelativeVector2)">
            <summary>
            The constructor.
            </summary>
            <param name="relativeVector2">The RelativeVector2 to create this vector from.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.RelativeVector4.#ctor(Tizen.NUI.RelativeVector3)">
            <summary>
            The constructor.
            </summary>
            <param name="relativeVector3">The RelativeVector3 to create this vector from.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.RelativeVector4.EqualTo(Tizen.NUI.RelativeVector4)">
            <summary>
            Compares if the rhs is equal to.
            </summary>
            <param name="rhs">The vector to compare.</param>
            <returns>Returns true if the two vectors are equal, otherwise false.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.RelativeVector4.NotEqualTo(Tizen.NUI.RelativeVector4)">
            <summary>
            Compares if the rhs is not equal to.
            </summary>
            <param name="rhs">The vector to compare.</param>
            <returns>Returns true if the two vectors are not equal, otherwise false.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.RelativeVector4.X">
            <summary>
            The x component.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.RelativeVector4.Y">
            <summary>
            The y component.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.RelativeVector4.Z">
            <summary>
            The z component.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.RelativeVector4.W">
            <summary>
            The w component.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.RelativeVector4.op_Implicit(Tizen.NUI.RelativeVector4)~Tizen.NUI.Vector4">
            <summary>
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.RelativeVector4.op_Implicit(Tizen.NUI.Vector4)~Tizen.NUI.RelativeVector4">
            <summary>
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.RelayoutContainer">
            <summary>
            An interface to encapsulate the information required for relayout.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.RelayoutContainer.swigCMemOwn">
            <summary>
            swigCMemOwn
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.RelayoutContainer.disposed">
            <summary>
            A Flat to check if it is already disposed.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.RelayoutContainer.Finalize">
            <summary>
            Dispose.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.RelayoutContainer.Dispose">
            <summary>
            To make the RelayoutContainer instance be disposed.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.RelayoutContainer.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            Dispose.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.RelayoutContainer.Add(Tizen.NUI.BaseComponents.View,Tizen.NUI.Size2D)">
            <summary>
            Adds relayout information to the container if it doesn't already exist.
            </summary>
            <param name="view">The view to relayout.</param>
            <param name="size">The size to relayout.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.Renderer">
            <summary>
            Renderer is a handle to an object used to show content by combining a Geometry, a TextureSet and a shader.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Renderer.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            Dispose.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.Renderer.Property">
            <summary>
            Enumeration for instances of properties belonging to the Renderer class.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Renderer.Property.DEPTH_INDEX">
            <summary>
            This should be internal, please do not use.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Renderer.Property.FACE_CULLING_MODE">
            <summary>
            This should be internal, please do not use.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Renderer.Property.BLEND_MODE">
            <summary>
            This should be internal, please do not use.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Renderer.Property.BLEND_EQUATION_RGB">
            <summary>
            This should be internal, please do not use.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Renderer.Property.BLEND_EQUATION_ALPHA">
            <summary>
            This should be internal, please do not use.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Renderer.Property.BLEND_FACTOR_SRC_RGB">
            <summary>
            This should be internal, please do not use.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Renderer.Property.BLEND_FACTOR_DEST_RGB">
            <summary>
            This should be internal, please do not use.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Renderer.Property.BLEND_FACTOR_SRC_ALPHA">
            <summary>
            This should be internal, please do not use.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Renderer.Property.BLEND_FACTOR_DEST_ALPHA">
            <summary>
            This should be internal, please do not use.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Renderer.Property.BLEND_COLOR">
            <summary>
            This should be internal, please do not use.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Renderer.Property.BLEND_PRE_MULTIPLIED_ALPHA">
            <summary>
            This should be internal, please do not use.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Renderer.Property.INDEX_RANGE_FIRST">
            <summary>
            This should be internal, please do not use.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Renderer.Property.INDEX_RANGE_COUNT">
            <summary>
            This should be internal, please do not use.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Renderer.Property.DEPTH_WRITE_MODE">
            <summary>
            This should be internal, please do not use.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Renderer.Property.DEPTH_FUNCTION">
            <summary>
            This should be internal, please do not use.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Renderer.Property.DEPTH_TEST_MODE">
            <summary>
            This should be internal, please do not use.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Renderer.Property.RENDER_MODE">
            <summary>
            This should be internal, please do not use.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Renderer.Property.STENCIL_FUNCTION">
            <summary>
            This should be internal, please do not use.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Renderer.Property.STENCIL_FUNCTION_MASK">
            <summary>
            This should be internal, please do not use.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Renderer.Property.STENCIL_FUNCTION_REFERENCE">
            <summary>
            This should be internal, please do not use.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Renderer.Property.STENCIL_MASK">
            <summary>
            This should be internal, please do not use.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Renderer.Property.STENCIL_OPERATION_ON_FAIL">
            <summary>
            This should be internal, please do not use.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Renderer.Property.STENCIL_OPERATION_ON_Z_FAIL">
            <summary>
            This should be internal, please do not use.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Renderer.Property.STENCIL_OPERATION_ON_Z_PASS">
            <summary>
            This should be internal, please do not use.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Renderer.#ctor(Tizen.NUI.Geometry,Tizen.NUI.Shader)">
            <summary>
            Create an instance of Renderer.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Renderer.SetGeometry(Tizen.NUI.Geometry)">
            <summary>
            Sets the geometry to be used by this renderer.
            </summary>
            <param name="geometry">The geometry to be used by this renderer.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Renderer.GetGeometry">
            <summary>
            Gets the geometry used by this renderer.
            </summary>
            <returns>The geometry used by the renderer.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Renderer.SetIndexRange(System.Int32,System.Int32)">
            <summary>
            Sets effective range of indices to draw from bound index buffer.
            </summary>
            <param name="firstElement">The First element to draw.</param>
            <param name="elementsCount">The number of elements to draw.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Renderer.SetTextures(Tizen.NUI.TextureSet)">
            <summary>
            Sets the texture set to be used by this renderer.
            </summary>
            <param name="textureSet">The texture set to be used by this renderer.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Renderer.GetTextures">
            <summary>
            Gets the texture set used by this renderer.
            </summary>
            <returns>The texture set used by the renderer.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Renderer.SetShader(Tizen.NUI.Shader)">
            <summary>
            Sets the shader used by this renderer.
            </summary>
            <param name="shader">The shader to be used by this renderer.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Renderer.GetShader">
            <summary>
            Gets the shader used by this renderer.
            </summary>
            <returns>The shader used by the renderer.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Renderer.DepthIndex">
            <summary>
            Gets and Sets DepthIndex property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Renderer.FaceCullingMode">
            <summary>
            Gets and Sets FaceCullingMode.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Renderer.BlendMode">
            <summary>
            Gets and Sets BlendMode.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Renderer.BlendEquationRgb">
            <summary>
            Gets and Sets BlendEquationRgb.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Renderer.BlendEquationAlpha">
            <summary>
            Gets and Sets BlendEquationAlpha.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Renderer.BlendFactorSrcRgb">
            <summary>
            Gets and Sets BlendFactorSrcRgb.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Renderer.BlendFactorDestRgb">
            <summary>
            Gets and Sets BlendFactorDestRgb.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Renderer.BlendFactorSrcAlpha">
            <summary>
            Gets and Sets BlendFactorSrcAlpha.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Renderer.BlendFactorDestAlpha">
            <summary>
            Gets and Sets BlendFactorDestAlpha.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Renderer.BlendColor">
            <summary>
            Gets and Sets BlendColor.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Renderer.BlendPreMultipliedAlpha">
            <summary>
            Gets and Sets BlendPreMultipliedAlpha.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Renderer.IndexRangeFirst">
            <summary>
            Gets and Sets IndexRangeFirst.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Renderer.IndexRangeCount">
            <summary>
            Gets and Sets IndexRangeCount.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Renderer.DepthWriteMode">
            <summary>
            Gets and Sets DepthWriteMode.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Renderer.DepthFunction">
            <summary>
            Gets and Sets DepthFunction.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Renderer.DepthTestMode">
            <summary>
            Gets and Sets DepthTestMode.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Renderer.RenderMode">
            <summary>
            Gets and Sets RenderMode.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Renderer.StencilFunction">
            <summary>
            Gets and Sets StencilFunction.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Renderer.StencilFunctionMask">
            <summary>
            Gets and Sets StencilFunctionMask.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Renderer.StencilFunctionReference">
            <summary>
            Gets and Sets StencilFunctionReference.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Renderer.StencilMask">
            <summary>
            Gets and Sets StencilMask.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Renderer.StencilOperationOnFail">
            <summary>
            Gets and Sets StencilOperationOnFail.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Renderer.StencilOperationOnZFail">
            <summary>
            Gets and Sets StencilOperationOnZFail.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Renderer.StencilOperationOnZPass">
            <summary>
            Gets and Sets StencilOperationOnZPass property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.Rotation">
            <summary>
            The Rotation class.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Rotation.swigCMemOwn">
            <summary>
            swigCMemOwn
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Rotation.disposed">
            <summary>
            A Flat to check if it is already disposed.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Rotation.Finalize">
            <summary>
            Dispose.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Rotation.Dispose">
            <summary>
            To make the Rotation instance be disposed.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Rotation.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            Dispose.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Rotation.op_Addition(Tizen.NUI.Rotation,Tizen.NUI.Rotation)">
            <summary>
            The addition operator.
            </summary>
            <param name="arg1">The first rotation.</param>
            <param name="arg2">The second rotation.</param>
            <returns>The rotation containing the result of the addition.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Rotation.op_Subtraction(Tizen.NUI.Rotation,Tizen.NUI.Rotation)">
            <summary>
            The subtraction operator.
            </summary>
            <param name="arg1">The first rotation.</param>
            <param name="arg2">The second rotation.</param>
            <returns>The rotation containing the result of the subtraction.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Rotation.op_UnaryNegation(Tizen.NUI.Rotation)">
            <summary>
            The unary negation operator.
            </summary>
            <param name="arg1">The first rotation.</param>
            <returns>The rotation containing the negated result.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Rotation.op_Multiply(Tizen.NUI.Rotation,Tizen.NUI.Rotation)">
            <summary>
            The multiplication operator.
            </summary>
            <param name="arg1">The first rotation.</param>
            <param name="arg2">The second rotation.</param>
            <returns>The rotation containing the result of the multiplication.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Rotation.op_Multiply(Tizen.NUI.Rotation,Tizen.NUI.Vector3)">
            <summary>
            The multiplication operator.
            </summary>
            <param name="arg1">Rotation.</param>
            <param name="arg2">The vector to multiply.</param>
            <returns>The rotation containing the result of the multiplication.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Rotation.op_Multiply(Tizen.NUI.Rotation,System.Single)">
            <summary>
            The scale operator.
            </summary>
            <param name="arg1">Rotation.</param>
            <param name="arg2">A value to scale by.</param>
            <returns>The rotation containing the result of scaling.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Rotation.op_Division(Tizen.NUI.Rotation,Tizen.NUI.Rotation)">
            <summary>
            The division operator.
            </summary>
            <param name="arg1">The first rotation.</param>
            <param name="arg2">The second rotation.</param>
            <returns>The rotation containing the result of scaling.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Rotation.op_Division(Tizen.NUI.Rotation,System.Single)">
            <summary>
            The scale operator.
            </summary>
            <param name="arg1">Rotation.</param>
            <param name="arg2">A value to scale by.</param>
            <returns>The rotation containing the result of scaling.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Rotation.#ctor">
            <summary>
            The default constructor.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Rotation.#ctor(Tizen.NUI.Radian,Tizen.NUI.Vector3)">
            <summary>
            The constructor from an axis and angle.
            </summary>
            <param name="angle">The angle around the axis.</param>
            <param name="axis">The vector of the axis.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Rotation.IDENTITY">
            <summary>
            (0.0f,0.0f,0.0f,1.0f).
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Rotation.IsIdentity">
            <summary>
            Helper to check if this is an identity quaternion.
            </summary>
            <returns>True if this is identity quaternion.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Rotation.GetAxisAngle(Tizen.NUI.Vector3,Tizen.NUI.Radian)">
            <summary>
            Converts the quaternion to an axis or angle pair.
            </summary>
            <param name="axis">The result of an an axis.</param>
            <param name="angle">The result of angle in radians.</param>
            <returns>True if converted correctly.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Rotation.Length">
            <summary>
            Returns the length of the rotation.
            </summary>
            <returns>The length of the rotation.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Rotation.LengthSquared">
            <summary>
            Returns the squared length of the rotation.
            </summary>
            <returns>The squared length of the rotation.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Rotation.Normalize">
            <summary>
            Normalizes this to unit length.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Rotation.Normalized">
            <summary>
            Normalized.
            </summary>
            <returns>A normalized version of this rotation.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Rotation.Conjugate">
            <summary>
            Conjugates this rotation.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Rotation.Invert">
            <summary>
            Inverts this rotation.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Rotation.Log">
            <summary>
            Performs the logarithm of a rotation.
            </summary>
            <returns>The rotation representing the logarithm.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Rotation.Exp">
            <summary>
            Performs an exponent.
            </summary>
            <returns>The rotation representing the exponent.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Rotation.Dot(Tizen.NUI.Rotation,Tizen.NUI.Rotation)">
            <summary>
            Returns the dot product of two rotations.
            </summary>
            <param name="q1">The first rotation.</param>
            <param name="q2">The second rotation.</param>
            <returns>The dot product of the two rotations.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Rotation.Lerp(Tizen.NUI.Rotation,Tizen.NUI.Rotation,System.Single)">
            <summary>
            The linear iterpolation (using a straight line between the two rotations).
            </summary>
            <param name="q1">The start rotation.</param>
            <param name="q2">The end rotation.</param>
            <param name="t">A progress value between 0 and 1.</param>
            <returns>The interpolated rotation.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Rotation.Slerp(Tizen.NUI.Rotation,Tizen.NUI.Rotation,System.Single)">
            <summary>
            The spherical linear interpolation (using the shortest arc of a great circle between the two rotations).
            </summary>
            <param name="q1">The start rotation.</param>
            <param name="q2">The end rotation.</param>
            <param name="progress">A progress value between 0 and 1.</param>
            <returns>The interpolated rotation.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Rotation.SlerpNoInvert(Tizen.NUI.Rotation,Tizen.NUI.Rotation,System.Single)">
            <summary>
            This version of slerp, used by squad, does not check for theta > 90.
            </summary>
            <param name="q1">The start rotation.</param>
            <param name="q2">The end rotation.</param>
            <param name="t">A progress value between 0 and 1.</param>
            <returns>The interpolated rotation.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Rotation.Squad(Tizen.NUI.Rotation,Tizen.NUI.Rotation,Tizen.NUI.Rotation,Tizen.NUI.Rotation,System.Single)">
            <summary>
            The spherical cubic interpolation.
            </summary>
            <param name="start">The start rotation.</param>
            <param name="end">The end rotation.</param>
            <param name="ctrl1">The control rotation for q1.</param>
            <param name="ctrl2">The control rotation for q2.</param>
            <param name="t">A progress value between 0 and 1.</param>
            <returns>The interpolated rotation.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Rotation.AngleBetween(Tizen.NUI.Rotation,Tizen.NUI.Rotation)">
            <summary>
            Returns the shortest angle between two rotations in radians.
            </summary>
            <param name="q1">The first rotation.</param>
            <param name="q2">The second rotation.</param>
            <returns>The angle between the two rotation.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.Sampler">
            <summary>
            Sampler is a handle to an object that can be used to provide the sampling parameters to sample textures.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Sampler.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            Dispose.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Sampler.#ctor">
            <summary>
            Create an instance of Sampler.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Sampler.SetFilterMode(Tizen.NUI.FilterModeType,Tizen.NUI.FilterModeType)">
            <summary>
            Sets the filter modes for this sampler.
            </summary>
            <param name="minFilter">The minification filter that will be used.</param>
            <param name="magFilter">The magnification filter that will be used.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Sampler.SetWrapMode(Tizen.NUI.WrapModeType,Tizen.NUI.WrapModeType)">
            <summary>
            Sets the wrap modes for this sampler.
            </summary>
            <param name="uWrap">Wrap mode for u coordinates.</param>
            <param name="vWrap">Wrap mode for v coordinates.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Sampler.SetWrapMode(Tizen.NUI.WrapModeType,Tizen.NUI.WrapModeType,Tizen.NUI.WrapModeType)">
            <summary>
            Sets the wrap modes for this sampler.
            </summary>
            <param name="rWrap">Wrap mode for the x direction.</param>
            <param name="sWrap">Wrap mode for the y direction.</param>
            <param name="tWrap">Wrap mode for the z direction.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ScrollViewEffect">
            <summary>
            ScrollView Effect base class, used to apply custom effects to a
            ScrollView instance.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ScrollViewEffect.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            Dispose.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ScrollViewEffect.#ctor">
            <summary>
            The constructor.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.Shader">
            <summary>
            Shader.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Shader.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            Dispose.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.Shader.Hint">
            <summary>
            Hint.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.Shader.Hint.Value">
            <summary>
            Enumeration for the hint value.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Shader.Hint.Value.NONE">
            <summary>
            No hints.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Shader.Hint.Value.OUTPUT_IS_TRANSPARENT">
            <summary>
            Might generate transparent alpha from opaque inputs
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Shader.Hint.Value.MODIFIES_GEOMETRY">
            <summary>
            Might change position of vertices, this option disables any culling optimizations
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.Shader.Property">
            <summary>
            Enumeration for instances of properties belonging to the Shader class.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Shader.Property.PROGRAM">
            <summary>
            The default value is empty.
            Format: {"vertex":"","fragment":"",hints:"","vertexPrefix":"","fragmentPrefix":""}
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Shader.#ctor(System.String,System.String,Tizen.NUI.Shader.Hint.Value)">
            <summary>
            Creates Shader object.
            </summary>
            <param name="vertexShader">The vertex shader code for the effect.</param>
            <param name="fragmentShader">The fragment Shader code for the effect.</param>
            <param name="hints">The hints to define the geometry of the rendered object.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Shader.#ctor(System.String,System.String)">
            <summary>
            Creates Shader object.
            </summary>
            <param name="vertexShader">The vertex shader code for the effect.</param>
            <param name="fragmentShader">The fragment Shader code for the effect.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Shader.Program">
            <summary>
            Gets and Sets the program property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.Size2D">
            <summary>
            A two-dimensional size.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Size2D.swigCMemOwn">
            <summary>
            swigCMemOwn
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Size2D.disposed">
            <summary>
            A Flat to check if it is already disposed.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Size2D.Finalize">
            <summary>
            Dispose.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Size2D.Dispose">
            <summary>
            Dispose.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Size2D.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            Dispose.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Size2D.op_Addition(Tizen.NUI.Size2D,Tizen.NUI.Size2D)">
            <summary>
            The addition operator for A+B.
            </summary>
            <param name="arg1">Size A.</param>
            <param name="arg2">Size to assign B.</param>
            <returns>A size containing the result of the addition.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Size2D.op_Subtraction(Tizen.NUI.Size2D,Tizen.NUI.Size2D)">
            <summary>
            The subtraction operator for A-B.
            </summary>
            <param name="arg1">Size A.</param>
            <param name="arg2">Size to subtract B.</param>
            <returns>A size containing the result of the subtraction.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Size2D.op_UnaryNegation(Tizen.NUI.Size2D)">
            <summary>
            The unary negation operator.
            </summary>
            <param name="arg1">Size for unary negation.</param>
            <returns>A size containing the negation.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Size2D.op_Multiply(Tizen.NUI.Size2D,Tizen.NUI.Size2D)">
            <summary>
            The multiplication operator.
            </summary>
            <param name="arg1">Size for multiplication.</param>
            <param name="arg2">Size to multiply.</param>
            <returns>A size containing the result of the multiplication.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Size2D.op_Multiply(Tizen.NUI.Size2D,System.Int32)">
            <summary>
            The multiplication operator.
            </summary>
            <param name="arg1">Size for multiplication</param>
            <param name="arg2">The integer value to scale the size.</param>
            <returns>A size containing the result of the scaling.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Size2D.op_Division(Tizen.NUI.Size2D,Tizen.NUI.Size2D)">
            <summary>
            The division operator.
            </summary>
            <param name="arg1">Size for division.</param>
            <param name="arg2">Size to divide.</param>
            <returns>A size containing the result of the division.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Size2D.op_Division(Tizen.NUI.Size2D,System.Int32)">
            <summary>
            The division operator.
            </summary>
            <param name="arg1">Size for division.</param>
            <param name="arg2">The integer value to scale the size by.</param>
            <returns>A size containing the result of the scaling.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Size2D.Item(System.UInt32)">
            <summary>
            The array subscript operator.
            </summary>
            <param name="index">The subscript index.</param>
            <returns>The float at the given index.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Size2D.GetSize2DFromPtr(System.IntPtr)">
            <summary>
            Gets the size from the pointer.
            </summary>
            <param name="cPtr">The pointer of the size.</param>
            <returns>Size</returns>
        </member>
        <member name="M:Tizen.NUI.Size2D.#ctor">
            <summary>
            The constructor.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Size2D.#ctor(System.Int32,System.Int32)">
            <summary>
            The constructor.
            </summary>
            <param name="x">The x (or width) component.</param>
            <param name="y">The y (or height) component.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Size2D.EqualTo(Tizen.NUI.Size2D)">
            <summary>
            Checks equality.<br />
            Utilizes appropriate machine epsilon values.<br />
            </summary>
            <param name="rhs">The size to test against.</param>
            <returns>True if the sizes are equal.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Size2D.NotEqualTo(Tizen.NUI.Size2D)">
            <summary>
            Checks inequality.<br />
            Utilizes appropriate machine epsilon values.<br />
            </summary>
            <param name="rhs">The size to test against.</param>
            <returns>True if the sizes are not equal.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Size2D.Width">
            <summary>
            The property for the width component of a size.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Size2D.Height">
            <summary>
            The property for the height component of a size.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Size2D.op_Implicit(Tizen.NUI.Size2D)~Tizen.NUI.Vector2">
            <summary>
            The type cast operator, Size2D to Vector2.
            </summary>
            <param name="size">An object of the Size2D type.</param>
            <returns>return a Vector2 instance</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Size2D.op_Implicit(Tizen.NUI.Vector2)~Tizen.NUI.Size2D">
            <summary>
            The type cast operator, Vector2 to Size2D type.
            </summary>
            <param name="vector2">An object of the Vector2 type.</param>
            <returns>return a Size2D instance</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.StyleManager">
            <summary>
            The StyleManager informs applications of the system theme change, and supports application theme change at runtime.<br />
            Applies various styles to controls using the properties system.<br />
            On theme change, it automatically updates all controls, then raises a event to inform the application.<br />
            If the application wants to customize the theme, RequestThemeChange needs to be called.<br />
            It provides the path to the application resource root folder, from there the filename can be specified along with any subfolders, for example, Images, Models, etc.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.StyleManager.Instance">
            <summary>
            Gets the singleton of the StyleManager object.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.StyleManager.StyleChangedEventArgs">
            <summary>
            Style changed event arguments.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.StyleManager.StyleChangedEventArgs.StyleManager">
            <summary>
            StyleManager.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.StyleManager.StyleChangedEventArgs.StyleChange">
            <summary>
            StyleChange - contains the style change information (default font changed or
            default font size changed or theme has changed).<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="E:Tizen.NUI.StyleManager.StyleChanged">
            <summary>
            An event for the StyleChanged signal which can be used to subscribe or unsubscribe the
            event handler provided by the user.<br />
            The StyleChanged signal is emitted after the style (for example, theme or font change) has changed
            and the controls have been informed.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.StyleManager.#ctor">
            <summary>
            Creates a StyleManager handle.<br />
            This can be initialized with StyleManager::Get().<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.StyleManager.Get">
            <summary>
            Gets the singleton of StyleManager object.
            </summary>
            <returns>A handle to the StyleManager control.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.StyleManager.ApplyTheme(System.String)">
            <summary>
            Applies a new theme to the application.<br />
            This will be merged on the top of the default Toolkit theme.<br />
            If the application theme file doesn't style all controls that the
            application uses, then the default Toolkit theme will be used
            instead for those controls.<br />
            </summary>
            <param name="themeFile">A relative path is specified for style theme.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.StyleManager.ApplyDefaultTheme">
            <summary>
            Applies the default Toolkit theme.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.StyleManager.AddConstant(System.String,Tizen.NUI.PropertyValue)">
            <summary>
            Sets a constant for use when building styles.
            </summary>
            <param name="key">The key of the constant.</param>
            <param name="value">The value of the constant.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.StyleManager.GetConstant(System.String,Tizen.NUI.PropertyValue)">
            <summary>
            Returns the style constant set for a specific key.
            </summary>
            <param name="key">The key of the constant.</param>
            <param name="valueOut">The value of the constant if it exists.</param>
            <returns></returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.StyleManager.ApplyStyle(Tizen.NUI.BaseComponents.View,System.String,System.String)">
            <summary>
            Applies the specified style to the control.
            </summary>
            <param name="control">The control to which to apply the style.</param>
            <param name="jsonFileName">The name of the JSON style file to apply.</param>
            <param name="styleName">The name of the style within the JSON file to apply.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.TapGesture">
            <summary>
            A TapGesture is emitted when the user taps the screen with the stated number of fingers a stated number of times.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.TapGesture.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            Dispose.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.TapGesture.GetTapGestureFromPtr(System.IntPtr)">
            <summary>
            Gets the TapGesture from the pointer.
            </summary>
            <param name="cPtr">The pointer to cast.</param>
            <returns>The TapGesture object.</returns>
        </member>
        <member name="P:Tizen.NUI.TapGesture.NumberOfTaps">
            <summary>
            The number of taps property (read-only).
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.TapGesture.NumberOfTouches">
            <summary>
            The number of touches property (read-only).
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.TapGesture.ScreenPoint">
            <summary>
            The screen point property (read-only).
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.TapGesture.LocalPoint">
            <summary>
            The local point property (read-only).
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.TapGesture.#ctor">
            <summary>
            Creates a TapGesture.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.Texture">
            <summary>
            Texture represents a texture object used as input or output by shaders.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Texture.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            Dispose.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Texture.#ctor(Tizen.NUI.TextureType,Tizen.NUI.PixelFormat,System.UInt32,System.UInt32)">
            <summary>
            Creates a new Texture object.
            </summary>
            <param name="type">The type of the texture.</param>
            <param name="format">The format of the pixel data.</param>
            <param name="width">The width of the texture.</param>
            <param name="height">The height of the texture.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Texture.Upload(Tizen.NUI.PixelData)">
            <summary>
            Uploads data to the texture from a PixelData object.
            </summary>
            <param name="pixelData">The pixelData object.</param>
            <returns>True if the PixelData object has compatible pixel format and fits within the texture, false otherwise.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Texture.Upload(Tizen.NUI.PixelData,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Uploads data to the texture from a PixelData object.
            </summary>
            <param name="pixelData">The pixelData object.</param>
            <param name="layer">The layer of a cube map or array texture.</param>
            <param name="mipmap">The level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.</param>
            <param name="xOffset">The horizontal offset of the rectangular area in the texture that will be updated.</param>
            <param name="yOffset">The vertical offset of the rectangular area in the texture that will be updated.</param>
            <param name="width">The width of the rectangular area in the texture that will be updated.</param>
            <param name="height">height of the rectangular area in the texture that will be updated.</param>
            <returns>True if the PixelData object has compatible pixel format and fits within the texture, false otherwise.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Texture.GenerateMipmaps">
            <summary>
            Generates mipmaps for the texture.<br />
            This will auto generate all the mipmaps for the texture based on the data in the base level.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Texture.GetWidth">
            <summary>
            Returns the width of the texture.<br />
            </summary>
            <returns>The width, in pixels, of the texture.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Texture.GetHeight">
            <summary>
            Returns the height of the texture..<br />
            </summary>
            <returns>The height, in pixels, of the texture.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.TextureSet">
            <summary>
            TextureSet is a handle to an object that specifies the set of images used as textures by a renderer.<br />
            The images have to be ordered in the same order they are declared in the shader.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.TextureSet.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            Dispose.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.TextureSet.#ctor">
            <summary>
            Create an instance of TextureSet.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.TextureSet.SetTexture(System.UInt32,Tizen.NUI.Texture)">
            <summary>
            Sets the texture at position "index".
            </summary>
            <param name="index">The position in the texture set of the texture.</param>
            <param name="texture">The texture.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.TextureSet.GetTexture(System.UInt32)">
            <summary>
            Gets the image at position "index".
            </summary>
            <param name="index">The position in the texture set of the image.</param>
            <returns>A handle to the image at the the specified position.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.TextureSet.SetSampler(System.UInt32,Tizen.NUI.Sampler)">
            <summary>
            Sets the sampler to be used by the image at position "index".
            </summary>
            <param name="index">The position in the texture set of the image.</param>
            <param name="sampler">The sampler to use.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.TextureSet.GetSampler(System.UInt32)">
            <summary>
            Sets the sampler to be used by the image at position "index".
            </summary>
            <param name="index">The position in the texture set of the image.</param>
            <returns>A handle to the sampler at the specified position.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.TextureSet.GetTextureCount">
            <summary>
            Gets the number of textures present in the TextureSet.
            </summary>
            <returns>The number of textures in the TextureSet.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.TextureType">
            <summary>
            The texture type.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.TextureType.TEXTURE_2D">
            <summary>
            One 2D image
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.TextureType.TEXTURE_CUBE">
            <summary>
            Six 2D images arranged in a cube-shape
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.Timer">
            <summary>
            Mechanism to issue simple periodic or one-shot events.<br />
            Timer is provided for application developers to be able to issue
            simple periodic or one-shot events. Please note that the timer
            callback functions should return as soon as possible because they
            block the next SignalTick. Please note that timer signals are not
            in sync with DALi's render timer.<br />
            This class is a handle class so it can be stack allocated and used
            as a member.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Timer.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            Dispose.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.Timer.TickEventArgs">
            <summary>
            Event arguments that passed via the tick event.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="E:Tizen.NUI.Timer.Tick">
            <summary>
            @brief Event for the ticked signal, which can be used to subscribe or unsubscribe the event handler
            provided by the user. The ticked signal is emitted after specified time interval.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Timer.#ctor(System.UInt32)">
            <summary>
            Creates a tick timer that emits periodic signal.
            </summary>
            <param name="milliSec">Interval in milliseconds.</param>
            <returns>A new timer.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Timer.Start">
            <summary>
            Starts the timer.<br />
            In case a timer is already running, its time is reset and the timer is restarted.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Timer.Stop">
            <summary>
            Stops the timer.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Timer.Interval">
            <summary>
            Gets/Sets the interval of the timer.
            </summary>
            <remarks>For setter, this sets a new interval on the timer and starts the timer. <br />
            Cancels the previous timer.
            </remarks>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Timer.SetInterval(System.UInt32)">
            <summary>
            Sets a new interval on the timer and starts the timer.<br />
            Cancels the previous timer.<br />
            </summary>
            <param name="milliSec">MilliSec interval in milliseconds.</param>
        </member>
        <member name="M:Tizen.NUI.Timer.IsRunning">
            <summary>
            Tells whether the timer is running.
            </summary>
            <returns>Whether the timer is started or not.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.Touch">
            <summary>
            Touch events are a collection of points at a specific moment in time.<br />
            When a multi-touch event occurs, each point represents the points that are currently being
            touched or the points where a touch has stopped.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Touch.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            Dispose.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Touch.#ctor">
            <summary>
            An uninitialized touch instance.<br />
            Calling member functions with an uninitialized touch handle is not allowed.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Touch.GetTime">
            <summary>
            Returns the time (in ms) that the touch event occurred.
            </summary>
            <returns>The time (in ms) that the touch event occurred.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Touch.GetPointCount">
            <summary>
            Returns the total number of points in this TouchData.
            </summary>
            <returns>The total number of points.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Touch.GetDeviceId(System.UInt32)">
            <summary>
            Returns the ID of the device used for the point specified.<br />
            Each point has a unique device ID, which specifies the device used for that
            point. This is returned by this method.<br />
            If a point is greater than GetPointCount(), then this method will return -1.<br />
            </summary>
            <param name="point">The point required.</param>
            <returns>The device ID of this point.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Touch.GetState(System.UInt32)">
            <summary>
            Retrieves the state of the point specified.<br />
            If a point is greater than GetPointCount(), then this method will return PointState.Finished.<br />
            </summary>
            <param name="point">The point required.</param>
            <returns>The state of the point specified.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Touch.GetHitView(System.UInt32)">
            <summary>
            Retrieves the actor that was underneath the point specified.<br />
            If a point is greater than GetPointCount(), then this method will return an empty handle.<br />
            </summary>
            <param name="point">The point required.</param>
            <returns>The actor that was underneath the point specified.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Touch.GetLocalPosition(System.UInt32)">
            <summary>
            Retrieves the coordinates relative to the top-left of the hit actor at the point specified.<br />
            The top-left of an actor is (0.0, 0.0, 0.5).<br />
            If you require the local coordinates of another actor (for example, the parent of the hit actor),
            then you should use Actor::ScreenToLocal().<br />
            If a point is greater than GetPointCount(), then this method will return Vector2.Zero.<br />
            </summary>
            <param name="point">The point required.</param>
            <returns>The coordinates relative to the top-left of the hit actor of the point specified.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Touch.GetScreenPosition(System.UInt32)">
            <summary>
            Retrieves the coordinates relative to the top-left of the screen of the point specified.<br />
            If a point is greater than GetPointCount(), then this method will return Vector2.Zero.<br />
            </summary>
            <param name="point">The point required.</param>
            <returns>The coordinates relative to the top-left of the screen of the point specified.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Touch.GetRadius(System.UInt32)">
            <summary>
            Retrieves the radius of the press point.<br />
            This is the average of both the horizontal and vertical radii of the press point.<br />
            If point is greater than GetPointCount(), then this method will return 0.0f.<br />
            </summary>
            <param name="point">The point required.</param>
            <returns>The radius of the press point.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Touch.GetEllipseRadius(System.UInt32)">
            <summary>
            Retrieves both the horizontal and the vertical radii of the press point.<br />
            If a point is greater than GetPointCount(), then this method will return Vector2.Zero.<br />
            </summary>
            <param name="point">The point required.</param>
            <returns>The horizontal and vertical radii of the press point.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Touch.GetPressure(System.UInt32)">
            <summary>
            Retrieves the touch pressure.<br />
            The pressure range starts at 0.0f.<br />
            Normal pressure is defined as 1.0f.<br />
            A value between 0.0f and 1.0f means light pressure has been applied.<br />
            A value greater than 1.0f means more pressure than normal has been applied.<br />
            If point is greater than GetPointCount(), then this method will return 1.0f.<br />
            </summary>
            <param name="point">The point required.</param>
            <returns>The touch pressure.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.TransitionData">
            <summary>
            This object translates data from a property array of maps into an array of animators.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.TransitionData.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            Dispose.
            </summary>
            <param name="type">The dispose type</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.TransitionData.#ctor(Tizen.NUI.PropertyMap)">
            <summary>
            Create an instance of TransitionData.
            </summary>
            <param name="transition">The transition data to store (a single animator).</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.TransitionData.#ctor(Tizen.NUI.PropertyArray)">
            <summary>
            Create an instance of TransitionData.
            </summary>
            <param name="transition">The transition data to store (an array of maps of animators).</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.TransitionData.#ctor(Tizen.NUI.TransitionData)">
            <summary>
            Create an instance of TransitionData by copy constructor.
            </summary>
            <param name="handle">Handle to an object.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.TransitionData.Count">
            <summary>
            returns the count of the individual property transitions stored within this handle.
            </summary>
            <returns>A handle to the image at the the specified position.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.TransitionData.GetAnimatorAt(System.UInt32)">
            <summary>
            returns the count of the individual property transitions stored within this handle.
            </summary>
            <param name="index">The index of the animator.</param>
            <returns>A property map representing the animator.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.TTSPlayer">
            <summary>
            The Text-to-speech (TTS) player.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.TTSPlayer.Instance">
            <summary>
            Gets the singleton of the TTSPlayer object.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.TTSPlayer.Get(Tizen.NUI.TTSPlayer.TTSMode)">
            <summary>
            Gets the singleton of the TTS player for the given mode.
            </summary>
            <param name="mode"> The mode of TTS player.</param>
            <returns> A handle of the TTS player for the given mode.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.TTSPlayer.Get">
            <summary>
            Gets the singleton of the TTS player for the default mode.
            </summary>
            <returns> A handle of the TTS player for the default mode.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.TTSPlayer.Play(System.String)">
            <summary>
            Starts playing the audio data synthesized from the specified text.
            </summary>
            <param name="text"> The text to play.</param>
            <remarks>The TTS player needs to be initialized.</remarks>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.TTSPlayer.Stop">
            <summary>
            Stops playing the utterance.
            </summary>
            <remarks>The TTS player needs to be initialized.</remarks>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.TTSPlayer.Pause">
            <summary>
            Pauses the currently playing utterance.
            </summary>
            <remarks>The TTS player needs to be initialized.</remarks>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.TTSPlayer.Resume">
            <summary>
            Resumes the previously paused utterance.
            </summary>
            <remarks>The TTS player needs to be initialized.</remarks>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.TTSPlayer.GetState">
            <summary>
            Gets the current state of the player.
            </summary>
            <returns> The current TTS state. </returns>
            <remarks>The TTS player needs to be initialized.</remarks>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.TTSPlayer.StateChangedEventArgs">
            <summary>
            State changed argument.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.TTSPlayer.StateChangedEventArgs.PrevState">
            <summary>
            PrevState.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.TTSPlayer.StateChangedEventArgs.NextState">
            <summary>
            NextState.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="E:Tizen.NUI.TTSPlayer.StateChanged">
            <summary>
            State changed event.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.TTSPlayer.TTSMode">
            <summary>
            Enumeration for the instance of TTS mode.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.TTSPlayer.TTSMode.Default">
            <summary>
            Default mode for normal application.
            </summary>
        </member>
        <member name="F:Tizen.NUI.TTSPlayer.TTSMode.Notification">
            <summary>
            Notification mode, such as playing utterance is started or completed.
            </summary>
        </member>
        <member name="F:Tizen.NUI.TTSPlayer.TTSMode.ScreenReader">
            <summary>
            Screen reader mode. <br />
            To help visually impaired users interact with their devices,<br />
            screen reader reads text or graphic elements on the screen using the TTS engine.
            </summary>
        </member>
        <member name="F:Tizen.NUI.TTSPlayer.TTSMode.ModeNum">
            <summary>
            Number of mode.
            </summary>
        </member>
        <member name="T:Tizen.NUI.TTSPlayer.TTSState">
            <summary>
            Enumeration for the instance of TTS state.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.TTSPlayer.TTSState.Unavailable">
            <summary>
            Player is not available.
            </summary>
        </member>
        <member name="F:Tizen.NUI.TTSPlayer.TTSState.Ready">
            <summary>
            Player is ready to play.
            </summary>
        </member>
        <member name="F:Tizen.NUI.TTSPlayer.TTSState.Playing">
            <summary>
            Player is playing.
            </summary>
        </member>
        <member name="F:Tizen.NUI.TTSPlayer.TTSState.Paused">
            <summary>
            Player is paused.
            </summary>
        </member>
        <member name="T:Tizen.NUI.TypeInfo">
            <summary>
            TypeInfo class for instantiation of registered types and introspection of their actions and signals.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.TypeInfo.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            Dispose.
            </summary>
            <param name="type">The dispose type</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.TypeInfo.#ctor">
            <summary>
            Creates TypeInfo object.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.TypeInfo.#ctor(Tizen.NUI.TypeInfo)">
            <summary>
            Creates TypeInfo object.
            </summary>
            <param name="handle">This copy constructor is required for (smart) pointer semantics.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.TypeInfo.GetName">
            <summary>
            Retrieves the type name for this type.
            </summary>
            <returns>The string name.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.TypeInfo.GetBaseName">
            <summary>
            Retrieves the type name for this type.
            </summary>
            <returns>The string name.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.TypeInfo.CreateInstance">
            <summary>
            Creates an object from this type.
            </summary>
            <returns>The BaseHandle for the newly created object.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.TypeInfo.GetPropertyCount">
            <summary>
            Retrieves the number of event side type registered properties for this type.<br />
            This count does not include all properties.
            </summary>
            <returns>The count.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.TypeInfo.GetPropertyName(System.Int32)">
            <summary>
            Given a property index, retrieve the property name associated with it.
            </summary>
            <param name="index">The property index.</param>
            <returns>The name of the property at the given index.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.UIComponents.Button">
            <summary>
            The Button class is a base class for different kinds of buttons.<br />
            This class provides the disabled property and the clicked signal.<br />
            The clicked event handler is emitted when the button is touched, and the touch point doesn't leave the boundary of the button.<br />
            When the disabled property is set to true, no signal is emitted.<br />
            The 'Visual' describes not just traditional images like PNG and BMP, but also refers to whatever is used to show the button. It could be a color, gradient, or some other kind of renderer.<br />
            The button's appearance can be modified by setting properties for the various visuals or images.<br />
            It is not mandatory to set all the visuals. A button could be defined only by setting its background visual, or by setting its background and selected visuals.<br />
            The button visual is shown over the background visual.<br />
            When pressed, the unselected visuals are replaced by the selected visuals.<br />
            The text label is always placed on the top of all images.<br />
            When the button is disabled, the background button and the selected visuals are replaced by their disabled visuals.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.UIComponents.Button.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            To dispose the button instance.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="E:Tizen.NUI.UIComponents.Button.Clicked">
            <summary>
            The Clicked event will be triggered when the button is touched and the touch point doesn't leave the boundary of the button.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="E:Tizen.NUI.UIComponents.Button.Pressed">
            <summary>
            The Pressed event will be triggered when the button is touched.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="E:Tizen.NUI.UIComponents.Button.Released">
            <summary>
            The Released event will be triggered when the button is touched and the touch point leaves the boundary of the button.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="E:Tizen.NUI.UIComponents.Button.StateChanged">
            <summary>
            The StateChanged event will be triggered when the button's state is changed.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.UIComponents.Button.UnselectedVisual">
            <summary>
            Gets or sets the unselected button foreground or icon visual.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.UIComponents.Button.SelectedVisual">
            <summary>
            Gets or sets the selected button foreground or icon visual.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.UIComponents.Button.DisabledSelectedVisual">
            <summary>
            Gets or sets the disabled selected state foreground or icon button visual.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.UIComponents.Button.DisabledUnselectedVisual">
            <summary>
            Gets or sets the disabled unselected state foreground or icon visual.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.UIComponents.Button.UnselectedBackgroundVisual">
            <summary>
            Gets or sets the disabled unselected state background button visual.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.UIComponents.Button.SelectedBackgroundVisual">
            <summary>
            Gets or sets the selected background button visual.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.UIComponents.Button.DisabledUnselectedBackgroundVisual">
            <summary>
            Gets or sets the disabled while unselected background button visual.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.UIComponents.Button.DisabledSelectedBackgroundVisual">
            <summary>
            Gets or sets the disabled while selected background button visual.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.UIComponents.Button.LabelRelativeAlignment">
            <summary>
            Gets or sets the position of the the label in relation to the foreground or icon, if both present.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.UIComponents.Button.LabelPadding">
            <summary>
            Gets or sets the padding around the text.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.UIComponents.Button.ForegroundVisualPadding">
            <summary>
            Gets or sets the padding around the foreground visual.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.UIComponents.Button.#ctor">
            <summary>
            Creates an uninitialized button.<br />
            Only the derived versions can be instantiated.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.UIComponents.Button.AutoRepeating">
            <summary>
            If the autorepeating property is set to true, then the togglable property is set to false.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.UIComponents.Button.InitialAutoRepeatingDelay">
            <summary>
            By default, this value is set to 0.15 seconds.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.UIComponents.Button.NextAutoRepeatingDelay">
            <summary>
            By default, this value is set to 0.05 seconds.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.UIComponents.Button.Togglable">
            <summary>
            If the togglable property is set to true, then the autorepeating property is set to false.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.UIComponents.Button.Selected">
            <summary>
            Gets or sets the togglable button as either selected or unselected, togglable property must be set to true.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.UIComponents.Button.UnselectedColor">
            <summary>
            Gets or sets the unselected color.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.UIComponents.Button.SelectedColor">
            <summary>
            Gets or sets the selected color.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.UIComponents.Button.Label">
            <summary>
            Gets or sets the label.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.UIComponents.Button.LabelText">
            <summary>
            Gets or sets the text of the label.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.UIComponents.Button.Align">
            <summary>
            Enumeration for describing the position, the text label can be, in relation to the control (and foreground/icon).
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.UIComponents.Button.Align.Begin">
            <summary>
            At the start of the control before the foreground or icon.
            </summary>
        </member>
        <member name="F:Tizen.NUI.UIComponents.Button.Align.End">
            <summary>
            At the end of the control after the foreground or icon.
            </summary>
        </member>
        <member name="F:Tizen.NUI.UIComponents.Button.Align.Top">
            <summary>
            At the top of the control above the foreground or icon.
            </summary>
        </member>
        <member name="F:Tizen.NUI.UIComponents.Button.Align.Bottom">
            <summary>
            At the bottom of the control below the foreground or icon.
            </summary>
        </member>
        <member name="T:Tizen.NUI.UIComponents.CheckBoxButton">
            <summary>
            The CheckBoxButton provides a checkbox button which the user can check or uncheck.<br />
            By default, the CheckBoxButton emits a Button.Clicked event when the button changes its state to selected or unselected.<br />
            The button's appearance could be modified by Button.UnselectedImage, Button.BackgroundImage, Button.SelectedImage, Button.SelectedBackgroundImage, Button.DisabledBackgroundImage, Button.DisabledImage, and Button.DisabledSelectedImage.<br />
            When the button is not disabled, if it's not selected, it only shows the background image.<br />
            The selected image is shown over the background image when the box is selected (background image is not replaced by \e selected image).<br />
            When the button is disabled, the background image and the selected image are replaced by disabled images.<br />
            /// </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.UIComponents.CheckBoxButton.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            To dispose the CheckBoxButton instance.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.UIComponents.CheckBoxButton.#ctor">
            <summary>
            Creates an initialized CheckBoxButton.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.UIComponents.Popup">
            <summary>
            The Popup widget provides a configurable popup dialog with a built-in layout of three main fields.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.UIComponents.Popup.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            Dispose.
            </summary>
            <param name="type">The dispose type</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.UIComponents.Popup.TouchedOutsideEventArgs">
            <summary>
            Event arguments that passed via the OutsideTouchedEvent.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.UIComponents.Popup.ShowingEventArgs">
            <summary>
            Event arguments that passed via the ShowingEventArgs.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.UIComponents.Popup.ShownEventArgs">
            <summary>
            Event arguments that passed via the ShownEventArgs.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.UIComponents.Popup.HidingEventArgs">
            <summary>
            Event arguments that passed via the HidingEventArgs.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.UIComponents.Popup.HiddenEventArgs">
            <summary>
            Event arguments that passed via the HiddenEventArgs.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="E:Tizen.NUI.UIComponents.Popup.TouchedOutside">
            <summary>
            An event is sent when the user has touched outside the dialog.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="E:Tizen.NUI.UIComponents.Popup.Showing">
            <summary>
            An event is sent when the popup starts showing.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="E:Tizen.NUI.UIComponents.Popup.Shown">
            <summary>
            An event is sent when the popup has been fully displayed.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="E:Tizen.NUI.UIComponents.Popup.Hiding">
            <summary>
            An event is sent when the popup starts to hide.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="E:Tizen.NUI.UIComponents.Popup.Hidden">
            <summary>
            An event is sent when the popup has been completely hidden.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.UIComponents.Popup.#ctor">
            <summary>
            Creates the popup.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.UIComponents.Popup.SetTitle(Tizen.NUI.BaseComponents.View)">
            <summary>
            Sets the title for this popup.
            </summary>
            <param name="titleView">The actor to set the title.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.UIComponents.Popup.SetContent(Tizen.NUI.BaseComponents.View)">
            <summary>
            Sets the content actor.
            </summary>
            <param name="content">The actor to use.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.UIComponents.Popup.SetFooter(Tizen.NUI.BaseComponents.View)">
            <summary>
            Sets the actor to use for the footer in this popup.
            </summary>
            <param name="footer">The footer actor to be added to this popup.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.UIComponents.Popup.SetDisplayState(Tizen.NUI.UIComponents.Popup.DisplayStateType)">
            <summary>
            Sets the display state of popup.<br />
            There are 4 total display states.<br />
            Only 2 can be set, but all four can be read for better inspection of the current popup state.<br />
            <br />
            The other two states are getable, but not setable, and are there for consistency.<br />
            <br />
            | Value    | Setting the state              | Getting the state              |<br />
            |----------|--------------------------------|--------------------------------|<br />
            | SHOWN    | Show the popup                 | The popup is fully shown       |<br />
            | HIDDEN   | Hide the popup                 | The popup is fully hidden      |<br />
            | SHOWING  |                                | The popup is transitioning in  |<br />
            | HIDING   |                                | The popup is transitioning out |<br />
            <br />
            All 4 states changes cause notifications via 4 respective signals that can be connected to.<br />
            </summary>
            <param name="displayState">The desired display state to change to.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.UIComponents.Popup.DisplayStateType">
            <summary>
            The display states of the popup.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.UIComponents.Popup.DisplayStateType.Showing">
            <summary>
            The popup is transitioning in
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.UIComponents.Popup.DisplayStateType.Shown">
            <summary>
            The popup is fully shown
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.UIComponents.Popup.DisplayStateType.Hiding">
            <summary>
            The popup is transitioning out
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.UIComponents.Popup.DisplayStateType.Hidden">
            <summary>
            The popup is fully hidden
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.UIComponents.Popup.AnimationModeType">
            <summary>
            The animation modes within the popup.<br />
            Choose from a predefined mode or "CUSTOM" to use the ANIMATION_IN and ANIMATION_OUT properties.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.UIComponents.Popup.AnimationModeType.None">
            <summary>
            No animation.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.UIComponents.Popup.AnimationModeType.Zoom">
            <summary>
            Popup zooms in and out animating the scale property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.UIComponents.Popup.AnimationModeType.Fade">
            <summary>
            Popup fades in and out
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.UIComponents.Popup.AnimationModeType.Custom">
            <summary>
            Use the EntryAnimation and ExitAnimation animation properties.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.UIComponents.Popup.ContextualModeType">
            <summary>
            The types of the contextual layout.<br />
            The popup is positioned adjacent to it's parent in the direction specified by this mode.<br />
            NON_CONTEXTUAL disables any contextual positioning.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.UIComponents.Popup.ContextualModeType.NonContextual">
            <summary>
            any contextual positioning
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.UIComponents.Popup.ContextualModeType.Above">
            <summary>
            Above
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.UIComponents.Popup.ContextualModeType.Rright">
            <summary>
            Rright
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.UIComponents.Popup.ContextualModeType.Below">
            <summary>
            Below
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.UIComponents.Popup.ContextualModeType.Left">
            <summary>
            Left
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.UIComponents.Popup.Title">
            <summary>
            The popup title.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.UIComponents.Popup.Content">
            <summary>
            The popup content.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.UIComponents.Popup.Footer">
            <summary>
            The popup footer.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.UIComponents.Popup.DisplayState">
            <summary>
            The popup display state.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.UIComponents.Popup.TouchTransparent">
            <summary>
            The touch transparent.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.UIComponents.Popup.TailVisibility">
            <summary>
            The popup tail visibility.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.UIComponents.Popup.TailPosition">
            <summary>
            The popup tail position.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.UIComponents.Popup.ContextualMode">
            <summary>
            The contextual mode.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.UIComponents.Popup.AnimationDuration">
            <summary>
            The animation duration.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.UIComponents.Popup.AnimationMode">
            <summary>
            The animation mode.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.UIComponents.Popup.EntryAnimation">
            <summary>
            The entry animation.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.UIComponents.Popup.ExitAnimation">
            <summary>
            The exit animation.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.UIComponents.Popup.AutoHideDelay">
            <summary>
            The auto hide delay.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.UIComponents.Popup.BackingEnabled">
            <summary>
            The backing enabled.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.UIComponents.Popup.BackingColor">
            <summary>
            The backing color.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.UIComponents.Popup.PopupBackgroundImage">
            <summary>
            The background image.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.UIComponents.Popup.PopupBackgroundBorder">
            <summary>
            The background border.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.UIComponents.Popup.TailUpImage">
            <summary>
            The tail up image.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.UIComponents.Popup.TailDownImage">
            <summary>
            The tail down image.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.UIComponents.Popup.TailLeftImage">
            <summary>
            The tail left image.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.UIComponents.Popup.TailRightImage">
            <summary>
            The tail right image.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.UIComponents.ProgressBar">
            <summary>
            The ProgressBar is a control to give the user an indication of the progress of an operation.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.UIComponents.ProgressBar.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            To dispose the ProgressBar instance.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.UIComponents.ProgressBar.ValueChangedEventArgs">
            <summary>
            Event arguments that passed via the ValueChangedEventArgs.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.UIComponents.ProgressBar.ValueChangedEventArgs.ProgressBar">
            <summary>
            ProgressBar
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.UIComponents.ProgressBar.ValueChangedEventArgs.ProgressValue">
            <summary>
            The progress value of the progress bar, the progress runs from 0 to 1.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.UIComponents.ProgressBar.ValueChangedEventArgs.SecondaryProgressValue">
            <summary>
            The secondary progress value of the progress bar, the secondary progress runs from 0 to 1.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="E:Tizen.NUI.UIComponents.ProgressBar.ValueChanged">
            <summary>
            The event is sent when the ProgressBar value changes.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.UIComponents.ProgressBar.#ctor">
            <summary>
            Creates the ProgressBar.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.UIComponents.ProgressBar.ProgressValue">
            <summary>
            The progress value of the progress bar, the progress runs from 0 to 1.<br />
            If the value is set to 0, then the progress bar will be set to beginning.<br />
            If the value is set to 1, then the progress bar will be set to end.<br />
            Any value outside the range is ignored.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.UIComponents.ProgressBar.SecondaryProgressValue">
            <summary>
            The secondary progress value of the progress bar, the secondary progress runs from 0 to 1.<br />
            Optional. If not supplied, the default is 0.<br />
            If the value is set to 0, then the progress bar will be set secondary progress to beginning.<br />
            If the value is set to 1, then the progress bar will be set secondary progress to end.<br />
            Any value outside of the range is ignored.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.UIComponents.ProgressBar.Indeterminate">
            <summary>
            Sets the progress bar as \e indeterminate state.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.UIComponents.ProgressBar.TrackVisual">
            <summary>
            The track visual value of progress bar, it's full progress area, and it's shown behind the PROGRESS_VISUAL.<br />
            Optional. If not supplied, the default track visual will be shown.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.UIComponents.ProgressBar.ProgressVisual">
            <summary>
            The progress visual value of the progress bar, the size of the progress visual is changed based on the PROGRESS_VALUE.<br />
            Optional. If not supplied, then the default progress visual will be shown.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.UIComponents.ProgressBar.SecondaryProgressVisual">
            <summary>
            The secondary progress visual of the progress bar, the size of the secondary progress visual is changed based on the SECONDARY_PROGRESS_VALUE.<br />
            Optional. If not supplied, then the secondary progress visual will not be shown.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.UIComponents.ProgressBar.IndeterminateVisual">
            <summary>
            The indeterminate visual of the progress bar.<br />
            Optional. If not supplied, then the default indeterminate visual will be shown.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.UIComponents.ProgressBar.IndeterminateVisualAnimation">
            <summary>
            The transition data for the indeterminate visual animation.<br />
            Optional. If not supplied, then the default animation will be played.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.UIComponents.ProgressBar.LabelVisual">
            <summary>
            The label visual of the progress bar.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.UIComponents.PushButton">
            <summary>
            The PushButton changes its appearance when it is pressed, and returns to its original when it is released.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.UIComponents.PushButton.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            To dispose the PushButton instance.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.UIComponents.PushButton.#ctor">
            <summary>
            Creates the PushButton.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.UIComponents.RadioButton">
            <summary>
            A RadioButton provides a radio button with two states, \e selected or \e unselected.<br />
            Radio buttons are designed to select one of the many options at the same time.<br />
            A RadioButton can change its current state using the selected.<br />
            <br />
            RadioButtons can be grouped.<br />
            Two or more RadioButtons are in one group when they have this same parent.<br />
            In each groups only one RadioButton can be \e selected at a given time.<br />
            So when a RadioButton is set to \e selected, other RadioButtons in its group are set to \e unselected.<br />
            When \e selected RadioButton is set to \e unselected, no other RadioButtons in this group are set to \e selected.<br />
            <br />
            The StateChanged event is emitted when the RadioButton change its state to \e selected or \e unselected.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.UIComponents.RadioButton.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            To dispose the RadioButton instance.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.UIComponents.RadioButton.#ctor">
            <summary>
            Creates an uninitialized RadioButton.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.UIComponents.RadioButton.#ctor(System.String)">
            <summary>
            Creates an uninitialized RadioButton with the label.
            </summary>
            <param name="label">The label text.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.UIComponents.ScrollBar">
            <summary>
            The ScrollBar is a UI component that can be linked to the scrollable objects
            indicating the current scroll position of the scrollable object.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.UIComponents.ScrollBar.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            To dispose the ScrollBar instance.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.UIComponents.ScrollBar.PanFinishedEventArgs">
            <summary>
            Event arguments that passed via the PanFinished event.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.UIComponents.ScrollBar.ScrollIntervalEventArgs">
            <summary>
            Event arguments that passed via the ScrollPositionIntervalReached event.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.UIComponents.ScrollBar.ScrollIntervalEventArgs.CurrentScrollPosition">
            <summary>
            The current scroll position of the scrollable content.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="E:Tizen.NUI.UIComponents.ScrollBar.PanFinished">
            <summary>
            The event emitted when panning is finished on the scroll indicator.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="E:Tizen.NUI.UIComponents.ScrollBar.ScrollInterval">
            <summary>
            This is the event emitted when the current scroll position of the scrollable content.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.UIComponents.ScrollBar.#ctor(Tizen.NUI.UIComponents.ScrollBar.Direction)">
            <summary>
            Creates an initialized scrollbar.
            </summary>
            <param name="direction">The direction of the scrollbar (either vertically or horizontally).</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.UIComponents.ScrollBar.#ctor">
            <summary>
            Creates an uninitialized scrollbar.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.UIComponents.ScrollBar.Direction">
            <summary>
            The direction of the scrollbar.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.UIComponents.ScrollBar.Direction.Vertical">
            <summary>
            Scroll in the vertical direction
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.UIComponents.ScrollBar.Direction.Horizontal">
            <summary>
            Scroll in the horizontal direction
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.UIComponents.ScrollBar.IndicatorHeightPolicyType">
            <summary>
            The indicator height policy.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.UIComponents.ScrollBar.IndicatorHeightPolicyType.Variable">
            <summary>
            Variable height changed dynamically according to the length of scroll content
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.UIComponents.ScrollBar.IndicatorHeightPolicyType.Fixed">
            <summary>
            Fixed height regardless of the length of scroll content
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.UIComponents.ScrollBar.ScrollDirection">
            <summary>
            The direction of the scrollbar.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.UIComponents.ScrollBar.IndicatorHeightPolicy">
            <summary>
            The indicator height policy.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.UIComponents.ScrollBar.IndicatorFixedHeight">
            <summary>
            The fixed height of the scroll indicator.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.UIComponents.ScrollBar.IndicatorShowDuration">
            <summary>
            The duration in seconds for the scroll indicator to become fully visible.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.UIComponents.ScrollBar.IndicatorHideDuration">
            <summary>
            The duration in seconds for the scroll indicator to become fully invisible.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.UIComponents.ScrollBar.ScrollPositionIntervals">
            <summary>
            The list of values to get the notification when the current scroll position of the scrollable object goes above or below any of these values.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.UIComponents.ScrollBar.IndicatorMinimumHeight">
            <summary>
            The minimum height for a variable size indicator.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.UIComponents.ScrollBar.IndicatorStartPadding">
            <summary>
            The padding at the start of the indicator. For example, the top if the scrollDirection is vertical.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.UIComponents.ScrollBar.IndicatorEndPadding">
            <summary>
            The padding at the end of the indicator. For example, the bottom if the scrollDirection is vertical.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.UIComponents.Slider">
            <summary>
            The slider is a control to enable sliding an indicator between two values.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.UIComponents.Slider.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            Dispose.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.UIComponents.Slider.ValueChangedEventArgs">
            <summary>
            The ValueChanged event arguments.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.UIComponents.Slider.ValueChangedEventArgs.Slider">
            <summary>
            The slider.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.UIComponents.Slider.ValueChangedEventArgs.SlideValue">
            <summary>
            The slider value.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.UIComponents.Slider.SlidingFinishedEventArgs">
            <summary>
            The SlidingFinished event arguments.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.UIComponents.Slider.SlidingFinishedEventArgs.Slider">
            <summary>
            The slider.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.UIComponents.Slider.SlidingFinishedEventArgs.SlideValue">
            <summary>
            The slider value.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.UIComponents.Slider.MarkReachedEventArgs">
            <summary>
            The MarkReached event arguments.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.UIComponents.Slider.MarkReachedEventArgs.Slider">
            <summary>
            The slider.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.UIComponents.Slider.MarkReachedEventArgs.SlideValue">
            <summary>
            The slider value.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="E:Tizen.NUI.UIComponents.Slider.ValueChanged">
            <summary>
            An event emitted when the slider value changes.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="E:Tizen.NUI.UIComponents.Slider.SlidingFinished">
            <summary>
            An event emitted when the sliding is finished.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="E:Tizen.NUI.UIComponents.Slider.MarkReached">
            <summary>
            An event emitted when the slider handle reaches a mark.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.UIComponents.Slider.GetSliderFromPtr(System.IntPtr)">
            <summary>
            Gets the slider from the pointer.
            </summary>
            <param name="cPtr">The pointer of the slider.</param>
            <returns>The object of the slider type.</returns>
        </member>
        <member name="M:Tizen.NUI.UIComponents.Slider.Property.Dispose">
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.UIComponents.Slider.#ctor">
            <summary>
            Creates the slider control.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.UIComponents.Slider.DownCast(Tizen.NUI.BaseHandle)">
            <summary>
            Downcasts an object handle to the slider.<br />
            If the handle points to a slider, then the downcast produces a valid handle.<br />
            If not, then the returned handle is left uninitialized.<br />
            </summary>
            <param name="handle">The handle to an object.</param>
            <returns>The handle to a slider or an uninitialized handle.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.UIComponents.Slider.LowerBound">
            <summary>
            The lower bound property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.UIComponents.Slider.UpperBound">
            <summary>
            The upper bound property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.UIComponents.Slider.Value">
            <summary>
            The value property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.UIComponents.Slider.TrackVisual">
            <summary>
            The track visual property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.UIComponents.Slider.HandleVisual">
            <summary>
            The handle visual property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.UIComponents.Slider.ProgressVisual">
            <summary>
            The progress visual property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.UIComponents.Slider.PopupVisual">
            <summary>
            The popup visual property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.UIComponents.Slider.PopupArrowVisual">
            <summary>
            The popup arrow visual property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.UIComponents.Slider.DisabledColor">
            <summary>
            The disable color property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.UIComponents.Slider.ValuePrecision">
            <summary>
            The value precision property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.UIComponents.Slider.ShowPopup">
            <summary>
            The show popup property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.UIComponents.Slider.ShowValue">
            <summary>
            The show value property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.UIComponents.Slider.Marks">
            <summary>
            The marks property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.UIComponents.Slider.SnapToMarks">
            <summary>
            The snap to marks property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.UIComponents.Slider.MarkTolerance">
            <summary>
            The mark tolerance property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ScrollView">
            <summary>
            ScrollView contains views that can be scrolled manually (via touch).
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ScrollView.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            Dispose
            </summary>
            <param name="type">the dispose type</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ScrollView.SnapStartedEventArgs">
            <summary>
            Event arguments that passed via the SnapStarted signal.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.ScrollView.SnapStartedEventArgs.SnapEventInfo">
            <summary>
            SnapEventInfo is the SnapEvent information like snap or flick (it tells the target position, scale, rotation for the snap or flick).
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="E:Tizen.NUI.ScrollView.SnapStarted">
            <summary>
            SnapStarted can be used to subscribe or unsubscribe the event handler
            The SnapStarted signal is emitted when the ScrollView has started to snap or flick (it tells the target
             position, scale, rotation for the snap or flick).
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ScrollView.SnapEvent">
            <summary>
            Snaps signal event's data.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.ScrollView.SnapEvent.swigCMemOwn">
            <summary>
            swigCMemOwn
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.ScrollView.SnapEvent.disposed">
            <summary>
            A Flat to check if it is already disposed.
            </summary>
            swigCMemOwn
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ScrollView.SnapEvent.Finalize">
            <summary>
            Dispose
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ScrollView.SnapEvent.Dispose">
            <summary>
            Dispose.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ScrollView.SnapEvent.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            Dispose
            </summary>
            <param name="type">the dispose type</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ScrollView.SnapEvent.GetSnapEventFromPtr(System.IntPtr)">
            <summary>
            Get SnapEvent From Ptr
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.ScrollView.SnapEvent.position">
            <summary>
            Scroll position.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.ScrollView.SnapEvent.duration">
            <summary>
            Scroll duration.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ScrollView.SnapEvent.#ctor">
            <summary>
            Create an instance of SnapEvent.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ScrollView.Property">
            <summary>
            This should be internal, please do not use.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.ScrollView.Property.WRAP_ENABLED">
            <summary>
            This should be internal, please do not use.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.ScrollView.Property.PANNING_ENABLED">
            <summary>
            This should be internal, please do not use.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.ScrollView.Property.AXIS_AUTO_LOCK_ENABLED">
            <summary>
            This should be internal, please do not use.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.ScrollView.Property.WHEEL_SCROLL_DISTANCE_STEP">
            <summary>
            This should be internal, please do not use.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.ScrollView.Property.SCROLL_MODE">
            <summary>
            This should be internal, please do not use.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.ScrollView.Property.SCROLL_POSITION">
            <summary>
            This should be internal, please do not use.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.ScrollView.Property.SCROLL_PRE_POSITION">
            <summary>
            This should be internal, please do not use.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.ScrollView.Property.SCROLL_PRE_POSITION_X">
            <summary>
            This should be internal, please do not use.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.ScrollView.Property.SCROLL_PRE_POSITION_Y">
            <summary>
            This should be internal, please do not use.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.ScrollView.Property.SCROLL_PRE_POSITION_MAX">
            <summary>
            This should be internal, please do not use.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.ScrollView.Property.SCROLL_PRE_POSITION_MAX_X">
            <summary>
            This should be internal, please do not use.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.ScrollView.Property.SCROLL_PRE_POSITION_MAX_Y">
            <summary>
            This should be internal, please do not use.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.ScrollView.Property.OVERSHOOT_X">
            <summary>
            This should be internal, please do not use.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.ScrollView.Property.OVERSHOOT_Y">
            <summary>
            This should be internal, please do not use.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.ScrollView.Property.SCROLL_FINAL">
            <summary>
            This should be internal, please do not use.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.ScrollView.Property.SCROLL_FINAL_X">
            <summary>
            This should be internal, please do not use.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.ScrollView.Property.SCROLL_FINAL_Y">
            <summary>
            This should be internal, please do not use.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.ScrollView.Property.WRAP">
            <summary>
            This should be internal, please do not use.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.ScrollView.Property.PANNING">
            <summary>
            This should be internal, please do not use.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.ScrollView.Property.SCROLLING">
            <summary>
            This should be internal, please do not use.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.ScrollView.Property.SCROLL_DOMAIN_SIZE">
            <summary>
            This should be internal, please do not use.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.ScrollView.Property.SCROLL_DOMAIN_SIZE_X">
            <summary>
            This should be internal, please do not use.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.ScrollView.Property.SCROLL_DOMAIN_SIZE_Y">
            <summary>
            This should be internal, please do not use.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.ScrollView.Property.SCROLL_DOMAIN_OFFSET">
            <summary>
            This should be internal, please do not use.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.ScrollView.Property.SCROLL_POSITION_DELTA">
            <summary>
            This should be internal, please do not use.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.ScrollView.Property.START_PAGE_POSITION">
            <summary>
            This should be internal, please do not use.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ScrollView.#ctor">
            <summary>
            Create an instance of ScrollView.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ScrollView.GetScrollSnapAlphaFunction">
            <summary>
            Gets snap-animation's AlphaFunction.
            </summary>
            <returns>Current easing alpha function of the snap animation.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ScrollView.SetScrollSnapAlphaFunction(Tizen.NUI.AlphaFunction)">
            <summary>
            Sets snap-animation's AlphaFunction.
            </summary>
            <param name="alpha">Easing alpha function of the snap animation.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ScrollView.GetScrollFlickAlphaFunction">
            <summary>
            Gets flick-animation's AlphaFunction.
            </summary>
            <returns>Current easing alpha function of the flick animation.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ScrollView.SetScrollFlickAlphaFunction(Tizen.NUI.AlphaFunction)">
            <summary>
            Sets flick-animation's AlphaFunction.
            </summary>
            <param name="alpha">Easing alpha function of the flick animation.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ScrollView.GetScrollSnapDuration">
            <summary>
            Gets the time for the scroll snap-animation.
            </summary>
            <returns>The time in seconds for the animation to take.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ScrollView.SetScrollSnapDuration(System.Single)">
            <summary>
            Sets the time for the scroll snap-animation.
            </summary>
            <param name="time">The time in seconds for the animation to take.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ScrollView.GetScrollFlickDuration">
            <summary>
            Gets the time for the scroll flick-animation.
            </summary>
            <returns>The time in seconds for the animation to take.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ScrollView.SetScrollFlickDuration(System.Single)">
            <summary>
            Sets the time for the scroll snap-animation.
            </summary>
            <param name="time">The time in seconds for the animation to take.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ScrollView.SetScrollSensitive(System.Boolean)">
            <summary>
            Sets scroll sensibility of pan gesture.
            </summary>
            <param name="sensitive">True to enable scroll, false to disable scrolling.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ScrollView.SetMaxOvershoot(System.Single,System.Single)">
            <summary>
            Sets maximum overshoot amount.
            </summary>
            <param name="overshootX">The maximum number of horizontally scrolled pixels before overshoot X reaches 1.0f.</param>
            <param name="overshootY">The maximum number of vertically scrolled pixels before overshoot X reaches 1.0f.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ScrollView.SetSnapOvershootAlphaFunction(Tizen.NUI.AlphaFunction)">
            <summary>
            Sets Snap Overshoot animation's AlphaFunction.
            </summary>
            <param name="alpha">Easing alpha function of the overshoot snap animation.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ScrollView.SetSnapOvershootDuration(System.Single)">
            <summary>
            Sets Snap Overshoot animation's Duration.
            </summary>
            <param name="duration">duration The duration of the overshoot snap animation.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ScrollView.SetViewAutoSnap(System.Boolean)">
            <summary>
            Enables or Disables Actor Auto-Snap mode.<br />
            When Actor Auto-Snap mode has been enabled, ScrollView will automatically,
            snap to the closest actor (The closest actor will appear in the center of the ScrollView).
            </summary>
            <param name="enable">Enables (true), or disables (false) Actor AutoSnap.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ScrollView.SetWrapMode(System.Boolean)">
            <summary>
            Enables or Disables Wrap mode for ScrollView contents.<br />
            When enabled, the ScrollView contents are wrapped over the X/Y Domain.
            </summary>
            <param name="enable">Enables (true), or disables (false) Wrap Mode.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ScrollView.GetScrollUpdateDistance">
            <summary>
            Gets the current distance needed to scroll for ScrollUpdatedSignal to be emitted.
            </summary>
            <returns>Current scroll update distance.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ScrollView.SetScrollUpdateDistance(System.Int32)">
            <summary>
            Sets the distance needed to scroll for ScrollUpdatedSignal to be emitted.<br />
            The scroll update distance tells ScrollView how far to move before ScrollUpdatedSignal the informs application.<br />
            Each time the ScrollView crosses this distance the signal will be emitted.<br />
            </summary>
            <param name="distance">The distance for ScrollView to move before emitting update signal.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ScrollView.GetAxisAutoLock">
            <summary>
            Returns state of Axis Auto Lock mode.
            </summary>
            <returns>Whether Axis Auto Lock mode has been enabled or not.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ScrollView.SetAxisAutoLock(System.Boolean)">
            <summary>
            Enables or Disables Axis Auto Lock mode for panning within the ScrollView.<br />
            When enabled, any pan gesture that appears mostly horizontal or mostly
            vertical, will be automatically restricted to horizontal only or vertical
            only panning, until the pan gesture has completed.
            </summary>
            <param name="enable">Enables (true), or disables (false) AxisAutoLock mode.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ScrollView.GetAxisAutoLockGradient">
            <summary>
            Gets the gradient threshold at which a panning gesture should be locked to the Horizontal or Vertical axis.
            </summary>
            <returns>The gradient, a value between 0.0 and 1.0f.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ScrollView.SetAxisAutoLockGradient(System.Single)">
            <summary>
            Sets the gradient threshold at which a panning gesture should be locked to the Horizontal or Vertical axis.<br />
            By default, this is 0.36 (0.36:1) which means angles less than 20 degrees to an axis will lock to that axis.<br />
            </summary>
            <param name="gradient">gradient A value between 0.0 and 1.0 (auto-lock for all angles).</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ScrollView.GetFrictionCoefficient">
            <summary>
            Gets the friction coefficient setting for ScrollView when flicking in free panning mode.
            This is a value in stage-diagonals per second^2, stage-diagonal = Length( stage.width, stage.height )
            </summary>
            <returns>Friction coefficient is returned.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ScrollView.SetFrictionCoefficient(System.Single)">
            <summary>
            Sets the friction coefficient for ScrollView when flicking.<br />
            </summary>
            <param name="friction">Friction coefficient must be greater than 0.0 (default = 1.0).</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ScrollView.GetFlickSpeedCoefficient">
            <summary>
            Gets the flick speed coefficient for ScrollView when flicking in free panning mode.<br />
            This is a constant which multiplies the input touch flick velocity to determine the actual velocity at which to move the scrolling area.
            </summary>
            <returns>The flick speed coefficient is returned.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ScrollView.SetFlickSpeedCoefficient(System.Single)">
            <summary>
            Sets the flick speed coefficient for ScrollView when flicking in free panning mode.<br />
            This is a constant which multiplies the input touch flick velocity to determine the actual velocity at
            which to move the scrolling area.<br />
            </summary>
            <param name="speed">The flick speed coefficient (default = 1.0).</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ScrollView.GetMinimumDistanceForFlick">
            <summary>
            Gets the minimum pan distance required for a flick gesture in pixels.<br />
            </summary>
            <returns>Minimum pan distance vector with separate x and y distance.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ScrollView.SetMinimumDistanceForFlick(Tizen.NUI.Vector2)">
            <summary>
            Sets the minimum pan distance required for a flick in pixels.<br />
            Takes a Vector2 containing separate x and y values. As long as the pan distance exceeds one of these axes, a flick will be allowed.
            </summary>
            <param name="distance">The flick speed coefficient (default = 1.0).</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ScrollView.GetMinimumSpeedForFlick">
            <summary>
            Returns the minimum pan speed required for a flick gesture in pixels per second.
            </summary>
            <returns>Minimum pan speed.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ScrollView.SetMinimumSpeedForFlick(System.Single)">
            <summary>
            Sets the minimum pan speed required for a flick in pixels per second.<br />
            </summary>
            <param name="speed">The minimum pan speed for a flick.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ScrollView.GetMaxFlickSpeed">
            <summary>
            Gets the maximum flick speed setting for ScrollView when flicking in free panning mode.<br />
            This is a value in stage-diagonals per second.
            </summary>
            <returns>Maximum flick speed is returned.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ScrollView.SetMaxFlickSpeed(System.Single)">
            <summary>
            Sets the maximum flick speed for the ScrollView when flicking in free panning mode.<br />
            This is a value in stage-diagonals per second. stage-diagonal = Length( stage.width, stage.height ).<br />
            </summary>
            <param name="speed">Maximum flick speed (default = 3.0).</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ScrollView.GetWheelScrollDistanceStep">
            <summary>
            Gets the step of scroll distance in actor coordinates for each wheel event received in free panning mode.<br />
            </summary>
            <returns>The step of scroll distance(pixel) in X and Y axes.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ScrollView.SetWheelScrollDistanceStep(Tizen.NUI.Vector2)">
            <summary>
            Sets the step of scroll distance in actor coordinates for each wheel event received in free panning mode.<br />
            </summary>
            <param name="step">step The step of scroll distance(pixel) in X and Y axes.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ScrollView.GetCurrentScrollPosition">
            <summary>
            Retrieves current scroll position.<br />
            </summary>
            <returns>The current scroll position.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ScrollView.GetCurrentPage">
            <summary>
            Retrieves current scroll page based on ScrollView dimensions being the size of one page, and all pages laid out in<br />
            a grid fashion, increasing from left to right until the end of the X-domain.
            </summary>
            <returns>The current scroll position.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ScrollView.ScrollTo(Tizen.NUI.Vector2)">
            <summary>
            Scrolls View to position specified (contents will scroll to this position).
            </summary>
            <param name="position">The position to scroll to.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ScrollView.ScrollTo(Tizen.NUI.Vector2,System.Single)">
            <summary>
            Scrolls View to position specified (contents will scroll to this position).
            </summary>
            <param name="position">The position to scroll to.</param>
            <param name="duration">The duration of the animation in seconds.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ScrollView.ScrollTo(Tizen.NUI.Vector2,System.Single,Tizen.NUI.AlphaFunction)">
            <summary>
            Scrolls View to position specified (contents will scroll to this position).
            </summary>
            <param name="position">The position to scroll to.</param>
            <param name="duration">The duration of the animation in seconds.</param>
            <param name="alpha">The alpha function to use.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ScrollView.ScrollTo(Tizen.NUI.Vector2,System.Single,Tizen.NUI.DirectionBias,Tizen.NUI.DirectionBias)">
            <summary>
            Scrolls View to position specified (contents will scroll to this position).
            </summary>
            <param name="position">The position to scroll to.</param>
            <param name="duration">The duration of the animation in seconds.</param>
            <param name="horizontalBias">Whether to bias scrolling to left or right.</param>
            <param name="verticalBias">Whether to bias scrolling to top or bottom.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ScrollView.ScrollTo(Tizen.NUI.Vector2,System.Single,Tizen.NUI.AlphaFunction,Tizen.NUI.DirectionBias,Tizen.NUI.DirectionBias)">
            <summary>
            Scrolls View to position specified (contents will scroll to this position).
            </summary>
            <param name="position">The position to scroll to.</param>
            <param name="duration">The duration of the animation in seconds.</param>
            <param name="alpha">Alpha function to use.</param>
            <param name="horizontalBias">Whether to bias scrolling to left or right.</param>
            <param name="verticalBias">Whether to bias scrolling to top or bottom.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ScrollView.ScrollTo(System.UInt32)">
            <summary>
            Scrolls View to position specified (contents will scroll to this position).
            </summary>
            <param name="page">The page to scroll to.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ScrollView.ScrollTo(System.UInt32,System.Single)">
            <summary>
            Scrolls View to position specified (contents will scroll to this position).
            </summary>
            <param name="page">The page to scroll to.</param>
            <param name="duration">The duration of the animation in seconds.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ScrollView.ScrollTo(System.UInt32,System.Single,Tizen.NUI.DirectionBias)">
            <summary>
            Scrolls View to position specified (contents will scroll to this position).
            </summary>
            <param name="page">The page to scroll to.</param>
            <param name="duration">The duration of the animation in seconds.</param>
            <param name="bias">Whether to bias scrolling to left or right.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ScrollView.ScrollTo(Tizen.NUI.BaseComponents.View)">
            <summary>
            Scrolls View to position specified (contents will scroll to this position).
            </summary>
            <param name="view">The view to center in on (via Scrolling).</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ScrollView.ScrollTo(Tizen.NUI.BaseComponents.View,System.Single)">
            <summary>
            Scrolls View to position specified (contents will scroll to this position).
            </summary>
            <param name="view">The view to center in on (via Scrolling).</param>
            <param name="duration">The duration of the animation in seconds.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ScrollView.ScrollToSnapPoint">
            <summary>
            Scrolls View to the nearest snap points as specified by the Rulers.<br />
            If already at snap points, then will return false, and not scroll.<br />
            </summary>
            <returns>True if Snapping necessary.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ScrollView.ApplyEffect(Tizen.NUI.ScrollViewEffect)">
            <summary>
            Applies Effect to ScrollView.
            </summary>
            <param name="effect">The effect to apply to scroll view.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ScrollView.RemoveEffect(Tizen.NUI.ScrollViewEffect)">
            <summary>
            Removes Effect from ScrollView.
            </summary>
            <param name="effect">The effect to remove.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ScrollView.RemoveAllEffects">
            <summary>
            Remove All Effects from ScrollView.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ScrollView.BindView(Tizen.NUI.BaseComponents.View)">
            <summary>
            Binds view to this ScrollView.
            Once an actor is bound to a ScrollView, it will be subject to that ScrollView's properties.
            </summary>
            <param name="child">The view to add to this ScrollView.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ScrollView.UnbindView(Tizen.NUI.BaseComponents.View)">
            <summary>
            Unbinds view to this ScrollView.
            Once an actor is bound to a ScrollView, it will be subject to that ScrollView's properties.
            </summary>
            <param name="child">The view to remove to this ScrollView.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ScrollView.SetScrollingDirection(Tizen.NUI.Radian,Tizen.NUI.Radian)">
            <summary>
            Allows the user to constrain the scroll view in a particular direction.
            </summary>
            <param name="direction">The axis to constrain the scroll-view to.</param>
            <param name="threshold">The threshold to apply around the axis.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ScrollView.SetScrollingDirection(Tizen.NUI.Radian)">
            <summary>
            Allows the user to constrain the scroll view in a particular direction.
            </summary>
            <param name="direction">The axis to constrain the scroll-view to.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ScrollView.RemoveScrollingDirection(Tizen.NUI.Radian)">
            <summary>
            Removes a direction constraint from the scroll view.
            </summary>
            <param name="direction">The axis to constrain the scroll-view to.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.ScrollView.WrapEnabled">
            <summary>
            Sets and Gets WrapEnabled property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.ScrollView.PanningEnabled">
            <summary>
            Sets and Gets PanningEnabled property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.ScrollView.AxisAutoLockEnabled">
            <summary>
            Sets and Gets AxisAutoLockEnabled property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.ScrollView.WheelScrollDistanceStep">
            <summary>
            Sets and Gets WheelScrollDistanceStep property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.ScrollView.ScrollPosition">
            <summary>
            Sets and Gets ScrollPosition property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.ScrollView.ScrollPrePosition">
            <summary>
            Sets and Gets ScrollPrePosition property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.ScrollView.ScrollPrePositionMax">
            <summary>
            Sets and Gets ScrollPrePositionMax property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.ScrollView.OvershootX">
            <summary>
            Sets and Gets OvershootX property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.ScrollView.OvershootY">
            <summary>
            Sets and Gets OvershootY property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.ScrollView.ScrollFinal">
            <summary>
            Sets and Gets ScrollFinal property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.ScrollView.Wrap">
            <summary>
            Sets and Gets Wrap property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.ScrollView.Panning">
            <summary>
            Sets and Gets Panning property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.ScrollView.Scrolling">
            <summary>
            Sets and Gets Scrolling property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.ScrollView.ScrollDomainSize">
            <summary>
            Sets and Gets ScrollDomainSize property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.ScrollView.ScrollDomainOffset">
            <summary>
            Sets and Gets ScrollDomainOffset property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.ScrollView.ScrollPositionDelta">
            <summary>
            Sets and Gets ScrollPositionDelta property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.ScrollView.StartPagePosition">
            <summary>
            Sets and Gets StartPagePosition property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.ScrollView.ScrollMode">
            <summary>
            Sets and Gets ScrollMode property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ToggleButton">
            <summary>
            A ToggleButton allows the user to change a setting between two or more states.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ToggleButton.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            Dispose
            </summary>
            <param name="type">The dispose type</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ToggleButton.Property">
            <summary>
            This should be internal, please do not use.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.ToggleButton.Property.STATE_VISUALS">
            <summary>
            This should be internal, please do not use.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.ToggleButton.Property.TOOLTIPS">
            <summary>
            This should be internal, please do not use.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.ToggleButton.Property.CURRENT_STATE_INDEX">
            <summary>
            This should be internal, please do not use.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ToggleButton.#ctor">
            <summary>
            Create an instance for toggleButton.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.ToggleButton.StateVisuals">
            <summary>
            Gets and Sets the state visual array of toggle button.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.ToggleButton.Tooltips">
            <summary>
            Gets and Sets the tooltips of toggle button.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.ToggleButton.CurrentStateIndex">
            <summary>
            Gets and Sets the current state index of toggle button.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.Vector2">
            <summary>
            A two-dimensional vector.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Vector2.swigCMemOwn">
            <summary>
            swigCMemOwn.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Vector2.disposed">
            <summary>
            A Flat to check if it is already disposed.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Vector2.Finalize">
            <summary>
            Destructor.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Vector2.Dispose">
            <summary>
            Dispose.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Vector2.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            Dispose.
            </summary>
            <param name="type">The dispose type</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Vector2.op_Addition(Tizen.NUI.Vector2,Tizen.NUI.Vector2)">
            <summary>
            The addition operator.
            </summary>
            <param name="arg1">The first value.</param>
            <param name="arg2">The second value.</param>
            <returns>The vector containing the result of the addition.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Vector2.op_Subtraction(Tizen.NUI.Vector2,Tizen.NUI.Vector2)">
            <summary>
            The subtraction operator.
            </summary>
            <param name="arg1">The first value.</param>
            <param name="arg2">The second value.</param>
            <returns>The vector containing the result of the subtraction.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Vector2.op_UnaryNegation(Tizen.NUI.Vector2)">
            <summary>
            The unary negation operator.
            </summary>
            <param name="arg1">The target value.</param>
            <returns>The vector containing the negation.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Vector2.op_Multiply(Tizen.NUI.Vector2,Tizen.NUI.Vector2)">
            <summary>
            The multiplication operator.
            </summary>
            <param name="arg1">The first value.</param>
            <param name="arg2">The second value.</param>
            <returns>The vector containing the result of the multiplication.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Vector2.op_Multiply(Tizen.NUI.Vector2,System.Single)">
            <summary>
            Th multiplication operator.
            </summary>
            <param name="arg1">The first value.</param>
            <param name="arg2">The float value to scale the vector.</param>
            <returns>The vector containing the result of the scaling.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Vector2.op_Division(Tizen.NUI.Vector2,Tizen.NUI.Vector2)">
            <summary>
            The division operator.
            </summary>
            <param name="arg1">The first value.</param>
            <param name="arg2">The second value.</param>
            <returns>The vector containing the result of the division.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Vector2.op_Division(Tizen.NUI.Vector2,System.Single)">
            <summary>
            Th division operator.
            </summary>
            <param name="arg1">The first value.</param>
            <param name="arg2">The float value to scale the vector by.</param>
            <returns>The vector containing the result of the scaling.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Vector2.Item(System.UInt32)">
            <summary>
            The array subscript operator overload.
            </summary>
            <param name="index">The subscript index.</param>
            <returns>The float at the given index.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Vector2.#ctor">
            <summary>
            The default constructor initializes the vector to 0.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Vector2.#ctor(System.Single,System.Single)">
            <summary>
            The constructor.
            </summary>
            <param name="x">The x or width component.</param>
            <param name="y">The y or height component.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Vector2.#ctor(System.Single[])">
            <summary>
            The conversion constructor from an array of two floats.
            </summary>
            <param name="array">The array of xy.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Vector2.#ctor(Tizen.NUI.Vector3)">
            <summary>
            The constructor.
            </summary>
            <param name="vec3">Vector3 to create this vector from.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Vector2.#ctor(Tizen.NUI.Vector4)">
            <summary>
            The constructor.
            </summary>
            <param name="vec4">Vector4 to create this vector from.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Vector2.One">
            <summary>
            (1.0f,1.0f).
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Vector2.XAxis">
            <summary>
            The vector representing the x-axis.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Vector2.YAxis">
            <summary>
            The vector representing the y-axis.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Vector2.NegativeXAxis">
            <summary>
            The vector representing the negative x-axis.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Vector2.NegativeYAxis">
            <summary>
            The vector representing the negative y-axis.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Vector2.Zero">
            <summary>
            (0.0f, 0.0f).
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Vector2.Length">
            <summary>
            Returns the length of the vector.
            </summary>
            <returns>The length of the vector.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Vector2.LengthSquared">
            <summary>
            Returns the length of the vector squared.<br />
            This is more efficient than Length() for threshold
            testing as it avoids the use of a square root.<br />
            </summary>
            <returns>The length of the vector squared</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Vector2.Normalize">
            <summary>
            Sets the vector to be the unit length, whilst maintaining its direction.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Vector2.Clamp(Tizen.NUI.Vector2,Tizen.NUI.Vector2)">
            <summary>
            Clamps the vector between minimum and maximum vectors.
            </summary>
            <param name="min">The minimum vector.</param>
            <param name="max">The maximum vector.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Vector2.X">
            <summary>
            The x component.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Vector2.Width">
            <summary>
            The width.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Vector2.Y">
            <summary>
            The y component.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Vector2.Height">
            <summary>
            The height.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.Vector3">
            <summary>
            A three-dimensional vector.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Vector3.swigCMemOwn">
            <summary>
            swigCMemOwn.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Vector3.disposed">
            <summary>
            A Flat to check if it is already disposed.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Vector3.Finalize">
            <summary>
            Destructor.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Vector3.Dispose">
            <summary>
            Dispose.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Vector3.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            Dispose.
            </summary>
            <param name="type">The dispose type</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Vector3.op_Addition(Tizen.NUI.Vector3,Tizen.NUI.Vector3)">
            <summary>
            The addition operator.
            </summary>
            <param name="arg1">The first value.</param>
            <param name="arg2">The second value.</param>
            <returns>The vector containing the result of the addition.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Vector3.op_Subtraction(Tizen.NUI.Vector3,Tizen.NUI.Vector3)">
            <summary>
            The subtraction operator.
            </summary>
            <param name="arg1">The first value.</param>
            <param name="arg2">The second value.</param>
            <returns>The vector containing the result of the subtraction.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Vector3.op_UnaryNegation(Tizen.NUI.Vector3)">
            <summary>
            The unary negation operator.
            </summary>
            <param name="arg1">The target value.</param>
            <returns>The vector containg the negation.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Vector3.op_Multiply(Tizen.NUI.Vector3,Tizen.NUI.Vector3)">
            <summary>
            The multiplication operator.
            </summary>
            <param name="arg1">The first value.</param>
            <param name="arg2">The second value.</param>
            <returns>The vector containing the result of the multiplication.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Vector3.op_Multiply(Tizen.NUI.Vector3,System.Single)">
            <summary>
            The multiplication operator.
            </summary>
            <param name="arg1">The first value.</param>
            <param name="arg2">The float value to scale the vector.</param>
            <returns>The vector containing the result of the scaling.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Vector3.op_Division(Tizen.NUI.Vector3,Tizen.NUI.Vector3)">
            <summary>
            The division operator.
            </summary>
            <param name="arg1">The first value.</param>
            <param name="arg2">The second value.</param>
            <returns>The vector containing the result of the division.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Vector3.op_Division(Tizen.NUI.Vector3,System.Single)">
            <summary>
            The division operator.
            </summary>
            <param name="arg1">The first value.</param>
            <param name="arg2">The float value to scale the vector by.</param>
            <returns>The vector containing the result of the scaling.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Vector3.Item(System.UInt32)">
            <summary>
            An array subscript operator overload.
            </summary>
            <param name="index">The subscript index.</param>
            <returns>The float at the given index.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Vector3.#ctor">
            <summary>
            The constructor.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Vector3.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            The default constructor initializes the vector to 0.
            </summary>
            <param name="x">The x (or width) component.</param>
            <param name="y">The y (or height) component.</param>
            <param name="z">The z (or depth) component.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Vector3.#ctor(System.Single[])">
            <summary>
            Conversion constructor from an array of three floats.
            </summary>
            <param name="array">An array of xyz.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Vector3.#ctor(Tizen.NUI.Vector2)">
            <summary>
            The constructor.
            </summary>
            <param name="vec2">Vector2 to create this vector from.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Vector3.#ctor(Tizen.NUI.Vector4)">
            <summary>
            The constructor.
            </summary>
            <param name="vec4">Vector4 to create this vector from.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Vector3.One">
            <summary>
            (1.0f,1.0f,1.0f).
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Vector3.XAxis">
            <summary>
            The vector representing the x-axis.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Vector3.YAxis">
            <summary>
            The vector representing the y-axis.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Vector3.ZAxis">
            <summary>
            The vector representing the z-axis.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Vector3.NegativeXAxis">
            <summary>
            The vector representing the negative x-axis.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Vector3.NegativeYAxis">
            <summary>
            Th vector representing the negative y-axis.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Vector3.NegativeZAxis">
            <summary>
            The vector representing the negative z-axis.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Vector3.Zero">
            <summary>
            (0.0f, 0.0f, 0.0f).
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Vector3.Length">
            <summary>
            Returns the length of the vector.
            </summary>
            <returns>The length of the vector.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Vector3.LengthSquared">
            <summary>
            Returns the length of the vector squared.<br />
            This is more efficient than Length() for threshold
            testing as it avoids the use of a square root.<br />
            </summary>
            <returns>The length of the vector squared.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Vector3.Normalize">
            <summary>
            Sets the vector to be unit length, whilst maintaining its direction.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Vector3.Clamp(Tizen.NUI.Vector3,Tizen.NUI.Vector3)">
            <summary>
            Clamps the vector between minimum and maximum vectors.
            </summary>
            <param name="min">The minimum vector.</param>
            <param name="max">The maximum vector.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Vector3.GetVectorXY">
            <summary>
            Returns the x and y components (or width and height, or r and g) as a Vector2.
            </summary>
            <returns>The partial vector contents as Vector2 (x,y).</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Vector3.GetVectorYZ">
            <summary>
            Returns the y and z components (or height and depth, or g and b) as a Vector2.
            </summary>
            <returns>The partial vector contents as Vector2 (y,z).</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Vector3.X">
            <summary>
            The x component.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Vector3.Width">
            <summary>
            The width component.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Vector3.R">
            <summary>
            The red component.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Vector3.Y">
            <summary>
            The y component.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Vector3.Height">
            <summary>
            The height component.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Vector3.G">
            <summary>
            The green component.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Vector3.Z">
            <summary>
            The z component.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Vector3.Depth">
            <summary>
            The depth component.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Vector3.B">
            <summary>
            The blue component.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.Vector4">
            <summary>
            A four-dimensional vector.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Vector4.swigCMemOwn">
            <summary>
            swigCMemOwn.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Vector4.disposed">
            <summary>
            A Flat to check if it is already disposed.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Vector4.Finalize">
            <summary>
            Destructor.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Vector4.Dispose">
            <summary>
            Dispose.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Vector4.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            Dispose.
            </summary>
            <param name="type">The dispose type</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Vector4.op_Addition(Tizen.NUI.Vector4,Tizen.NUI.Vector4)">
            <summary>
            The addition operator.
            </summary>
            <param name="arg1">The first value.</param>
            <param name="arg2">The second value.</param>
            <returns>The vector containing the result of the addition.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Vector4.op_Subtraction(Tizen.NUI.Vector4,Tizen.NUI.Vector4)">
            <summary>
            The subtraction operator.
            </summary>
            <param name="arg1">The first value.</param>
            <param name="arg2">The second value.</param>
            <returns>The vector containing the result of the subtraction.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Vector4.op_UnaryNegation(Tizen.NUI.Vector4)">
            <summary>
            The unary negation operator.
            </summary>
            <param name="arg1">The target value.</param>
            <returns>The vector containing the negation.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Vector4.op_Multiply(Tizen.NUI.Vector4,Tizen.NUI.Vector4)">
            <summary>
            The multiplication operator.
            </summary>
            <param name="arg1">The first value.</param>
            <param name="arg2">The second value.</param>
            <returns>The vector containing the result of the multiplication.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Vector4.op_Multiply(Tizen.NUI.Vector4,System.Single)">
            <summary>
            The multiplication operator.
            </summary>
            <param name="arg1">The first value.</param>
            <param name="arg2">The float value to scale the vector.</param>
            <returns>The vector containing the result of scaling.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Vector4.op_Division(Tizen.NUI.Vector4,Tizen.NUI.Vector4)">
            <summary>
            The division operator.
            </summary>
            <param name="arg1">The first value.</param>
            <param name="arg2">The second value.</param>
            <returns>The vector containing the result of the division.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Vector4.op_Division(Tizen.NUI.Vector4,System.Single)">
            <summary>
            The division operator.
            </summary>
            <param name="arg1">The first value.</param>
            <param name="arg2">The float value to scale the vector by.</param>
            <returns>The vector containing the result of scaling.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Vector4.Item(System.UInt32)">
            <summary>
            The array subscript operator overload.
            </summary>
            <param name="index">The subscript index.</param>
            <returns>The float at the given index.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Vector4.#ctor">
            <summary>
            The default constructor initializes the vector to 0.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Vector4.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            The conversion constructor from four floats.
            </summary>
            <param name="x">The x (or r/s) component.</param>
            <param name="y">The y (or g/t) component.</param>
            <param name="z">The z (or b/p) component.</param>
            <param name="w">The w (or a/q) component.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Vector4.#ctor(System.Single[])">
            <summary>
            The conversion constructor from an array of four floats.
            </summary>
            <param name="array">The array of either xyzw/rgba/stpq.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Vector4.#ctor(Tizen.NUI.Vector2)">
            <summary>
            The conversion constructor from Vector2.
            </summary>
            <param name="vec2">Vector2 to copy from, z and w are initialized to 0.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Vector4.#ctor(Tizen.NUI.Vector3)">
            <summary>
            The conversion constructor from Vector3.
            </summary>
            <param name="vec3">Vector3 to copy from, w is initialized to 0.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Vector4.One">
            <summary>
            (1.0f,1.0f,1.0f,1.0f).
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Vector4.XAxis">
            <summary>
            (1.0f,0.0f,0.0f,0.0f).
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Vector4.YAxis">
            <summary>
            (0.0f,1.0f,0.0f,0.0f).
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Vector4.ZAxis">
            <summary>
            (0.0f,0.0f,1.0f,0.0f).
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Vector4.Zero">
            <summary>
            (0.0f, 0.0f, 0.0f, 0.0f).
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Vector4.Length">
            <summary>
            Returns the length of the vector.
            </summary>
            <returns>The length.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Vector4.LengthSquared">
            <summary>
            Returns the length of the vector squared.<br />
            This is faster than using Length() when performing
            threshold checks as it avoids use of the square root.<br />
            </summary>
            <returns>The length of the vector squared.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Vector4.Normalize">
            <summary>
            Normalizes the vector.<br />
            Sets the vector to unit length whilst maintaining its direction.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Vector4.Clamp(Tizen.NUI.Vector4,Tizen.NUI.Vector4)">
            <summary>
            Clamps the vector between minimum and maximum vectors.
            </summary>
            <param name="min">The minimum vector.</param>
            <param name="max">The maximum vector.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Vector4.X">
            <summary>
            The x component.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Vector4.R">
            <summary>
            The red component.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Vector4.S">
            <summary>
            The s component.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Vector4.Y">
            <summary>
            The y component.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Vector4.G">
            <summary>
            The green component.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Vector4.T">
            <summary>
            The t component.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Vector4.Z">
            <summary>
            The z component.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Vector4.B">
            <summary>
            The blue component.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Vector4.P">
            <summary>
            The p component.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Vector4.W">
            <summary>
            The w component.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Vector4.A">
            <summary>
            The alpha component.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Vector4.Q">
            <summary>
            The q component.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ViewWrapper">
            <summary>
            ViewWrapper.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ViewWrapper.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            Dispose.
            </summary>
            <param name="type">The dispose type</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.VisualBase">
            <summary>
            Sets whether the actor should be focusable by keyboard navigation.<br />
            Visuals reuse geometry, shader etc. across controls. They ensure that the renderer and texture sets exist only when control is on window.<br />
            Each visual also responds to actor size and color change, and provides clipping at the renderer level.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.VisualBase.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            Dispose.
            </summary>
            <param name="type">The dispose type</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.VisualBase.#ctor">
            <summary>
            Creates an empty visual handle.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.VisualBase.Name">
            <summary>
            The name of the visual.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.VisualBase.SetTransformAndSize(Tizen.NUI.PropertyMap,Tizen.NUI.Vector2)">
            <summary>
            Sets the transform and the control size.
            </summary>
            <param name="transform">A property map describing the transform.</param>
            <param name="controlSize">The size of the parent control for visuals that need to scale internally.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.VisualBase.GetHeightForWidth(System.Single)">
            <summary>
            Returns the height for a given width.
            </summary>
            <param name="width">The width to use.</param>
            <returns>The height based on the width.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.VisualBase.GetWidthForHeight(System.Single)">
            <summary>
            Returns the width for a given height.
            </summary>
            <param name="height">The height to use.</param>
            <returns>The width based on the height.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.VisualBase.GetNaturalSize(Tizen.NUI.Size2D)">
            <summary>
            Returns the natural size of the visual.<br />
            Deriving classes stipulate the natural size and by default a visual has a zero natural size.<br />
            A visual may not actually have a natural size until it has been placed on window and acquired all it's resources.<br />
            </summary>
            <param name="naturalSize">The visual's natural size.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.VisualBase.DepthIndex">
            <summary>
            The depth index of this visual.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.VisualBase.Creation">
            <summary>
            Creates the property map representing this visual.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.VisualFactory">
            <summary>
            The VisualFactory is a singleton object that provides and shares visuals between views.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.VisualFactory.Get">
            <summary>
            Please do not use! this will be deprecated, please use VisualFactory.Instance instead.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.VisualFactory.CreateVisual(Tizen.NUI.PropertyMap)">
            <summary>
            Request the visual.
            </summary>
            <param name="propertyMap">The map contains the properties required by the visual. The content of the map determines the type of visual that will be returned.</param>
            <returns>The handle to the created visual.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.VisualFactory.Instance">
            <summary>
            Retrieves the VisualFactory singleton.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.VisualMap">
            <summary>
            A class encapsulating the transform map of the visual.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.VisualMap._outputVisualMap">
            <summary>
            outputVisualMap.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.VisualMap.#ctor">
            <summary>
            Constructor.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.VisualMap.Size">
            <summary>
            Gets or sets the size of the visual.<br />
            It can be either relative (percentage of the parent)
            or absolute (in world units).<br />
            Optional.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.VisualMap.Position">
            <summary>
            Gets or sets the offset of the visual.<br />
            It can be either relative (percentage of the parent)
            or absolute (in world units).<br />
            Optional.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.VisualMap.RelativeSize">
            <summary>
            Gets or sets the relative size of the visual<br />
            (percentage [0.0f to 1.0f] of the control).<br />
            Optional.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.VisualMap.RelativePosition">
            <summary>
            Gets or sets the relative offset of the visual<br />
            (percentage [0.0f to 1.0f] of the control).<br />
            Optional.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.VisualMap.PositionPolicy">
            <summary>
            Gets or sets whether the x and y offset values are relative<br />
            (percentage [0.0f to 1.0f] of the control) or absolute (in world units).<br />
            By default, both the x and the y offset are relative.<br />
            Optional.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.VisualMap.PositionPolicyX">
            <summary>
            Gets or sets whether the x offset values are relative<br />
            (percentage [0.0f to 1.0f] of the control) or absolute (in world units).<br />
            By default, the x offset is relative.<br />
            Optional.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.VisualMap.PositionPolicyY">
            <summary>
            Gets or sets whether the y offset values are relative<br />
            (percentage [0.0f to 1.0f] of the control) or absolute (in world units).<br />
            By default, the y offset is relative.<br />
            Optional.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.VisualMap.SizePolicy">
            <summary>
            Gets or sets whether the size values of the width or the height are relative<br />
            (percentage [0.0f to 1.0f] of the control) or absolute (in world units).<br />
            By default, offsets of both the width and the height are relative to the control's size.<br />
            Optional.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.VisualMap.SizePolicyWidth">
            <summary>
            Gets or sets whether size values of the width are relative.<br />
            (percentage [0.0f to 1.0f] of the control) or absolute (in world units).<br />
            By default, the value of the width is relative to the control's width.<br />
            Optional.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.VisualMap.SizePolicyHeight">
            <summary>
            Gets or sets whether size values of the height are relative<br />
            (percentage [0.0f to 1.0f] of the control) or absolute (in world units).<br />
            By default, the height value is relative to the control's height.<br />
            Optional.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.VisualMap.Origin">
            <summary>
            Gets or sets the origin of the visual within its control area.<br />
            By default, the origin is center.<br />
            Optional.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.VisualMap.AnchorPoint">
            <summary>
            Gets or sets the anchor point of the visual.<br />
            By default, the anchor point is center.<br />
            Optional.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.VisualMap.DepthIndex">
            <summary>
            Gets or sets the depth index of the visual.<br />
            By default, the depth index is 0.<br />
            Optional.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.VisualMap.OutputTransformMap">
            <summary>
            Gets the transform map used by the visual.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.VisualMap.ComposingPropertyMap">
            <summary>
            Compose the out visual map.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.VisualMap.OutputVisualMap">
            <summary>
            Gets the property map to create the visual.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.VisualMap._shader">
            <summary>
            The shader of the visual.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.VisualMap._premultipliedAlpha">
            <summary>
            The premultipliedAlpha of the visual.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.VisualMap._mixColor">
            <summary>
            The mixColor of the Visual.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.VisualMap._opacity">
            <summary>
            The opacity of the visual.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.VisualMap._commonlyUsedMap">
            <summary>
            The map for visual.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.VisualMap.Shader">
            <summary>
            The shader to use in the visual.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.VisualMap.PremultipliedAlpha">
            <summary>
            Enables or disables the premultiplied alpha. <br />
            The premultiplied alpha is false by default unless this behavior is modified by the derived visual type.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.VisualMap.MixColor">
            <summary>
            Mix color is a blend color for any visual.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.VisualMap.Opacity">
            <summary>
            Opacity is the alpha component of the mix color discussed above.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ImageVisual">
            <summary>
            A class encapsulating the property map of the image visual.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ImageVisual.#ctor">
            <summary>
            Constructor.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.ImageVisual.URL">
            <summary>
            Gets or sets the URL of the image.<br />
            Mandatory.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.ImageVisual.AlphaMaskURL">
            <summary>
            Gets or sets the URL of the alpha mask.<br />
            Optional.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.ImageVisual.AuxiliaryImageURL">
            <summary>
            Overlays the auxiliary iamge on top of an NPatch image.
            The resulting visual image will be at least as large as the smallest possible n-patch or the auxiliary image, whichever is larger.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.ImageVisual.FittingMode">
            <summary>
            Gets or sets fitting options used when resizing images to fit the desired dimensions.<br />
            If not supplied, the default is FittingModeType.ShrinkToFit.<br />
            For normal quad images only.<br />
            Optional.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.ImageVisual.SamplingMode">
            <summary>
            Gets or sets filtering options used when resizing images to the sample original pixels.<br />
            If not supplied, the default is SamplingModeType.Box.<br />
            For normal quad images only.<br />
            Optional.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.ImageVisual.DesiredWidth">
            <summary>
            Gets or sets the desired image width.<br />
            If not specified, the actual image width is used.<br />
            For normal quad images only.<br />
            Optional.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.ImageVisual.DesiredHeight">
            <summary>
            Gets or sets the desired image height.<br />
            If not specified, the actual image height is used.<br />
            For normal quad images only.<br />
            Optional.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.ImageVisual.SynchronousLoading">
            <summary>
            Gets or sets whether to load the image synchronously.<br />
            If not specified, the default is false, i.e., the image is loaded asynchronously.<br />
            For normal quad images only.<br />
            Optional.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.ImageVisual.BorderOnly">
            <summary>
            Gets or sets whether to draw the borders only (If true).<br />
            If not specified, the default is false.<br />
            For n-patch images only.<br />
            Optional.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.ImageVisual.PixelArea">
            <summary>
            Gets or sets the image area to be displayed.<br />
            It is a rectangular area.<br />
            The first two elements indicate the top-left position of the area, and the last two elements are the areas of the width and the height respectively.<br />
            If not specified, the default value is Vector4 (0.0, 0.0, 1.0, 1.0), i.e., the entire area of the image.<br />
            For normal quad images only.<br />
            Optional.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.ImageVisual.WrapModeU">
            <summary>
            Gets or sets the wrap mode for the u coordinate.<br />
            It decides how the texture should be sampled when the u coordinate exceeds the range of 0.0 to 1.0.<br />
            If not specified, the default is WrapModeType.Default(CLAMP).<br />
            For normal quad images only.<br />
            Optional.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.ImageVisual.WrapModeV">
            <summary>
            Gets or sets the wrap mode for the v coordinate.<br />
            It decides how the texture should be sampled when the v coordinate exceeds the range of 0.0 to 1.0.<br />
            The first two elements indicate the top-left position of the area, and the last two elements are the areas of the width and the height respectively.<br />
            If not specified, the default is WrapModeType.Default(CLAMP).<br />
            For normal quad images only.
            Optional.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.ImageVisual.MaskContentScale">
            <summary>
            Gets or sets scale factor to apply to the content image before masking.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.ImageVisual.CropToMask">
            <summary>
             Whether to crop image to mask or scale mask to fit image.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.ImageVisual.AuxiliaryImageAlpha">
            <summary>
             An alpha value for mixing between the masked main NPatch image and the auxiliary image.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.ImageVisual.ReleasePolicy">
            <summary>
            Get or set the Image Visual release policy<br />
            It decides if a texture should be released from the cache or kept to reduce loading time <br />
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.ImageVisual.LoadPolicy">
            <summary>
            Get or set the Image Visual image loading policy<br />
            It decides if a texture should be loaded immediately after source set or only after visual is added to window <br />
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.ImageVisual.OrientationCorrection">
            <summary>
            Get or set whether to automatically correct the orientation based on exif data.<br />
            If not specified, the default is true.<br />
            For JPEG images only.<br />
            Optional.
            </summary>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ImageVisual.ComposingPropertyMap">
            <summary>
            Compose the out visual map.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.TextVisual">
            <summary>
            A class encapsulating the property map of the text visual.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.TextVisual.#ctor">
            <summary>
            Constructor.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.TextVisual.Text">
            <summary>
            Gets or sets the text to display in the UTF-8 format.<br />
            Mandatory.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.TextVisual.FontFamily">
            <summary>
            Gets or sets the requested font family to use.<br />
            Optional.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.TextVisual.FontStyle">
            <summary>
            Gets or sets the requested font style to use.<br />
            Optional.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.TextVisual.PointSize">
            <summary>
            Gets or sets the size of font in points.<br />
            Mandatory.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.TextVisual.MultiLine">
            <summary>
            Gets or sets the single-line or multi-line layout option.<br />
            If not specified, the default is false.<br />
            Optional.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.TextVisual.HorizontalAlignment">
            <summary>
            Gets or sets the line horizontal alignment.<br />
            If not specified, the default is begin.<br />
            Optional.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.TextVisual.VerticalAlignment">
            <summary>
            Gets or sets the line vertical alignment.<br />
            If not specified, the default is top.<br />
            Optional.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.TextVisual.TextColor">
            <summary>
            Gets or sets the color of the text.<br />
            Optional.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.TextVisual.EnableMarkup">
            <summary>
            Gets or sets whether the mark-up processing is enabled.<br />
            Optional.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.TextVisual.ComposingPropertyMap">
            <summary>
            Compose the out visual map.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.BorderVisual">
            <summary>
            A class encapsulating the property map of the border visual.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BorderVisual.#ctor">
            <summary>
            Constructor.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BorderVisual.Color">
            <summary>
            Gets or sets the color of the border.<br />
            Mandatory.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BorderVisual.BorderSize">
            <summary>
            Gets or sets the width of the border (in pixels).<br />
            Mandatory.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.BorderVisual.AntiAliasing">
            <summary>
            Gets or sets whether the anti-aliasing of the border is required.<br />
            If not supplied, the default is false.<br />
            Optional.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.BorderVisual.ComposingPropertyMap">
            <summary>
            Compose the out visual map.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.ColorVisual">
            <summary>
            A class encapsulating the property map of the color visual.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ColorVisual.#ctor">
            <summary>
            Constructor.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.ColorVisual.Color">
            <summary>
            Gets or sets the solid color required.<br />
            Mandatory.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.ColorVisual.ComposingPropertyMap">
            <summary>
            Compose the out visual map.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.GradientVisual">
            <summary>
            A class encapsulating the property map of the gradient visual.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.GradientVisual.#ctor">
            <summary>
            Constructor.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.GradientVisual.StartPosition">
            <summary>
            Gets or sets the start position of a linear gradient.<br />
            Mandatory for linear.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.GradientVisual.EndPosition">
            <summary>
            Gets or sets the end position of a linear gradient.<br />
            Mandatory for linear.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.GradientVisual.Center">
            <summary>
            Gets or sets the center point of a radial gradient.<br />
            Mandatory for radial.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.GradientVisual.Radius">
            <summary>
            Gets or sets the size of the radius of a radial gradient.<br />
            Mandatory for radial.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.GradientVisual.StopOffset">
            <summary>
            Gets or sets all the stop offsets.<br />
            A PropertyArray of float.<br />
            If not supplied, the default is 0.0f and 1.0f.<br />
            Optional.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.GradientVisual.StopColor">
            <summary>
            Gets or sets the color at the stop offsets.<br />
            A PropertyArray of color.<br />
            At least 2 values are required to show a gradient.<br />
            Mandatory.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.GradientVisual.Units">
            <summary>
            Gets or sets descriptions of the coordinate system for certain attributes of the points in a gradient.<br />
            If not supplied, the default is GradientVisualUnitsType.ObjectBoundingBox.<br />
            Optional.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.GradientVisual.SpreadMethod">
            <summary>
            Gets or sets indications of what happens if the gradient starts or ends inside the bounds of the target rectangle.<br />
            If not supplied, the default is GradientVisualSpreadMethodType.Pad.<br />
            Optional.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.GradientVisual.ComposingPropertyMap">
            <summary>
            Compose the out visual map.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.MeshVisual">
            <summary>
            A class encapsulating the property map of the mesh visual.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.MeshVisual.#ctor">
            <summary>
            Constructor.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.MeshVisual.ObjectURL">
            <summary>
            Gets or sets the location of the ".obj" file.<br />
            Mandatory.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.MeshVisual.MaterialtURL">
            <summary>
            Gets or sets the location of the ".mtl" file.<br />
            If not specified, then a textureless object is assumed.<br />
            Optional.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.MeshVisual.TexturesPath">
            <summary>
            Gets or sets the path to the directory the textures (including gloss and normal) are stored in.<br />
            Mandatory if using material.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.MeshVisual.ShadingMode">
            <summary>
            Gets or sets the type of shading mode that the mesh will use.<br />
            If anything the specified shading mode requires is missing, a simpler mode that can be handled with what has been supplied will be used instead.<br />
            If not specified, it will use the best it can support (will try MeshVisualShadingModeValue.TexturedWithDetailedSpecularLighting first).<br />
            Optional.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.MeshVisual.UseMipmapping">
            <summary>
            Gets or sets whether to use mipmaps for textures or not.<br />
            If not specified, the default is true.<br />
            Optional.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.MeshVisual.UseSoftNormals">
            <summary>
            Gets or sets whether to average normals at each point to smooth textures or not.<br />
            If not specified, the default is true.<br />
            Optional.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.MeshVisual.LightPosition">
            <summary>
            Gets or sets the position, in the stage space, of the point light that applies lighting to the model.<br />
            This is based off the stage's dimensions, so using the width and the height of the stage halved will correspond to the center,
            and using all zeroes will place the light at the top-left corner.<br />
            If not specified, the default is an offset outwards from the center of the screen.<br />
            Optional.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.MeshVisual.ComposingPropertyMap">
            <summary>
            Compose the out visual map.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.PrimitiveVisual">
            <summary>
            A class encapsulating the property map of the primetive visual.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PrimitiveVisual.#ctor">
            <summary>
            Constructor.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.PrimitiveVisual.Shape">
            <summary>
            Gets or sets the specific shape to render.<br />
            If not specified, the default is PrimitiveVisualShapeType.Sphere.<br />
            Optional.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.PrimitiveVisual.MixColor">
            <summary>
            Gets or sets the color of the shape.<br />
            If not specified, the default is Color (0.5, 0.5, 0.5, 1.0).<br />
            Applies to all shapes.<br />
            Optional.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.PrimitiveVisual.Slices">
            <summary>
            Gets or sets the number of slices as you go around the shape.<br />
            For spheres and conical frustrums, this determines how many divisions there are as you go around the object.<br />
            If not specified, the default is 128.<br />
            The range is from 1 to 255.<br />
            Optional.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.PrimitiveVisual.Stacks">
            <summary>
            Gets or sets the number of stacks as you go down the shape.<br />
            For spheres, 'stacks' determines how many layers there are as you go down the object.<br />
            If not specified, the default is 128.<br />
            The range is from 1 to 255.<br />
            Optional.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.PrimitiveVisual.ScaleTopRadius">
            <summary>
            Gets or sets the scale of the radius of the top circle of a conical frustrum.<br />
            If not specified, the default is 1.0f.<br />
            Applies to: - PrimitiveVisualShapeType.ConicalFrustrum<br />
            Only values greater than or equal to 0.0f are accepted.<br />
            Optional.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.PrimitiveVisual.ScaleBottomRadius">
            <summary>
            Gets or sets the scale of the radius of the bottom circle of a conical frustrum.<br />
            If not specified, the default is 1.5f.<br />
            Applies to:  - PrimitiveVisualShapeType.ConicalFrustrum<br />
                         - PrimitiveVisualShapeType.Cone<br />
            Only values greater than or equal to 0.0f are accepted.<br />
            Optional.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.PrimitiveVisual.ScaleHeight">
            <summary>
            Gets or sets the scale of the height of a conic.<br />
            If not specified, the default is 3.0f.<br />
            Applies to:<br />
                 - PrimitiveVisualShapeType.ConicalFrustrum<br />
                 - PrimitiveVisualShapeType.Cone<br />
                 - PrimitiveVisualShapeType.Cylinder<br />
            Only values greater than or equal to 0.0f are accepted.<br />
            Optional.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.PrimitiveVisual.ScaleRadius">
            <summary>
            Gets or sets the scale of the radius of a cylinder.<br />
            If not specified, the default is 1.0f.<br />
            Applies to:<br />
                 - PrimitiveVisualShapeType.Cylinder<br />
            Only values greater than or equal to 0.0f are accepted.<br />
            Optional.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.PrimitiveVisual.ScaleDimensions">
            <summary>
            Gets or sets the dimensions of a cuboid. Scales in the same fashion as a 9-patch image.<br />
            If not specified, the default is Vector3.One.<br />
            Applies to:<br />
                 - PrimitiveVisualShapeType.Cube<br />
                 - PrimitiveVisualShapeType.Octahedron<br />
                 - PrimitiveVisualShapeType.BevelledCube<br />
            Each Vector3 parameter should be greater than or equal to 0.0f.<br />
            Optional.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.PrimitiveVisual.BevelPercentage">
            <summary>
            Gets or sets determines how bevelled the cuboid should be, based off the smallest dimension.<br />
            Bevel percentage ranges from 0.0 to 1.0. It affects the ratio of the outer face widths to the width of the overall cube.<br />
            If not specified, the default is 0.0f (no bevel).<br />
            Applies to:<br />
                 - PrimitiveVisualShapeType.BevelledCube<br />
            The range is from 0.0f to 1.0f.<br />
            Optional.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.PrimitiveVisual.BevelSmoothness">
            <summary>
            Gets or sets descriptions of how smooth the bevelled edges should be.<br />
            If not specified, the default is 0.0f (sharp edges).<br />
            Applies to:<br />
                 - PrimitiveVisualShapeType.BevelledCube<br />
            The range is from 0.0f to 1.0f.<br />
            Optional.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.PrimitiveVisual.LightPosition">
            <summary>
            Gets or sets the position, in the stage space, of the point light that applies lighting to the model.<br />
            This is based off the stage's dimensions, so using the width and the height of the stage halved will correspond to the center,
            and using all zeroes will place the light at the top-left corner.<br />
            If not specified, the default is an offset outwards from the center of the screen.<br />
            Applies to all shapes.<br />
            Optional.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.PrimitiveVisual.ComposingPropertyMap">
            <summary>
            Compose the out visual map.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.NPatchVisual">
            <summary>
            A class encapsulating the property map of the n-patch image visual.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.NPatchVisual.#ctor">
            <summary>
            Constructor.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.NPatchVisual.URL">
            <summary>
            Gets or sets the URL of the image.<br />
            Mandatory.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.NPatchVisual.BorderOnly">
            <summary>
            Gets or sets whether to draw the borders only (If true).<br />
            If not specified, the default is false.<br />
            For n-patch images only.<br />
            Optional.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.NPatchVisual.Border">
            <summary>
            The border of the image is in the order: left, right, bottom, top.<br />
            For n-patch images only.<br />
            Optional.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.NPatchVisual.ComposingPropertyMap">
            <summary>
            Compose the out visual map.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.SVGVisual">
            <summary>
            A class encapsulating the property map of the SVG visual.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.SVGVisual.#ctor">
            <summary>
            Constructor.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.SVGVisual.URL">
            <summary>
            The url of the svg resource.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.SVGVisual.ComposingPropertyMap">
            <summary>
            Compose the out visual map.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.AnimatedImageVisual">
            <summary>
            A class encapsulating the property map of the animated image (AGIF) visual.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.AnimatedImageVisual.#ctor">
            <summary>
            Constructor.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.AnimatedImageVisual.URL">
            <summary>
            Gets and Sets the url in the AnimatedImageVisual.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.AnimatedImageVisual.URLS">
            <summary>
            Gets and Sets the url list in the AnimatedImageVisual.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.AnimatedImageVisual.BatchSize">
            <summary>
            Gets and Sets the batch size for pre-loading images in the AnimatedImageVisual.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.AnimatedImageVisual.CacheSize">
            <summary>
            Gets and Sets the cache size for loading images in the AnimatedImageVisual.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.AnimatedImageVisual.FrameDelay">
            <summary>
            Gets and Sets The number of milliseconds between each frame in the AnimatedImageVisual.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Tizen.NUI.AnimatedImageVisual.LoopCount" -->
        <member name="M:Tizen.NUI.AnimatedImageVisual.ComposingPropertyMap">
            <summary>
            Compose the out visual map.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.VisualAnimator">
            <summary>
            A class encapsulating the property map of the transition data.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.VisualAnimator.#ctor">
            <summary>
            Create VisualAnimator object.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.VisualAnimator.AlphaFunction">
            <summary>
            Sets and Gets the AlphaFunction of this transition.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.VisualAnimator.StartTime">
            <summary>
            Sets and Gets the StartTime of this transition.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.VisualAnimator.EndTime">
            <summary>
            Sets and Gets the EndTime of this transition.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.VisualAnimator.Target">
            <summary>
            Sets and Gets the Target of this transition.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.VisualAnimator.PropertyIndex">
            <summary>
            Sets and Gets the PropertyIndex of this transition.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.VisualAnimator.DestinationValue">
            <summary>
            Sets and Gets the DestinationValue of this transition.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.VisualAnimator.ComposingPropertyMap">
            <summary>
            Compose the out visual map.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.WatchTime">
            <summary>
            The WatchTime class is used to get time for the WatchApplication.<br/>
            A WatchTime has a time handle from watch application framework.<br/>
            You can get time(hour, minute, second, millisecond) and date(year, month, day)<br/>
            on receiving timeTick signal.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.WatchTime.swigCMemOwn">
            <summary>
            swigCMemOwn.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.WatchTime.disposed">
            <summary>
            A Flat to check if it is already disposed.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.WatchTime.Finalize">
            <summary>
            Distructor.
            </summary>
        </member>
        <member name="M:Tizen.NUI.WatchTime.Dispose">
            <summary>
            To make watch time instance be disposed.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.WatchTime.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            you can override it to clean-up your own resources.
            </summary>
            <param name="type">DisposeTypes</param>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.WatchTime.#ctor">
            <summary>
            Constructor.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.WatchTime.Hour">
            <summary>
            Get the current hour.
            </summary>
            <remarks>The return value is always positive.The WatchTime needs to be initialized.</remarks>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.WatchTime.Hour24">
            <summary>
            Get the current hour24.
            </summary>
            <remarks>The return value is always positive.The WatchTime needs to be initialized.</remarks>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.WatchTime.Minute">
            <summary>
            Get the current minute.
            </summary>
            <remarks>The return value is always positive.The WatchTime needs to be initialized.</remarks>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.WatchTime.Second">
            <summary>
            Get the current second.
            </summary>
            <remarks>The return value is always positive.The WatchTime needs to be initialized.</remarks>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.WatchTime.Millisecond">
            <summary>
            Get the current millisecond.
            </summary>
            <remarks>The return value is always positive.The WatchTime needs to be initialized.</remarks>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.WatchTime.Year">
            <summary>
            Get the current year.
            </summary>
            <remarks>The return value is always positive.The WatchTime needs to be initialized.</remarks>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.WatchTime.Month">
            <summary>
            Get the current month.
            </summary>
            <remarks>The return value is always positive.The WatchTime needs to be initialized.</remarks>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.WatchTime.Day">
            <summary>
            Get the current day.
            </summary>
            <remarks>The return value is always positive.The WatchTime needs to be initialized.</remarks>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.WatchTime.DayOfWeek">
            <summary>
            Get the current week.
            </summary>
            <remarks>The return value is always positive.The WatchTime needs to be initialized.</remarks>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.WatchTime.TimeZone">
            <summary>
            Get the ID of timezone.
            </summary>
            <remarks>
            The WatchTime needs to be initialized.<br/>
            The timezone ID, according to the IANA(Internet Assigned Numbers Authority)<br/>
            If you want to see more information, please refer to the site :<br/>
            https://en.wikipedia.org/wiki/List_of_tz_database_time_zones/
            </remarks>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.WatchTime.DaylightSavingTimeStatus">
            <summary>
            Get the daylight saving time status.
            </summary>
            <remarks>The WatchTime needs to be initialized.</remarks>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.Wheel">
            <summary>
            The wheel event structure is used to store a wheel rolling, it facilitates processing of the wheel rolling and passing to other libraries like Toolkit.<br />
            There is a key modifier which relates to keys like Alt, Shift, and Ctrl functions are supplied to check if they have been pressed when the wheel is being rolled.<br />
            We support a mouse device and there may be another custom device that support the wheel event. The device type is specified as \e type.<br />
            The mouse wheel event can be sent to the specific actor but the custom wheel event will be sent to the window.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Wheel.swigCMemOwn">
            <summary>
            swigCMemOwn.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Wheel.disposed">
            <summary>
            A Flat to check if it is already disposed.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Wheel.Finalize">
            <summary>
            Destructor.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Wheel.Dispose">
            <summary>
            Dispose.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Wheel.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            Dispose.
            </summary>
            <param name="type">The type dispose, it could be from user, or called by DisposeQueue.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Wheel.Type">
            <summary>
            The type of the wheel event.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Wheel.Direction">
            <summary>
            The direction of wheel rolling (0 = default vertical wheel, 1 = horizontal wheel).
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Wheel.Modifiers">
            <summary>
            Modifier keys pressed during the event (such as Shift, Alt, and Ctrl).
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Wheel.Point">
            <summary>
            The coordinates of the cursor relative to the top-left of the screen.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Wheel.Z">
            <summary>
            The offset of rolling (positive value means roll down or clockwise, and negative value means roll up or counter-clockwise).
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Wheel.TimeStamp">
            <summary>
            The time the wheel is being rolled.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Wheel.#ctor">
            <summary>
            The default constructor.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Wheel.#ctor(Tizen.NUI.Wheel.WheelType,System.Int32,System.UInt32,Tizen.NUI.Vector2,System.Int32,System.UInt32)">
            <summary>
            The constructor.
            </summary>
            <param name="type">The type of the wheel event.</param>
            <param name="direction">The direction of wheel rolling (0 = default vertical wheel, 1 = horizontal wheel).</param>
            <param name="modifiers">Modifier keys pressed during the event (such as Shift, Alt, and Ctrl).</param>
            <param name="point">The coordinates of the cursor relative to the top-left of the screen.</param>
            <param name="z">The offset of rolling (positive value means roll down or clockwise, and negative value means roll up or counter-clockwise).</param>
            <param name="timeStamp">The time the wheel is being rolled.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Wheel.IsShiftModifier">
            <summary>
            Checks to see if the Shift key modifier has been supplied.
            </summary>
            <returns>True if Shift modifier.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Wheel.IsCtrlModifier">
            <summary>
            Checks to see if Ctrl (control) key modifier has been supplied.
            </summary>
            <returns>True if Ctrl modifier.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Wheel.IsAltModifier">
            <summary>
            Checks to see if Alt key modifier has been supplied.
            </summary>
            <returns>True if Alt modifier.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.Wheel.WheelType">
            <summary>
            The type of the wheel event.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Wheel.WheelType.MouseWheel">
            <summary>
            Mouse wheel event.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Wheel.WheelType.CustomWheel">
            <summary>
            Custom wheel event.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.Widget">
            <summary>
            Widget provides some common functionality required by all custom widget.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Widget.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            Dispose.
            </summary>
            <param name="type">The dispose type</param>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.Widget.TerminationType">
            <summary>
            Enumeration for termination type of widget
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Widget.TerminationType.Permanent">
            <summary>
            User deleted this widget from the viewer
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Widget.TerminationType.Temporary">
            <summary>
            Widget is deleted because of other reasons (e.g. widget process is terminated temporarily by system)
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Widget.#ctor">
            <summary>
            Creates a Widget handle.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Widget.OnCreate(System.String,Tizen.NUI.Window)">
            <summary>
            The user should override this function to determine when they create widget.
            </summary>
            <param name="contentInfo">Information from WidgetView for creating. It contains previous status of widget which is sent by SetContentInfo before.</param>
            <param name="window">Window for widget</param>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Widget.OnTerminate(System.String,Tizen.NUI.Widget.TerminationType)">
            <summary>
            The user should override this function to determine when they terminate widget.
            </summary>
            <param name="contentInfo">Data from WidgetView for deleting</param>
            <param name="type">Termination type. When user delete widget view, termination type is PERMANENT.</param>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Widget.OnPause">
            <summary>
            The user should override this function to determine when they pause widget.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Widget.OnResume">
            <summary>
            The user should override this function to determine when they resume widget.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Widget.OnResize(Tizen.NUI.Window)">
            <summary>
            The user should override this function to determine when they resize widget.
            </summary>
            <param name="window">Window for widget</param>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Widget.OnUpdate(System.String,System.Int32)">
            <summary>
            The user should override this function to determine when they update widget.
            </summary>
            <param name="contentInfo">Data from WidgetView for updating</param>
            <param name="force">Although the widget is paused, if it is true, the widget can be updated</param>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Widget.SetContentInfo(System.String)">
            <summary>
            Set content info to WidgetView.
            </summary>
            <param name="contentInfo">Content info is kind of context information which contains current status of widget.</param>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.WidgetView">
            <summary>
            The WidgetView is a class for displaying the widget image and controlling the widget.<br />
            Input events that the WidgetView gets are delivered to the widget.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.WidgetView.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            To make the Button instance be disposed.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.WidgetView.#ctor(System.String,System.String,System.Int32,System.Int32,System.Single)">
            <summary>
            Creates a new WidgetView.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.WidgetView.WidgetViewEventArgs">
            <summary>
            Event arguments of the widget view.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.WidgetView.WidgetViewEventArgs.WidgetView">
            <summary>
            The widet view.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="E:Tizen.NUI.WidgetView.WidgetAdded">
            <summary>
            An event for the ResourceReady signal which can be used to subscribe or unsubscribe the event handler.<br />
            This signal is emitted after all resources required by a control are loaded and ready.<br />
            Most resources are only loaded when the control is placed on the stage.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="E:Tizen.NUI.WidgetView.WidgetDeleted">
            <summary>
            An event for the ResourceReady signal which can be used to subscribe or unsubscribe the event handler.<br />
            This signal is emitted after all resources required by a control are loaded and ready.<br />
            Most resources are only loaded when the control is placed on the stage.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="E:Tizen.NUI.WidgetView.WidgetCreationAborted">
            <summary>
            An event for the ResourceReady signal which can be used to subscribe or unsubscribe the event handler.<br />
            This signal is emitted after all resources required by a control are loaded and ready.<br />
            Most resources are only loaded when the control is placed on the stage.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="E:Tizen.NUI.WidgetView.WidgetContentUpdated">
            <summary>
            An event for the ResourceReady signal which can be used to subscribe or unsubscribe the event handler.<br />
            This signal is emitted after all resources required by a control are loaded and ready.<br />
            Most resources are only loaded when the control is placed on the stage.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="E:Tizen.NUI.WidgetView.WidgetUpdatePeriodChanged">
            <summary>
            An event for the ResourceReady signal which can be used to subscribe or unsubscribe the event handler.<br />
            This signal is emitted after all resources required by a control are loaded and ready.<br />
            Most resources are only loaded when the control is placed on the stage.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="E:Tizen.NUI.WidgetView.WidgetFaulted">
            <summary>
            An event for the ResourceReady signal which can be used to subscribe or unsubscribe the event handler.<br />
            This signal is emitted after all resources required by a control are loaded and ready.<br />
            Most resources are only loaded when the control is placed on the stage.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.WidgetView.PauseWidget">
            <summary>
            Pauses a given widget.
            </summary>
            <returns>True on success, false otherwise.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.WidgetView.ResumeWidget">
            <summary>
            Resumes a given widget.
            </summary>
            <returns>True on success, false otherwise.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.WidgetView.CancelTouchEvent">
            <summary>
            Cancels the touch event procedure.
            If you call this function after feed the touch down event, the widget will get ON_HOLD events.
             If a widget gets ON_HOLD event, it will not do anything even if you feed touch up event.
            </summary>
            <returns>True on success, false otherwise.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.WidgetView.ActivateFaultedWidget">
            <summary>
            Activates a widget in the faulted state.
            A widget in faulted state must be activated before adding the widget.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.WidgetView.TerminateWidget">
            <summary>
            Terminate a widget instance.
            </summary>
            <returns>True on success, false otherwise</returns>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.WidgetView.WidgetID">
            <summary>
            Gets the ID of the widget.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.WidgetView.InstanceID">
            <summary>
            Gets the ID of the instance.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.WidgetView.ContentInfo">
            <summary>
            Gets the content info.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.WidgetView.Title">
            <summary>
            Gets the title.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.WidgetView.UpdatePeriod">
            <summary>
            Gets the update peroid.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.WidgetView.Preview">
            <summary>
            Gets or sets the preview.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.WidgetView.LoadingText">
            <summary>
            Gets or sets the loading text.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.WidgetView.WidgetStateFaulted">
            <summary>
            Gets or sets whether the widget state is faulted or not.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.WidgetView.PermanentDelete">
            <summary>
            Gets or sets whether the widget is to delete permanently or not.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.WidgetView.RetryText">
            <summary>
            Gets or sets retry text.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.WidgetView.Effect">
            <summary>
            Gets or sets effect.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.WidgetViewManager">
            <summary>
            WidgetViewManager manages addition of WidgetView controls.
            This class provides the functionality of adding the widget views and controlling the widgets.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.WidgetViewManager.Dispose(Tizen.NUI.DisposeTypes)">
            <summary>
            To make WidgetViewManager instance be disposed.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.WidgetViewManager.#ctor(Tizen.NUI.NUIApplication,System.String)">
            <summary>
            Creates a new widgetView manager object.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.WidgetViewManager.AddWidget(System.String,System.String,System.Int32,System.Int32,System.Single)">
            <summary>
            Creates a new widget view object.
            </summary>
            <param name="widgetId">The widget ID.</param>
            <param name="contentInfo">Contents that will be given to the widget instance.</param>
            <param name="width">The widget width.</param>
            <param name="height">The widget height.</param>
            <param name="updatePeriod">The period of updating contents of the widget.</param>
            <returns>A handle to WidgetView.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.Window">
            <summary>
            The window class is used internally for drawing.<br />
            The window has an orientation and indicator properties.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Window.SetAcceptFocus(System.Boolean)">
            <summary>
            Sets whether the window accepts a focus or not.
            </summary>
            <param name="accept">If a focus is accepted or not. The default is true.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Window.IsFocusAcceptable">
            <summary>
            Returns whether the window accepts a focus or not.
            </summary>
            <returns>True if the window accepts a focus, false otherwise.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Window.Show">
            <summary>
            Shows the window if it is hidden.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Window.Hide">
            <summary>
            Hides the window if it is showing.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Window.IsVisible">
            <summary>
            Retrieves whether the window is visible or not.
            </summary>
            <returns>True if the window is visible.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Window.GetSupportedAuxiliaryHintCount">
            <summary>
            Gets the count of supported auxiliary hints of the window.
            </summary>
            <returns>The number of supported auxiliary hints.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Window.GetSupportedAuxiliaryHint(System.UInt32)">
            <summary>
            Gets the supported auxiliary hint string of the window.
            </summary>
            <param name="index">The index of the supported auxiliary hint lists.</param>
            <returns>The auxiliary hint string of the index.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Window.AddAuxiliaryHint(System.String,System.String)">
            <summary>
            Creates an auxiliary hint of the window.
            </summary>
            <param name="hint">The auxiliary hint string.</param>
            <param name="value">The value string.</param>
            <returns>The ID of created auxiliary hint, or 0 on failure.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Window.RemoveAuxiliaryHint(System.UInt32)">
            <summary>
            Removes an auxiliary hint of the window.
            </summary>
            <param name="id">The ID of the auxiliary hint.</param>
            <returns>True if no error occurred, false otherwise.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Window.SetAuxiliaryHintValue(System.UInt32,System.String)">
            <summary>
            Changes a value of the auxiliary hint.
            </summary>
            <param name="id">The auxiliary hint ID.</param>
            <param name="value">The value string to be set.</param>
            <returns>True if no error occurred, false otherwise.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Window.GetAuxiliaryHintValue(System.UInt32)">
            <summary>
            Gets a value of the auxiliary hint.
            </summary>
            <param name="id">The auxiliary hint ID.</param>
            <returns>The string value of the auxiliary hint ID, or an empty string if none exists.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Window.GetAuxiliaryHintId(System.String)">
            <summary>
            Gets an ID of the auxiliary hint string.
            </summary>
            <param name="hint">The auxiliary hint string.</param>
            <returns>The ID of auxiliary hint string, or 0 on failure.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Window.SetInputRegion(Tizen.NUI.Rectangle)">
            <summary>
            Sets a region to accept input events.
            </summary>
            <param name="inputRegion">The region to accept input events.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Window.Type">
            <summary>
            Gets or sets a window type.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Window.SetNotificationLevel(Tizen.NUI.NotificationLevel)">
            <summary>
            Sets a priority level for the specified notification window.
            </summary>
            <param name="level">The notification window level.</param>
            <returns>True if no error occurred, false otherwise.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Window.GetNotificationLevel">
            <summary>
            Gets a priority level for the specified notification window.
            </summary>
            <returns>The notification window level.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Window.SetOpaqueState(System.Boolean)">
            <summary>
            Sets a transparent window's visual state to opaque. <br />
            If a visual state of a transparent window is opaque, <br />
            then the window manager could handle it as an opaque window when calculating visibility.
            </summary>
            <param name="opaque">Whether the window's visual state is opaque.</param>
            <remarks>This will have no effect on an opaque window. <br />
            It doesn't change transparent window to opaque window but lets the window manager know the visual state of the window.
            </remarks>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Window.IsOpaqueState">
            <summary>
            Returns whether a transparent window's visual state is opaque or not.
            </summary>
            <returns>True if the window's visual state is opaque, false otherwise.</returns>
            <remarks> The return value has no meaning on an opaque window. </remarks>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Window.SetScreenOffMode(Tizen.NUI.ScreenOffMode)">
            <summary>
            Sets a window's screen off mode.
            </summary>
            <param name="screenOffMode">The screen mode.</param>
            <returns>True if no error occurred, false otherwise.</returns>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Window.GetScreenOffMode">
            <summary>
            Gets the screen mode of the window.
            </summary>
            <returns>The screen off mode.</returns>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Window.SetBrightness(System.Int32)">
            <summary>
            Sets preferred brightness of the window.
            </summary>
            <param name="brightness">The preferred brightness (0 to 100).</param>
            <returns>True if no error occurred, false otherwise.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Window.GetBrightness">
            <summary>
            Gets the preferred brightness of the window.
            </summary>
            <returns>The preferred brightness.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.Window.FocusChangedEventArgs">
            <summary>
            The focus changed event argument.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Window.FocusChangedEventArgs.FocusGained">
            <summary>
            FocusGained flag.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="E:Tizen.NUI.Window.FocusChanged">
            <summary>
            FocusChanged event.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Window.Title">
            <summary>
            Gets/Sets a window title.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Window.SetClass(System.String,System.String)">
            <summary>
            Sets the window name and the class string.
            </summary>
            <param name="name">The name of the window.</param>
            <param name="klass">The class of the window.</param>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Window.Raise">
            <summary>
            Raises the window to the top of the window stack.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Window.Lower">
            <summary>
            Lowers the window to the bottom of the window stack.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Window.Activate">
            <summary>
            Activates the window to the top of the window stack even it is iconified.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Window.GetDefaultLayer">
            <summary>
            Gets the default ( root ) layer.
            </summary>
            <returns>The root layer.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Window.Add(Tizen.NUI.BaseComponents.View)">
            <summary>
            Add a child view to window.
            </summary>
            <param name="view">the child should be added to the window.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Window.Remove(Tizen.NUI.BaseComponents.View)">
            <summary>
            Remove a child view from window.
            </summary>
            <param name="view">the child to be removed.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Window.GetLayerCount">
            <summary>
            Queries the number of on-window layers.
            </summary>
            <returns>The number of layers.</returns>
            <remarks>Note that a default layer is always provided (count >= 1).</remarks>
        </member>
        <member name="M:Tizen.NUI.Window.GetLayer(System.UInt32)">
            <summary>
            Retrieves the layer at a specified depth.
            </summary>
            <param name="depth">The layer's depth index.</param>
            <returns>The layer found at the given depth.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Window.KeepRendering(System.Single)">
            <summary>
            Keep rendering for at least the given amount of time.
            </summary>
            <param name="durationSeconds">Time to keep rendering, 0 means render at least one more frame.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Window.Instance">
            <summary>
            The stage instance property (read-only).<br />
            Gets the current window.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Window.GrabKeyTopmost(System.Int32)">
            <summary>
            Grabs the key specified by a key for a window only when a window is the topmost window.<br />
            This function can be used for following example scenarios: <br />
            - Mobile - Using volume up or down as zoom up or down in camera apps.<br />
            </summary>
            <param name="DaliKey">The key code to grab.</param>
            <returns>True if the grab succeeds.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Window.UngrabKeyTopmost(System.Int32)">
            <summary>
            Ungrabs the key specified by a key for the window.<br />
            Note: If this function is called between key down and up events of a grabbed key, an application doesn't receive the key up event.<br />
            </summary>
            <param name="DaliKey">The key code to ungrab.</param>
            <returns>True if the ungrab succeeds.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Window.GrabKey(System.Int32,Tizen.NUI.Window.KeyGrabMode)">
            <summary>
             Grabs the key specified by a key for a window in a GrabMode. <br />
             Details: This function can be used for following example scenarios: <br />
             - TV - A user might want to change the volume or channel of the background TV contents while focusing on the foregrund app. <br />
             - Mobile - When a user presses the Home key, the homescreen appears regardless of the current foreground app. <br />
             - Mobile - Using the volume up or down as zoom up or down in camera apps. <br />
            </summary>
            <param name="DaliKey">The key code to grab.</param>
            <param name="GrabMode">The grab mode for the key.</param>
            <returns>True if the grab succeeds.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Window.UngrabKey(System.Int32)">
            <summary>
            Ungrabs the key specified by a key for a window.<br />
            Note: If this function is called between key down and up events of a grabbed key, an application doesn't receive the key up event. <br />
            </summary>
            <param name="DaliKey">The key code to ungrab.</param>
            <returns>True if the ungrab succeeds.</returns>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.Window.WindowOrientation">
            <summary>
            Enumeration for orientation of the window is the way in which a rectangular page is oriented for normal viewing.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Window.WindowOrientation.Portrait">
            <summary>
            Portrait orientation. The height of the display area is greater than the width.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Window.WindowOrientation.Landscape">
            <summary>
            Landscape orientation. A wide view area is needed.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Window.WindowOrientation.PortraitInverse">
            <summary>
            Portrait inverse orientation.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Window.WindowOrientation.LandscapeInverse">
            <summary>
            Landscape inverse orientation.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.Window.KeyGrabMode">
            <summary>
            Enumeration for the key grab mode for platform-level APIs.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="F:Tizen.NUI.Window.KeyGrabMode.Topmost">
            <summary>
            Grabs a key only when on the top of the grabbing-window stack mode.
            </summary>
        </member>
        <member name="F:Tizen.NUI.Window.KeyGrabMode.Shared">
            <summary>
            Grabs a key together with the other client window(s) mode.
            </summary>
        </member>
        <member name="F:Tizen.NUI.Window.KeyGrabMode.OverrideExclusive">
            <summary>
            Grabs a key exclusively regardless of the grabbing-window's position on the window stack with the possibility of overriding the grab by the other client window mode.
            </summary>
        </member>
        <member name="F:Tizen.NUI.Window.KeyGrabMode.Exclusive">
            <summary>
            Grabs a key exclusively regardless of the grabbing-window's position on the window stack mode.
            </summary>
        </member>
        <member name="T:Tizen.NUI.Window.IndicatorBackgroundOpacity">
            <summary>
            Enumeration for opacity of the indicator.
            </summary>
        </member>
        <member name="T:Tizen.NUI.Window.IndicatorVisibleMode">
            <summary>
            Enumeration for visible mode of the indicator.
            </summary>
        </member>
        <member name="T:Tizen.NUI.Window.TouchEventArgs">
            <summary>
            The touch event argument.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Window.TouchEventArgs.Touch">
            <summary>
            Touch.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="E:Tizen.NUI.Window.TouchEvent">
            <summary>
            This event is emitted when the screen is touched and when the touch ends.<br />
            If there are multiple touch points, then this will be emitted when the first touch occurs and
            then when the last finger is lifted.<br />
            An interrupted event will also be emitted (if it occurs).<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.Window.WheelEventArgs">
            <summary>
            Wheel event arguments.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Window.WheelEventArgs.Wheel">
            <summary>
            Wheel.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="E:Tizen.NUI.Window.WheelEvent">
            <summary>
            This event is emitted when the wheel event is received.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.Window.KeyEventArgs">
            <summary>
            Key event arguments.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Window.KeyEventArgs.Key">
            <summary>
            Key.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="E:Tizen.NUI.Window.KeyEvent">
            <summary>
            This event is emitted when the key event is received.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.Window.ResizedEventArgs">
            <summary>
            This resized event arguments.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Window.ResizedEventArgs.WindowSize">
            <summary>
            This window size.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="E:Tizen.NUI.Window.Resized">
            <summary>
            This event is emitted when the window resized.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Window.SetTransparency(System.Boolean)">
            <summary>
            Sets whether the window is transparent or not.
            </summary>
            <param name="transparent">Whether the window is transparent.</param>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Window.Size">
            <summary>
            The window size property (read-only).
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Window.BackgroundColor">
            <summary>
            The background color property.
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Window.Dpi">
            <summary>
            The DPI property (read-only).<br />
            Retrieves the DPI of the display device to which the Window is connected.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Window.LayerCount">
            <summary>
            The layer count property (read-only).<br />
            Queries the number of on-Window layers.<br />
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Window.AddLayer(Tizen.NUI.Layer)">
            <summary>
            Adds a layer to the stage.
            </summary>
            <param name="layer">Layer to add.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Window.RemoveLayer(Tizen.NUI.Layer)">
            <summary>
            Removes a layer from the stage.
            </summary>
            <param name="layer">Layer to remove.</param>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.Window.WindowFocusChangedEventArgs">
            <summary>
            Please do not use! this will be deprecated
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Window.WindowFocusChangedEventArgs.FocusGained">
            <summary>
            Please do not use! this will be deprecated
            </summary>
            <since_tizen> 3 </since_tizen>
        </member>
        <member name="E:Tizen.NUI.Window.WindowFocusChanged">
            <summary>
            Please do not use! this will be deprecated. Please use 'FocusChanged' event instead.
            </summary>
            <since_tizen> 3 </since_tizen>
            Please do not use! this will be deprecated!
            Instead please use FocusChanged.
        </member>
        <member name="P:Tizen.NUI.Window.WindowSize">
            <summary>
            Gets or sets a size of the window.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Window.WindowPosition">
            <summary>
            Gets or sets a position of the window.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Window.FeedKey(Tizen.NUI.Key)">
            <summary>
            Feed a key-event into the window.
            </summary>
            <param name="keyEvent">The key event to feed.</param>
            <since_tizen> 5 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Window.FeedKeyEvent(Tizen.NUI.Key)">
            <summary>
            Feed a key-event into the window.
            </summary>
            <param name="keyEvent">The key event to feed.</param>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Window.RenderOnce">
            <summary>
            Allows at least one more render, even when paused.
            The window should be shown, not minimised.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="T:Tizen.NUI.Window.SafeNativeWindowHandle">
            <summary>
            Contains and encapsulates Native Window handle.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Window.SafeNativeWindowHandle.#ctor">
            <summary>
            Contructor, Native window handle is set to handle.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="P:Tizen.NUI.Window.SafeNativeWindowHandle.IsInvalid">
            <summary>
            Null check if the handle is valid or not.
            </summary>
            <since_tizen> 4 </since_tizen>
        </member>
        <member name="M:Tizen.NUI.Window.SafeNativeWindowHandle.ReleaseHandle">
            <summary>
            Release handle itself.
            </summary>
            <returns>true when released successfully.</returns>
            <since_tizen> 4 </since_tizen>
        </member>
    </members>
</doc>
